{"ast":null,"code":"// Blake2B in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nconst util = require('./util');\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA(v, a, b) {\n  const o0 = v[a] + v[b];\n  let o1 = v[a + 1] + v[b + 1];\n  if (o0 >= 0x100000000) {\n    o1++;\n  }\n  v[a] = o0;\n  v[a + 1] = o1;\n}\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC(v, a, b0, b1) {\n  let o0 = v[a] + b0;\n  if (b0 < 0) {\n    o0 += 0x100000000;\n  }\n  let o1 = v[a + 1] + b1;\n  if (o0 >= 0x100000000) {\n    o1++;\n  }\n  v[a] = o0;\n  v[a + 1] = o1;\n}\n\n// Little-endian byte access\nfunction B2B_GET32(arr, i) {\n  return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G(a, b, c, d, ix, iy) {\n  const x0 = m[ix];\n  const x1 = m[ix + 1];\n  const y0 = m[iy];\n  const y1 = m[iy + 1];\n  ADD64AA(v, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n  ADD64AC(v, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  let xor0 = v[d] ^ v[a];\n  let xor1 = v[d + 1] ^ v[a + 1];\n  v[d] = xor1;\n  v[d + 1] = xor0;\n  ADD64AA(v, c, d);\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c];\n  xor1 = v[b + 1] ^ v[c + 1];\n  v[b] = xor0 >>> 24 ^ xor1 << 8;\n  v[b + 1] = xor1 >>> 24 ^ xor0 << 8;\n  ADD64AA(v, a, b);\n  ADD64AC(v, a, y0, y1);\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a];\n  xor1 = v[d + 1] ^ v[a + 1];\n  v[d] = xor0 >>> 16 ^ xor1 << 16;\n  v[d + 1] = xor1 >>> 16 ^ xor0 << 16;\n  ADD64AA(v, c, d);\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c];\n  xor1 = v[b + 1] ^ v[c + 1];\n  v[b] = xor1 >>> 31 ^ xor0 << 1;\n  v[b + 1] = xor0 >>> 31 ^ xor1 << 1;\n}\n\n// Initialization Vector\nconst BLAKE2B_IV32 = new Uint32Array([0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19]);\nconst SIGMA8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3];\n\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nconst SIGMA82 = new Uint8Array(SIGMA8.map(function (x) {\n  return x * 2;\n}));\n\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nconst v = new Uint32Array(32);\nconst m = new Uint32Array(32);\nfunction blake2bCompress(ctx, last) {\n  let i = 0;\n\n  // init work variables\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i];\n    v[i + 16] = BLAKE2B_IV32[i];\n  }\n\n  // low 64 bits of offset\n  v[24] = v[24] ^ ctx.t;\n  v[25] = v[25] ^ ctx.t / 0x100000000;\n  // high 64 bits not supported, offset may not be higher than 2**53-1\n\n  // last block flag set ?\n  if (last) {\n    v[28] = ~v[28];\n    v[29] = ~v[29];\n  }\n\n  // get little-endian words\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i);\n  }\n\n  // twelve rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 64)\n  for (i = 0; i < 12; i++) {\n    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);\n  }\n  // util.debugPrint('   (i=12) v[16]', v, 64)\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];\n  }\n  // util.debugPrint('h[8]', ctx.h, 64)\n}\n\n// reusable parameterBlock\nconst parameterBlock = new Uint8Array([0, 0, 0, 0,\n//  0: outlen, keylen, fanout, depth\n0, 0, 0, 0,\n//  4: leaf length, sequential mode\n0, 0, 0, 0,\n//  8: node offset\n0, 0, 0, 0,\n// 12: node offset\n0, 0, 0, 0,\n// 16: node depth, inner length, rfu\n0, 0, 0, 0,\n// 20: rfu\n0, 0, 0, 0,\n// 24: rfu\n0, 0, 0, 0,\n// 28: rfu\n0, 0, 0, 0,\n// 32: salt\n0, 0, 0, 0,\n// 36: salt\n0, 0, 0, 0,\n// 40: salt\n0, 0, 0, 0,\n// 44: salt\n0, 0, 0, 0,\n// 48: personal\n0, 0, 0, 0,\n// 52: personal\n0, 0, 0, 0,\n// 56: personal\n0, 0, 0, 0 // 60: personal\n]);\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\n// Takes an optinal Uint8Array salt\n// Takes an optinal Uint8Array personal\nfunction blake2bInit(outlen, key, salt, personal) {\n  if (outlen === 0 || outlen > 64) {\n    throw new Error('Illegal output length, expected 0 < length <= 64');\n  }\n  if (key && key.length > 64) {\n    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64');\n  }\n  if (salt && salt.length !== 16) {\n    throw new Error('Illegal salt, expected Uint8Array with length is 16');\n  }\n  if (personal && personal.length !== 16) {\n    throw new Error('Illegal personal, expected Uint8Array with length is 16');\n  }\n\n  // state, 'param block'\n  const ctx = {\n    b: new Uint8Array(128),\n    h: new Uint32Array(16),\n    t: 0,\n    // input count\n    c: 0,\n    // pointer within buffer\n    outlen: outlen // output length in bytes\n  };\n\n  // initialize parameterBlock before usage\n  parameterBlock.fill(0);\n  parameterBlock[0] = outlen;\n  if (key) parameterBlock[1] = key.length;\n  parameterBlock[2] = 1; // fanout\n  parameterBlock[3] = 1; // depth\n  if (salt) parameterBlock.set(salt, 32);\n  if (personal) parameterBlock.set(personal, 48);\n\n  // initialize hash state\n  for (let i = 0; i < 16; i++) {\n    ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4);\n  }\n\n  // key the hash, if applicable\n  if (key) {\n    blake2bUpdate(ctx, key);\n    // at the end\n    ctx.c = 128;\n  }\n  return ctx;\n}\n\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate(ctx, input) {\n  for (let i = 0; i < input.length; i++) {\n    if (ctx.c === 128) {\n      // buffer full ?\n      ctx.t += ctx.c; // add counters\n      blake2bCompress(ctx, false); // compress (not last)\n      ctx.c = 0; // counter to zero\n    }\n\n    ctx.b[ctx.c++] = input[i];\n  }\n}\n\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal(ctx) {\n  ctx.t += ctx.c; // mark last block offset\n\n  while (ctx.c < 128) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0;\n  }\n  blake2bCompress(ctx, true); // final block flag = 1\n\n  // little endian convert and store\n  const out = new Uint8Array(ctx.outlen);\n  for (let i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> 8 * (i & 3);\n  }\n  return out;\n}\n\n// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\nfunction blake2b(input, key, outlen, salt, personal) {\n  // preprocess inputs\n  outlen = outlen || 64;\n  input = util.normalizeInput(input);\n  if (salt) {\n    salt = util.normalizeInput(salt);\n  }\n  if (personal) {\n    personal = util.normalizeInput(personal);\n  }\n\n  // do the math\n  const ctx = blake2bInit(outlen, key, salt, personal);\n  blake2bUpdate(ctx, input);\n  return blake2bFinal(ctx);\n}\n\n// Computes the BLAKE2B hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\nfunction blake2bHex(input, key, outlen, salt, personal) {\n  const output = blake2b(input, key, outlen, salt, personal);\n  return util.toHex(output);\n}\nmodule.exports = {\n  blake2b: blake2b,\n  blake2bHex: blake2bHex,\n  blake2bInit: blake2bInit,\n  blake2bUpdate: blake2bUpdate,\n  blake2bFinal: blake2bFinal\n};","map":{"version":3,"names":["util","require","ADD64AA","v","a","b","o0","o1","ADD64AC","b0","b1","B2B_GET32","arr","i","B2B_G","c","d","ix","iy","x0","m","x1","y0","y1","xor0","xor1","BLAKE2B_IV32","Uint32Array","SIGMA8","SIGMA82","Uint8Array","map","x","blake2bCompress","ctx","last","h","t","parameterBlock","blake2bInit","outlen","key","salt","personal","Error","length","fill","set","blake2bUpdate","input","blake2bFinal","out","blake2b","normalizeInput","blake2bHex","output","toHex","module","exports"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/blakejs/blake2b.js"],"sourcesContent":["// Blake2B in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nconst util = require('./util')\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA (v, a, b) {\n  const o0 = v[a] + v[b]\n  let o1 = v[a + 1] + v[b + 1]\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC (v, a, b0, b1) {\n  let o0 = v[a] + b0\n  if (b0 < 0) {\n    o0 += 0x100000000\n  }\n  let o1 = v[a + 1] + b1\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// Little-endian byte access\nfunction B2B_GET32 (arr, i) {\n  return arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G (a, b, c, d, ix, iy) {\n  const x0 = m[ix]\n  const x1 = m[ix + 1]\n  const y0 = m[iy]\n  const y1 = m[iy + 1]\n\n  ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n  ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  let xor0 = v[d] ^ v[a]\n  let xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = xor1\n  v[d + 1] = xor0\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor0 >>> 24) ^ (xor1 << 8)\n  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\n\n  ADD64AA(v, a, b)\n  ADD64AC(v, a, y0, y1)\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a]\n  xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = (xor0 >>> 16) ^ (xor1 << 16)\n  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor1 >>> 31) ^ (xor0 << 1)\n  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\n}\n\n// Initialization Vector\nconst BLAKE2B_IV32 = new Uint32Array([\n  0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372,\n  0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c,\n  0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19\n])\n\nconst SIGMA8 = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13,\n  6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1,\n  9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4,\n  10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5,\n  15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7,\n  14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2,\n  13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0,\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6,\n  1, 12, 0, 2, 11, 7, 5, 3\n]\n\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nconst SIGMA82 = new Uint8Array(\n  SIGMA8.map(function (x) {\n    return x * 2\n  })\n)\n\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nconst v = new Uint32Array(32)\nconst m = new Uint32Array(32)\nfunction blake2bCompress (ctx, last) {\n  let i = 0\n\n  // init work variables\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i]\n    v[i + 16] = BLAKE2B_IV32[i]\n  }\n\n  // low 64 bits of offset\n  v[24] = v[24] ^ ctx.t\n  v[25] = v[25] ^ (ctx.t / 0x100000000)\n  // high 64 bits not supported, offset may not be higher than 2**53-1\n\n  // last block flag set ?\n  if (last) {\n    v[28] = ~v[28]\n    v[29] = ~v[29]\n  }\n\n  // get little-endian words\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i)\n  }\n\n  // twelve rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 64)\n  for (i = 0; i < 12; i++) {\n    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])\n  }\n  // util.debugPrint('   (i=12) v[16]', v, 64)\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]\n  }\n  // util.debugPrint('h[8]', ctx.h, 64)\n}\n\n// reusable parameterBlock\nconst parameterBlock = new Uint8Array([\n  0,\n  0,\n  0,\n  0, //  0: outlen, keylen, fanout, depth\n  0,\n  0,\n  0,\n  0, //  4: leaf length, sequential mode\n  0,\n  0,\n  0,\n  0, //  8: node offset\n  0,\n  0,\n  0,\n  0, // 12: node offset\n  0,\n  0,\n  0,\n  0, // 16: node depth, inner length, rfu\n  0,\n  0,\n  0,\n  0, // 20: rfu\n  0,\n  0,\n  0,\n  0, // 24: rfu\n  0,\n  0,\n  0,\n  0, // 28: rfu\n  0,\n  0,\n  0,\n  0, // 32: salt\n  0,\n  0,\n  0,\n  0, // 36: salt\n  0,\n  0,\n  0,\n  0, // 40: salt\n  0,\n  0,\n  0,\n  0, // 44: salt\n  0,\n  0,\n  0,\n  0, // 48: personal\n  0,\n  0,\n  0,\n  0, // 52: personal\n  0,\n  0,\n  0,\n  0, // 56: personal\n  0,\n  0,\n  0,\n  0 // 60: personal\n])\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\n// Takes an optinal Uint8Array salt\n// Takes an optinal Uint8Array personal\nfunction blake2bInit (outlen, key, salt, personal) {\n  if (outlen === 0 || outlen > 64) {\n    throw new Error('Illegal output length, expected 0 < length <= 64')\n  }\n  if (key && key.length > 64) {\n    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')\n  }\n  if (salt && salt.length !== 16) {\n    throw new Error('Illegal salt, expected Uint8Array with length is 16')\n  }\n  if (personal && personal.length !== 16) {\n    throw new Error('Illegal personal, expected Uint8Array with length is 16')\n  }\n\n  // state, 'param block'\n  const ctx = {\n    b: new Uint8Array(128),\n    h: new Uint32Array(16),\n    t: 0, // input count\n    c: 0, // pointer within buffer\n    outlen: outlen // output length in bytes\n  }\n\n  // initialize parameterBlock before usage\n  parameterBlock.fill(0)\n  parameterBlock[0] = outlen\n  if (key) parameterBlock[1] = key.length\n  parameterBlock[2] = 1 // fanout\n  parameterBlock[3] = 1 // depth\n  if (salt) parameterBlock.set(salt, 32)\n  if (personal) parameterBlock.set(personal, 48)\n\n  // initialize hash state\n  for (let i = 0; i < 16; i++) {\n    ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4)\n  }\n\n  // key the hash, if applicable\n  if (key) {\n    blake2bUpdate(ctx, key)\n    // at the end\n    ctx.c = 128\n  }\n\n  return ctx\n}\n\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate (ctx, input) {\n  for (let i = 0; i < input.length; i++) {\n    if (ctx.c === 128) {\n      // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2bCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal (ctx) {\n  ctx.t += ctx.c // mark last block offset\n\n  while (ctx.c < 128) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2bCompress(ctx, true) // final block flag = 1\n\n  // little endian convert and store\n  const out = new Uint8Array(ctx.outlen)\n  for (let i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> (8 * (i & 3))\n  }\n  return out\n}\n\n// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\nfunction blake2b (input, key, outlen, salt, personal) {\n  // preprocess inputs\n  outlen = outlen || 64\n  input = util.normalizeInput(input)\n  if (salt) {\n    salt = util.normalizeInput(salt)\n  }\n  if (personal) {\n    personal = util.normalizeInput(personal)\n  }\n\n  // do the math\n  const ctx = blake2bInit(outlen, key, salt, personal)\n  blake2bUpdate(ctx, input)\n  return blake2bFinal(ctx)\n}\n\n// Computes the BLAKE2B hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\nfunction blake2bHex (input, key, outlen, salt, personal) {\n  const output = blake2b(input, key, outlen, salt, personal)\n  return util.toHex(output)\n}\n\nmodule.exports = {\n  blake2b: blake2b,\n  blake2bHex: blake2bHex,\n  blake2bInit: blake2bInit,\n  blake2bUpdate: blake2bUpdate,\n  blake2bFinal: blake2bFinal\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA,SAASC,OAAO,CAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACzB,MAAMC,EAAE,GAAGH,CAAC,CAACC,CAAC,CAAC,GAAGD,CAAC,CAACE,CAAC,CAAC;EACtB,IAAIE,EAAE,GAAGJ,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGD,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC;EAC5B,IAAIC,EAAE,IAAI,WAAW,EAAE;IACrBC,EAAE,EAAE;EACN;EACAJ,CAAC,CAACC,CAAC,CAAC,GAAGE,EAAE;EACTH,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGG,EAAE;AACf;;AAEA;AACA;AACA;AACA,SAASC,OAAO,CAAEL,CAAC,EAAEC,CAAC,EAAEK,EAAE,EAAEC,EAAE,EAAE;EAC9B,IAAIJ,EAAE,GAAGH,CAAC,CAACC,CAAC,CAAC,GAAGK,EAAE;EAClB,IAAIA,EAAE,GAAG,CAAC,EAAE;IACVH,EAAE,IAAI,WAAW;EACnB;EACA,IAAIC,EAAE,GAAGJ,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGM,EAAE;EACtB,IAAIJ,EAAE,IAAI,WAAW,EAAE;IACrBC,EAAE,EAAE;EACN;EACAJ,CAAC,CAACC,CAAC,CAAC,GAAGE,EAAE;EACTH,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGG,EAAE;AACf;;AAEA;AACA,SAASI,SAAS,CAAEC,GAAG,EAAEC,CAAC,EAAE;EAC1B,OAAOD,GAAG,CAACC,CAAC,CAAC,GAAID,GAAG,CAACC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAE,GAAID,GAAG,CAACC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAG,GAAID,GAAG,CAACC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAG;AAC7E;;AAEA;AACA;AACA,SAASC,KAAK,CAAEV,CAAC,EAAEC,CAAC,EAAEU,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAE;EAClC,MAAMC,EAAE,GAAGC,CAAC,CAACH,EAAE,CAAC;EAChB,MAAMI,EAAE,GAAGD,CAAC,CAACH,EAAE,GAAG,CAAC,CAAC;EACpB,MAAMK,EAAE,GAAGF,CAAC,CAACF,EAAE,CAAC;EAChB,MAAMK,EAAE,GAAGH,CAAC,CAACF,EAAE,GAAG,CAAC,CAAC;EAEpBhB,OAAO,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,EAAC;EACjBG,OAAO,CAACL,CAAC,EAAEC,CAAC,EAAEe,EAAE,EAAEE,EAAE,CAAC,EAAC;;EAEtB;EACA,IAAIG,IAAI,GAAGrB,CAAC,CAACa,CAAC,CAAC,GAAGb,CAAC,CAACC,CAAC,CAAC;EACtB,IAAIqB,IAAI,GAAGtB,CAAC,CAACa,CAAC,GAAG,CAAC,CAAC,GAAGb,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC;EAC9BD,CAAC,CAACa,CAAC,CAAC,GAAGS,IAAI;EACXtB,CAAC,CAACa,CAAC,GAAG,CAAC,CAAC,GAAGQ,IAAI;EAEftB,OAAO,CAACC,CAAC,EAAEY,CAAC,EAAEC,CAAC,CAAC;;EAEhB;EACAQ,IAAI,GAAGrB,CAAC,CAACE,CAAC,CAAC,GAAGF,CAAC,CAACY,CAAC,CAAC;EAClBU,IAAI,GAAGtB,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGF,CAAC,CAACY,CAAC,GAAG,CAAC,CAAC;EAC1BZ,CAAC,CAACE,CAAC,CAAC,GAAImB,IAAI,KAAK,EAAE,GAAKC,IAAI,IAAI,CAAE;EAClCtB,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,GAAIoB,IAAI,KAAK,EAAE,GAAKD,IAAI,IAAI,CAAE;EAEtCtB,OAAO,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EAChBG,OAAO,CAACL,CAAC,EAAEC,CAAC,EAAEkB,EAAE,EAAEC,EAAE,CAAC;;EAErB;EACAC,IAAI,GAAGrB,CAAC,CAACa,CAAC,CAAC,GAAGb,CAAC,CAACC,CAAC,CAAC;EAClBqB,IAAI,GAAGtB,CAAC,CAACa,CAAC,GAAG,CAAC,CAAC,GAAGb,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC;EAC1BD,CAAC,CAACa,CAAC,CAAC,GAAIQ,IAAI,KAAK,EAAE,GAAKC,IAAI,IAAI,EAAG;EACnCtB,CAAC,CAACa,CAAC,GAAG,CAAC,CAAC,GAAIS,IAAI,KAAK,EAAE,GAAKD,IAAI,IAAI,EAAG;EAEvCtB,OAAO,CAACC,CAAC,EAAEY,CAAC,EAAEC,CAAC,CAAC;;EAEhB;EACAQ,IAAI,GAAGrB,CAAC,CAACE,CAAC,CAAC,GAAGF,CAAC,CAACY,CAAC,CAAC;EAClBU,IAAI,GAAGtB,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGF,CAAC,CAACY,CAAC,GAAG,CAAC,CAAC;EAC1BZ,CAAC,CAACE,CAAC,CAAC,GAAIoB,IAAI,KAAK,EAAE,GAAKD,IAAI,IAAI,CAAE;EAClCrB,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,GAAImB,IAAI,KAAK,EAAE,GAAKC,IAAI,IAAI,CAAE;AACxC;;AAEA;AACA,MAAMC,YAAY,GAAG,IAAIC,WAAW,CAAC,CACnC,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EACtE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EACtE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAC/C,CAAC;AAEF,MAAMC,MAAM,GAAG,CACb,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAC7E,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAC3E,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAC5E,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAC1E,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAC7E,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAC3E,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAC3E,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAA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"},"metadata":{},"sourceType":"script"}