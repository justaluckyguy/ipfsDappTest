{"ast":null,"code":"'use strict';\n\nconst multihashing = require('multihashing-async');\nconst sort = require('stable');\nconst dagPBUtil = require('../util.js');\nconst serialize = dagPBUtil.serialize;\nconst dagNodeUtil = require('./util.js');\nconst linkSort = dagNodeUtil.linkSort;\nconst DAGNode = require('./index.js');\nconst DAGLink = require('../dag-link');\nfunction create(data, dagLinks, hashAlg, callback) {\n  if (typeof data === 'function') {\n    callback = data;\n    data = undefined;\n  } else if (typeof data === 'string') {\n    data = Buffer.from(data);\n  }\n  if (typeof dagLinks === 'function') {\n    callback = dagLinks;\n    dagLinks = [];\n  }\n  if (typeof hashAlg === 'function') {\n    callback = hashAlg;\n    hashAlg = undefined;\n  }\n  if (!Buffer.isBuffer(data)) {\n    return callback(new Error('Passed \\'data\\' is not a buffer or a string!'));\n  }\n  if (!hashAlg) {\n    hashAlg = 'sha2-256';\n  }\n  const links = dagLinks.map(link => {\n    return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n  });\n  const sortedLinks = sort(links, linkSort);\n  serialize({\n    data: data,\n    links: sortedLinks\n  }, (err, serialized) => {\n    if (err) {\n      return callback(err);\n    }\n    multihashing(serialized, hashAlg, (err, multihash) => {\n      if (err) {\n        return callback(err);\n      }\n      const dagNode = new DAGNode(data, sortedLinks, serialized, multihash);\n      callback(null, dagNode);\n    });\n  });\n}\nmodule.exports = create;","map":{"version":3,"names":["multihashing","require","sort","dagPBUtil","serialize","dagNodeUtil","linkSort","DAGNode","DAGLink","create","data","dagLinks","hashAlg","callback","undefined","Buffer","from","isBuffer","Error","links","map","link","isDAGLink","util","createDagLinkFromB58EncodedHash","sortedLinks","err","serialized","multihash","dagNode","module","exports"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipld-dag-pb/src/dag-node/create.js"],"sourcesContent":["'use strict'\n\nconst multihashing = require('multihashing-async')\nconst sort = require('stable')\nconst dagPBUtil = require('../util.js')\nconst serialize = dagPBUtil.serialize\nconst dagNodeUtil = require('./util.js')\nconst linkSort = dagNodeUtil.linkSort\nconst DAGNode = require('./index.js')\nconst DAGLink = require('../dag-link')\n\nfunction create (data, dagLinks, hashAlg, callback) {\n  if (typeof data === 'function') {\n    callback = data\n    data = undefined\n  } else if (typeof data === 'string') {\n    data = Buffer.from(data)\n  }\n  if (typeof dagLinks === 'function') {\n    callback = dagLinks\n    dagLinks = []\n  }\n  if (typeof hashAlg === 'function') {\n    callback = hashAlg\n    hashAlg = undefined\n  }\n\n  if (!Buffer.isBuffer(data)) {\n    return callback(new Error('Passed \\'data\\' is not a buffer or a string!'))\n  }\n\n  if (!hashAlg) {\n    hashAlg = 'sha2-256'\n  }\n\n  const links = dagLinks.map((link) => {\n    return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link)\n  })\n  const sortedLinks = sort(links, linkSort)\n\n  serialize({\n    data: data,\n    links: sortedLinks\n  }, (err, serialized) => {\n    if (err) {\n      return callback(err)\n    }\n    multihashing(serialized, hashAlg, (err, multihash) => {\n      if (err) {\n        return callback(err)\n      }\n      const dagNode = new DAGNode(data, sortedLinks, serialized, multihash)\n      callback(null, dagNode)\n    })\n  })\n}\n\nmodule.exports = create\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAClD,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAME,SAAS,GAAGF,OAAO,CAAC,YAAY,CAAC;AACvC,MAAMG,SAAS,GAAGD,SAAS,CAACC,SAAS;AACrC,MAAMC,WAAW,GAAGJ,OAAO,CAAC,WAAW,CAAC;AACxC,MAAMK,QAAQ,GAAGD,WAAW,CAACC,QAAQ;AACrC,MAAMC,OAAO,GAAGN,OAAO,CAAC,YAAY,CAAC;AACrC,MAAMO,OAAO,GAAGP,OAAO,CAAC,aAAa,CAAC;AAEtC,SAASQ,MAAM,CAAEC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAClD,IAAI,OAAOH,IAAI,KAAK,UAAU,EAAE;IAC9BG,QAAQ,GAAGH,IAAI;IACfA,IAAI,GAAGI,SAAS;EAClB,CAAC,MAAM,IAAI,OAAOJ,IAAI,KAAK,QAAQ,EAAE;IACnCA,IAAI,GAAGK,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC;EAC1B;EACA,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;IAClCE,QAAQ,GAAGF,QAAQ;IACnBA,QAAQ,GAAG,EAAE;EACf;EACA,IAAI,OAAOC,OAAO,KAAK,UAAU,EAAE;IACjCC,QAAQ,GAAGD,OAAO;IAClBA,OAAO,GAAGE,SAAS;EACrB;EAEA,IAAI,CAACC,MAAM,CAACE,QAAQ,CAACP,IAAI,CAAC,EAAE;IAC1B,OAAOG,QAAQ,CAAC,IAAIK,KAAK,CAAC,8CAA8C,CAAC,CAAC;EAC5E;EAEA,IAAI,CAACN,OAAO,EAAE;IACZA,OAAO,GAAG,UAAU;EACtB;EAEA,MAAMO,KAAK,GAAGR,QAAQ,CAACS,GAAG,CAAEC,IAAI,IAAK;IACnC,OAAOb,OAAO,CAACc,SAAS,CAACD,IAAI,CAAC,GAAGA,IAAI,GAAGb,OAAO,CAACe,IAAI,CAACC,+BAA+B,CAACH,IAAI,CAAC;EAC5F,CAAC,CAAC;EACF,MAAMI,WAAW,GAAGvB,IAAI,CAACiB,KAAK,EAAEb,QAAQ,CAAC;EAEzCF,SAAS,CAAC;IACRM,IAAI,EAAEA,IAAI;IACVS,KAAK,EAAEM;EACT,CAAC,EAAE,CAACC,GAAG,EAAEC,UAAU,KAAK;IACtB,IAAID,GAAG,EAAE;MACP,OAAOb,QAAQ,CAACa,GAAG,CAAC;IACtB;IACA1B,YAAY,CAAC2B,UAAU,EAAEf,OAAO,EAAE,CAACc,GAAG,EAAEE,SAAS,KAAK;MACpD,IAAIF,GAAG,EAAE;QACP,OAAOb,QAAQ,CAACa,GAAG,CAAC;MACtB;MACA,MAAMG,OAAO,GAAG,IAAItB,OAAO,CAACG,IAAI,EAAEe,WAAW,EAAEE,UAAU,EAAEC,SAAS,CAAC;MACrEf,QAAQ,CAAC,IAAI,EAAEgB,OAAO,CAAC;IACzB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAGtB,MAAM"},"metadata":{},"sourceType":"script"}