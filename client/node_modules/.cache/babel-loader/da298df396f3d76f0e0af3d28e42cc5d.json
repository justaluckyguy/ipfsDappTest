{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst dagPB = require('ipld-dag-pb');\nconst DAGLink = dagPB.DAGLink;\nconst cleanMultihash = require('../utils/clean-multihash');\nconst bs58 = require('bs58');\nconst LRU = require('lru-cache');\nconst lruOptions = {\n  max: 128\n};\nconst cache = LRU(lruOptions);\nmodule.exports = send => {\n  return promisify((multihash, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!options) {\n      options = {};\n    }\n    try {\n      multihash = cleanMultihash(multihash, options);\n    } catch (err) {\n      return callback(err);\n    }\n    const node = cache.get(multihash);\n    if (node) {\n      return callback(null, node.links);\n    }\n    send({\n      path: 'object/links',\n      args: multihash\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n      let links = [];\n      if (result.Links) {\n        links = result.Links.map(l => {\n          return new DAGLink(l.Name, l.Size, Buffer.from(bs58.decode(l.Hash)));\n        });\n      }\n      callback(null, links);\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","dagPB","DAGLink","cleanMultihash","bs58","LRU","lruOptions","max","cache","module","exports","send","multihash","options","callback","err","node","get","links","path","args","result","Links","map","l","Name","Size","Buffer","from","decode","Hash"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipfs-api/src/object/links.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst dagPB = require('ipld-dag-pb')\nconst DAGLink = dagPB.DAGLink\nconst cleanMultihash = require('../utils/clean-multihash')\nconst bs58 = require('bs58')\nconst LRU = require('lru-cache')\nconst lruOptions = {\n  max: 128\n}\n\nconst cache = LRU(lruOptions)\n\nmodule.exports = (send) => {\n  return promisify((multihash, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n    if (!options) {\n      options = {}\n    }\n\n    try {\n      multihash = cleanMultihash(multihash, options)\n    } catch (err) {\n      return callback(err)\n    }\n\n    const node = cache.get(multihash)\n\n    if (node) {\n      return callback(null, node.links)\n    }\n\n    send({\n      path: 'object/links',\n      args: multihash\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      let links = []\n\n      if (result.Links) {\n        links = result.Links.map((l) => {\n          return new DAGLink(l.Name, l.Size, Buffer.from(bs58.decode(l.Hash)))\n        })\n      }\n      callback(null, links)\n    })\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAa,CAAC;AACpC,MAAME,OAAO,GAAGD,KAAK,CAACC,OAAO;AAC7B,MAAMC,cAAc,GAAGH,OAAO,CAAC,0BAA0B,CAAC;AAC1D,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMK,GAAG,GAAGL,OAAO,CAAC,WAAW,CAAC;AAChC,MAAMM,UAAU,GAAG;EACjBC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,KAAK,GAAGH,GAAG,CAACC,UAAU,CAAC;AAE7BG,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOZ,SAAS,CAAC,CAACa,SAAS,EAAEC,OAAO,EAAEC,QAAQ,KAAK;IACjD,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;MACjCC,QAAQ,GAAGD,OAAO;MAClBA,OAAO,GAAG,CAAC,CAAC;IACd;IACA,IAAI,CAACA,OAAO,EAAE;MACZA,OAAO,GAAG,CAAC,CAAC;IACd;IAEA,IAAI;MACFD,SAAS,GAAGT,cAAc,CAACS,SAAS,EAAEC,OAAO,CAAC;IAChD,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,OAAOD,QAAQ,CAACC,GAAG,CAAC;IACtB;IAEA,MAAMC,IAAI,GAAGR,KAAK,CAACS,GAAG,CAACL,SAAS,CAAC;IAEjC,IAAII,IAAI,EAAE;MACR,OAAOF,QAAQ,CAAC,IAAI,EAAEE,IAAI,CAACE,KAAK,CAAC;IACnC;IAEAP,IAAI,CAAC;MACHQ,IAAI,EAAE,cAAc;MACpBC,IAAI,EAAER;IACR,CAAC,EAAE,CAACG,GAAG,EAAEM,MAAM,KAAK;MAClB,IAAIN,GAAG,EAAE;QACP,OAAOD,QAAQ,CAACC,GAAG,CAAC;MACtB;MAEA,IAAIG,KAAK,GAAG,EAAE;MAEd,IAAIG,MAAM,CAACC,KAAK,EAAE;QAChBJ,KAAK,GAAGG,MAAM,CAACC,KAAK,CAACC,GAAG,CAAEC,CAAC,IAAK;UAC9B,OAAO,IAAItB,OAAO,CAACsB,CAAC,CAACC,IAAI,EAAED,CAAC,CAACE,IAAI,EAAEC,MAAM,CAACC,IAAI,CAACxB,IAAI,CAACyB,MAAM,CAACL,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC;MACJ;MACAhB,QAAQ,CAAC,IAAI,EAAEI,KAAK,CAAC;IACvB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}