{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst dagPB = require('ipld-dag-pb');\nconst DAGNode = dagPB.DAGNode;\nconst LRU = require('lru-cache');\nconst lruOptions = {\n  max: 128\n};\nconst cache = LRU(lruOptions);\nconst SendOneFile = require('../utils/send-one-file');\nconst once = require('once');\nmodule.exports = send => {\n  const sendOneFile = SendOneFile(send, 'object/put');\n  return promisify((obj, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = {};\n    }\n    const callback = once(_callback);\n    if (!options) {\n      options = {};\n    }\n    let tmpObj = {\n      Data: null,\n      Links: []\n    };\n    if (Buffer.isBuffer(obj)) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: obj.toString(),\n          Links: []\n        };\n      }\n    } else if (obj.multihash) {\n      tmpObj = {\n        Data: obj.data.toString(),\n        Links: obj.links.map(l => {\n          const link = l.toJSON();\n          link.hash = link.multihash;\n          return link;\n        })\n      };\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = obj.Data.toString();\n      tmpObj.Links = obj.Links;\n    } else {\n      return callback(new Error('obj not recognized'));\n    }\n    let buf;\n    if (Buffer.isBuffer(obj) && options.enc) {\n      buf = obj;\n    } else {\n      buf = Buffer.from(JSON.stringify(tmpObj));\n    }\n    const enc = options.enc || 'json';\n    const sendOptions = {\n      qs: {\n        inputenc: enc\n      }\n    };\n    sendOneFile(buf, sendOptions, (err, result) => {\n      if (err) {\n        return callback(err); // early\n      }\n\n      if (Buffer.isBuffer(obj)) {\n        if (!options.enc) {\n          obj = {\n            Data: obj,\n            Links: []\n          };\n        } else if (options.enc === 'json') {\n          obj = JSON.parse(obj.toString());\n        }\n      }\n      let node;\n      if (obj.multihash) {\n        node = obj;\n      } else if (options.enc === 'protobuf') {\n        dagPB.util.deserialize(obj, (err, _node) => {\n          if (err) {\n            return callback(err);\n          }\n          node = _node;\n          next();\n        });\n        return;\n      } else {\n        DAGNode.create(Buffer.from(obj.Data), obj.Links, (err, _node) => {\n          if (err) {\n            return callback(err);\n          }\n          node = _node;\n          next();\n        });\n        return;\n      }\n      next();\n      function next() {\n        const nodeJSON = node.toJSON();\n        if (nodeJSON.multihash !== result.Hash) {\n          const err = new Error('multihashes do not match');\n          return callback(err);\n        }\n        cache.set(result.Hash, node);\n        callback(null, node);\n      }\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","dagPB","DAGNode","LRU","lruOptions","max","cache","SendOneFile","once","module","exports","send","sendOneFile","obj","options","_callback","callback","tmpObj","Data","Links","Buffer","isBuffer","enc","toString","multihash","data","links","map","l","link","toJSON","hash","Error","buf","from","JSON","stringify","sendOptions","qs","inputenc","err","result","parse","node","util","deserialize","_node","next","create","nodeJSON","Hash","set"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipfs-api/src/object/put.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\nconst LRU = require('lru-cache')\nconst lruOptions = {\n  max: 128\n}\n\nconst cache = LRU(lruOptions)\nconst SendOneFile = require('../utils/send-one-file')\nconst once = require('once')\n\nmodule.exports = (send) => {\n  const sendOneFile = SendOneFile(send, 'object/put')\n\n  return promisify((obj, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options\n      options = {}\n    }\n\n    const callback = once(_callback)\n\n    if (!options) {\n      options = {}\n    }\n\n    let tmpObj = {\n      Data: null,\n      Links: []\n    }\n\n    if (Buffer.isBuffer(obj)) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: obj.toString(),\n          Links: []\n        }\n      }\n    } else if (obj.multihash) {\n      tmpObj = {\n        Data: obj.data.toString(),\n        Links: obj.links.map((l) => {\n          const link = l.toJSON()\n          link.hash = link.multihash\n          return link\n        })\n      }\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = obj.Data.toString()\n      tmpObj.Links = obj.Links\n    } else {\n      return callback(new Error('obj not recognized'))\n    }\n\n    let buf\n    if (Buffer.isBuffer(obj) && options.enc) {\n      buf = obj\n    } else {\n      buf = Buffer.from(JSON.stringify(tmpObj))\n    }\n    const enc = options.enc || 'json'\n\n    const sendOptions = {\n      qs: { inputenc: enc }\n    }\n\n    sendOneFile(buf, sendOptions, (err, result) => {\n      if (err) {\n        return callback(err) // early\n      }\n\n      if (Buffer.isBuffer(obj)) {\n        if (!options.enc) {\n          obj = { Data: obj, Links: [] }\n        } else if (options.enc === 'json') {\n          obj = JSON.parse(obj.toString())\n        }\n      }\n\n      let node\n\n      if (obj.multihash) {\n        node = obj\n      } else if (options.enc === 'protobuf') {\n        dagPB.util.deserialize(obj, (err, _node) => {\n          if (err) {\n            return callback(err)\n          }\n          node = _node\n          next()\n        })\n        return\n      } else {\n        DAGNode.create(Buffer.from(obj.Data), obj.Links, (err, _node) => {\n          if (err) {\n            return callback(err)\n          }\n          node = _node\n          next()\n        })\n        return\n      }\n      next()\n\n      function next () {\n        const nodeJSON = node.toJSON()\n        if (nodeJSON.multihash !== result.Hash) {\n          const err = new Error('multihashes do not match')\n          return callback(err)\n        }\n\n        cache.set(result.Hash, node)\n        callback(null, node)\n      }\n    })\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}