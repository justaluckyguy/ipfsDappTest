{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar ethereumjs_common_1 = require(\"ethereumjs-common\");\nvar buffer_1 = require(\"buffer\");\n// secp256k1n/2\nvar N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * An Ethereum transaction.\n */\nvar Transaction = /** @class */function () {\n  /**\n   * Creates a new transaction from an object with its fields' values.\n   *\n   * @param data - A transaction can be initialized with its rlp representation, an array containing\n   * the value of its fields in order, or an object containing them by name.\n   *\n   * @param opts - The transaction's options, used to indicate the chain and hardfork the\n   * transactions belongs to.\n   *\n   * @note Transaction objects implement EIP155 by default. To disable it, use the constructor's\n   * second parameter to set a chain and hardfork before EIP155 activation (i.e. before Spurious\n   * Dragon.)\n   *\n   * @example\n   * ```js\n   * const txData = {\n   *   nonce: '0x00',\n   *   gasPrice: '0x09184e72a000',\n   *   gasLimit: '0x2710',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: '0x00',\n   *   data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057',\n   *   v: '0x1c',\n   *   r: '0x5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n   *   s: '0x5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n   * };\n   * const tx = new Transaction(txData);\n   * ```\n   */\n  function Transaction(data, opts) {\n    if (data === void 0) {\n      data = {};\n    }\n    if (opts === void 0) {\n      opts = {};\n    }\n    // instantiate Common class instance based on passed options\n    if (opts.common) {\n      if (opts.chain || opts.hardfork) {\n        throw new Error('Instantiation with both opts.common, and opts.chain and opts.hardfork parameter not allowed!');\n      }\n      this._common = opts.common;\n    } else {\n      var chain = opts.chain ? opts.chain : 'mainnet';\n      var hardfork = opts.hardfork ? opts.hardfork : 'petersburg';\n      this._common = new ethereumjs_common_1.default(chain, hardfork);\n    }\n    // Define Properties\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new buffer_1.Buffer([])\n    }];\n    // attached serialize\n    ethereumjs_util_1.defineProperties(this, fields, data);\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    });\n    this._validateV(this.v);\n    this._overrideVSetterWithValidation();\n  }\n  /**\n   * If the tx's `to` is to the creation address\n   */\n  Transaction.prototype.toCreationAddress = function () {\n    return this.to.toString('hex') === '';\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param includeSignature - Whether or not to include the signature\n   */\n  Transaction.prototype.hash = function (includeSignature) {\n    if (includeSignature === void 0) {\n      includeSignature = true;\n    }\n    var items;\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._implementsEIP155()) {\n        items = this.raw.slice(0, 6).concat([ethereumjs_util_1.toBuffer(this.getChainId()),\n        // TODO: stripping zeros should probably be a responsibility of the rlp module\n        ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0)), ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(0))]);\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    }\n    // create hash\n    return ethereumjs_util_1.rlphash(items);\n  };\n  /**\n   * returns chain ID\n   */\n  Transaction.prototype.getChainId = function () {\n    return this._common.chainId();\n  };\n  /**\n   * returns the sender's address\n   */\n  Transaction.prototype.getSenderAddress = function () {\n    if (this._from) {\n      return this._from;\n    }\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethereumjs_util_1.publicToAddress(pubkey);\n    return this._from;\n  };\n  /**\n   * returns the public key of the sender\n   */\n  Transaction.prototype.getSenderPublicKey = function () {\n    if (!this.verifySignature()) {\n      throw new Error('Invalid Signature');\n    }\n    // If the signature was verified successfully the _senderPubKey field is defined\n    return this._senderPubKey;\n  };\n  /**\n   * Determines if the signature is valid\n   */\n  Transaction.prototype.verifySignature = function () {\n    var msgHash = this.hash(false);\n    // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    if (this._common.gteHardfork('homestead') && new ethereumjs_util_1.BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n    try {\n      var v = ethereumjs_util_1.bufferToInt(this.v);\n      var useChainIdWhileRecoveringPubKey = v >= this.getChainId() * 2 + 35 && this._common.gteHardfork('spuriousDragon');\n      this._senderPubKey = ethereumjs_util_1.ecrecover(msgHash, v, this.r, this.s, useChainIdWhileRecoveringPubKey ? this.getChainId() : undefined);\n    } catch (e) {\n      return false;\n    }\n    return !!this._senderPubKey;\n  };\n  /**\n   * sign a transaction with a given private key\n   * @param privateKey - Must be 32 bytes in length\n   */\n  Transaction.prototype.sign = function (privateKey) {\n    // We clear any previous signature before signing it. Otherwise, _implementsEIP155's can give\n    // different results if this tx was already signed.\n    this.v = new buffer_1.Buffer([]);\n    this.s = new buffer_1.Buffer([]);\n    this.r = new buffer_1.Buffer([]);\n    var msgHash = this.hash(false);\n    var sig = ethereumjs_util_1.ecsign(msgHash, privateKey);\n    if (this._implementsEIP155()) {\n      sig.v += this.getChainId() * 2 + 8;\n    }\n    Object.assign(this, sig);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  Transaction.prototype.getDataFee = function () {\n    var data = this.raw[5];\n    var cost = new ethereumjs_util_1.BN(0);\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(this._common.param('gasPrices', 'txDataZero')) : cost.iaddn(this._common.param('gasPrices', 'txDataNonZero'));\n    }\n    return cost;\n  };\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n  Transaction.prototype.getBaseFee = function () {\n    var fee = this.getDataFee().iaddn(this._common.param('gasPrices', 'tx'));\n    if (this._common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this._common.param('gasPrices', 'txCreation'));\n    }\n    return fee;\n  };\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   */\n  Transaction.prototype.getUpfrontCost = function () {\n    return new ethereumjs_util_1.BN(this.gasLimit).imul(new ethereumjs_util_1.BN(this.gasPrice)).iadd(new ethereumjs_util_1.BN(this.value));\n  };\n  Transaction.prototype.validate = function (stringError) {\n    if (stringError === void 0) {\n      stringError = false;\n    }\n    var errors = [];\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n    if (this.getBaseFee().cmp(new ethereumjs_util_1.BN(this.gasLimit)) > 0) {\n      errors.push([\"gas limit is too low. Need at least \" + this.getBaseFee()]);\n    }\n    if (stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n  /**\n   * Returns the rlp encoding of the transaction\n   */\n  Transaction.prototype.serialize = function () {\n    // Note: This never gets executed, defineProperties overwrites it.\n    return ethereumjs_util_1.rlp.encode(this.raw);\n  };\n  /**\n   * Returns the transaction in JSON format\n   * @see {@link https://github.com/ethereumjs/ethereumjs-util/blob/master/docs/index.md#defineproperties|ethereumjs-util}\n   */\n  Transaction.prototype.toJSON = function (labels) {\n    if (labels === void 0) {\n      labels = false;\n    }\n    // Note: This never gets executed, defineProperties overwrites it.\n    return {};\n  };\n  Transaction.prototype._validateV = function (v) {\n    if (v === undefined || v.length === 0) {\n      return;\n    }\n    if (!this._common.gteHardfork('spuriousDragon')) {\n      return;\n    }\n    var vInt = ethereumjs_util_1.bufferToInt(v);\n    if (vInt === 27 || vInt === 28) {\n      return;\n    }\n    var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;\n    if (!isValidEIP155V) {\n      throw new Error(\"Incompatible EIP155-based V \" + vInt + \" and chain id \" + this.getChainId() + \". See the second parameter of the Transaction constructor to set the chain id.\");\n    }\n  };\n  Transaction.prototype._isSigned = function () {\n    return this.v.length > 0 && this.r.length > 0 && this.s.length > 0;\n  };\n  Transaction.prototype._overrideVSetterWithValidation = function () {\n    var _this = this;\n    var vDescriptor = Object.getOwnPropertyDescriptor(this, 'v');\n    Object.defineProperty(this, 'v', __assign({}, vDescriptor, {\n      set: function (v) {\n        if (v !== undefined) {\n          _this._validateV(ethereumjs_util_1.toBuffer(v));\n        }\n        vDescriptor.set(v);\n      }\n    }));\n  };\n  Transaction.prototype._implementsEIP155 = function () {\n    var onEIP155BlockOrLater = this._common.gteHardfork('spuriousDragon');\n    if (!this._isSigned()) {\n      // We sign with EIP155 all unsigned transactions after spuriousDragon\n      return onEIP155BlockOrLater;\n    }\n    // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing\n    // the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six\n    // elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by\n    // CHAIN_ID, r = 0 and s = 0.\n    var v = ethereumjs_util_1.bufferToInt(this.v);\n    var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n  return Transaction;\n}();\nexports.default = Transaction;","map":{"version":3,"mappings":"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","names":["N_DIV_2","ethereumjs_util_1","data","opts","common","chain","hardfork","Error","_common","ethereumjs_common_1","fields","name","length","allowLess","default","buffer_1","alias","allowZero","Object","defineProperty","enumerable","configurable","get","getSenderAddress","bind","_validateV","v","_overrideVSetterWithValidation","Transaction","to","toString","includeSignature","items","raw","_implementsEIP155","slice","getChainId","chainId","_from","pubkey","getSenderPublicKey","verifySignature","_senderPubKey","msgHash","hash","gteHardfork","s","cmp","useChainIdWhileRecoveringPubKey","r","undefined","e","privateKey","sig","assign","cost","i","iaddn","param","fee","getDataFee","toCreationAddress","gasLimit","imul","gasPrice","iadd","value","stringError","errors","push","getBaseFee","join","encode","labels","vInt","isValidEIP155V","vDescriptor","getOwnPropertyDescriptor","set","_this","onEIP155BlockOrLater","_isSigned","vAndChainIdMeetEIP155Conditions"],"sourceRoot":"","sources":["../src/transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}