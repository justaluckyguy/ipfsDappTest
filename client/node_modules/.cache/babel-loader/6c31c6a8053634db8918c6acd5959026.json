{"ast":null,"code":"'use strict';\n\nconst isNode = require('detect-node');\nconst flatmap = require('flatmap');\nfunction loadPaths(opts, file) {\n  const path = require('path');\n  const fs = require('fs');\n  const glob = require('glob');\n  const followSymlinks = opts.followSymlinks != null ? opts.followSymlinks : true;\n  file = path.resolve(file);\n  const stats = fs.statSync(file);\n  if (stats.isDirectory() && !opts.recursive) {\n    throw new Error('Can only add directories using --recursive');\n  }\n  if (stats.isDirectory() && opts.recursive) {\n    // glob requires a POSIX filename\n    file = file.split(path.sep).join('/');\n    const fullDir = file + (file.endsWith('/') ? '' : '/');\n    let dirName = fullDir.split('/');\n    dirName = dirName[dirName.length - 2] + '/';\n    const mg = new glob.sync.GlobSync('**/*', {\n      cwd: file,\n      follow: followSymlinks,\n      dot: opts.hidden,\n      ignore: opts.ignore\n    });\n    return mg.found.map(name => {\n      const fqn = fullDir + name;\n      // symlinks\n      if (mg.symlinks[fqn] === true) {\n        return {\n          path: dirName + name,\n          symlink: true,\n          dir: false,\n          content: fs.readlinkSync(fqn)\n        };\n      }\n\n      // files\n      if (mg.cache[fqn] === 'FILE') {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: false,\n          content: fs.createReadStream(fqn)\n        };\n      }\n\n      // directories\n      if (mg.cache[fqn] === 'DIR' || mg.cache[fqn] instanceof Array) {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: true\n        };\n      }\n      // files inside symlinks and others\n    })\n    // filter out null files\n    .filter(Boolean);\n  }\n  return {\n    path: path.basename(file),\n    content: fs.createReadStream(file)\n  };\n}\nfunction prepareFile(file, opts) {\n  let files = [].concat(file);\n  return flatmap(files, file => {\n    if (typeof file === 'string') {\n      if (!isNode) {\n        throw new Error('Can only add file paths in node');\n      }\n      return loadPaths(opts, file);\n    }\n    if (file.path && !file.content) {\n      file.dir = true;\n      return file;\n    }\n    if (file.content || file.dir) {\n      return file;\n    }\n    return {\n      path: '',\n      symlink: false,\n      dir: false,\n      content: file\n    };\n  });\n}\nexports = module.exports = prepareFile;","map":{"version":3,"names":["isNode","require","flatmap","loadPaths","opts","file","path","fs","glob","followSymlinks","resolve","stats","statSync","isDirectory","recursive","Error","split","sep","join","fullDir","endsWith","dirName","length","mg","sync","GlobSync","cwd","follow","dot","hidden","ignore","found","map","name","fqn","symlinks","symlink","dir","content","readlinkSync","cache","createReadStream","Array","filter","Boolean","basename","prepareFile","files","concat","exports","module"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipfs-api/src/utils/prepare-file.js"],"sourcesContent":["'use strict'\n\nconst isNode = require('detect-node')\nconst flatmap = require('flatmap')\n\nfunction loadPaths (opts, file) {\n  const path = require('path')\n  const fs = require('fs')\n  const glob = require('glob')\n\n  const followSymlinks = opts.followSymlinks != null ? opts.followSymlinks : true\n\n  file = path.resolve(file)\n  const stats = fs.statSync(file)\n\n  if (stats.isDirectory() && !opts.recursive) {\n    throw new Error('Can only add directories using --recursive')\n  }\n\n  if (stats.isDirectory() && opts.recursive) {\n    // glob requires a POSIX filename\n    file = file.split(path.sep).join('/')\n    const fullDir = file + (file.endsWith('/') ? '' : '/')\n    let dirName = fullDir.split('/')\n    dirName = dirName[dirName.length - 2] + '/'\n    const mg = new glob.sync.GlobSync('**/*', {\n      cwd: file,\n      follow: followSymlinks,\n      dot: opts.hidden,\n      ignore: opts.ignore\n    })\n\n    return mg.found\n      .map((name) => {\n        const fqn = fullDir + name\n        // symlinks\n        if (mg.symlinks[fqn] === true) {\n          return {\n            path: dirName + name,\n            symlink: true,\n            dir: false,\n            content: fs.readlinkSync(fqn)\n          }\n        }\n\n        // files\n        if (mg.cache[fqn] === 'FILE') {\n          return {\n            path: dirName + name,\n            symlink: false,\n            dir: false,\n            content: fs.createReadStream(fqn)\n          }\n        }\n\n        // directories\n        if (mg.cache[fqn] === 'DIR' || mg.cache[fqn] instanceof Array) {\n          return {\n            path: dirName + name,\n            symlink: false,\n            dir: true\n          }\n        }\n        // files inside symlinks and others\n      })\n      // filter out null files\n      .filter(Boolean)\n  }\n\n  return {\n    path: path.basename(file),\n    content: fs.createReadStream(file)\n  }\n}\n\nfunction prepareFile (file, opts) {\n  let files = [].concat(file)\n\n  return flatmap(files, (file) => {\n    if (typeof file === 'string') {\n      if (!isNode) {\n        throw new Error('Can only add file paths in node')\n      }\n\n      return loadPaths(opts, file)\n    }\n\n    if (file.path && !file.content) {\n      file.dir = true\n      return file\n    }\n\n    if (file.content || file.dir) {\n      return file\n    }\n\n    return {\n      path: '',\n      symlink: false,\n      dir: false,\n      content: file\n    }\n  })\n}\n\nexports = module.exports = prepareFile\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}