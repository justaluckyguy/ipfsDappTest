{"ast":null,"code":"var _jsxFileName = \"/home/isaak/Workspace/ipfsDapp/client/src/App.jsx\";\nimport React, { Component } from 'react';\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport Web3 from \"web3\";\nimport { EthProvider } from \"./contexts/EthContext\";\nimport Intro from \"./components/Intro/\";\nimport Setup from \"./components/Setup\";\nimport Demo from \"./components/Demo\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Tx = require(\"ethereumjs-tx\").Transaction;\nconst rpcURL = \"http://localhost:7545\";\nconst web3 = new Web3(rpcURL);\nconst abi = SimpleStorageContract[\"abi\"];\nconst contractAddress = \"0x9D5B65B1449439EdF5aA15D0361B5F08f357111F\";\nconst contract = new web3.eth.Contract(abi, contractAddress);\nconst account = \"0x8203d59a52D665C8ad172e714607b0b0a95c7726\";\nconst pk = \"4601f314ef99d52d00a83dc904fafd31be44df322dede65fab9ce4a7e9e0cced\";\nconst privateKey = Buffer.from(pk, \"hex\");\nconst ipfsAPI = require(\"ipfs-api\");\nconst ipfs = ipfsAPI({\n  host: \"localhost\",\n  port: \"5001\",\n  protocol: \"http\"\n});\nlet saveDataToIPFS = reader => {\n  return new Promise(function (resolve, reject) {\n    const buffer = Buffer.from(reader.result);\n    ipfs.add(buffer).then(response => {\n      console.log(response);\n      resolve(response[0].hash);\n    }).catch(err => {\n      console.error(err);\n      reject(err);\n    });\n  });\n};\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blockChainHash: null,\n      web3: null,\n      address: null,\n      dataHash: null,\n      isSuccess: false\n    };\n  }\n  componentDidMount() {\n    ipfs.swarm.peers(function (err, res) {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(res);\n      }\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 10\n        },\n        children: \"smart contract address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: contractAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 10\n        },\n        children: \"upload data to IPFS: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"label_file\",\n          children: \"select data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          rel: \"file\",\n          id: \"file\",\n          name: \"file\",\n          mutiple: \"multiple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginTop: 10\n        },\n        onClick: () => {\n          let file = document.getElementById(\"file\").files[0];\n          let reader = new FileReader();\n          reader.readAsArrayBuffer(file);\n          reader.onloadend = function (e) {\n            console.log(reader);\n            saveDataToIPFS(reader).then(hash => {\n              console.log(hash);\n              this.setState({\n                dataHash: hash\n              });\n            });\n          }.bind(this);\n        },\n        children: \"begin to upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 10\n        },\n        children: [\"dataHash: \", this.state.dataHash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          // contract.methods.balanceOf(account).call((err, result) => { console.log(result) });\n          web3.eth.getTransactionCount(account, (err, txCount) => {\n            // build a write transaction\n            const txObject = {\n              nonce: web3.utils.toHex(txCount),\n              gasLimit: web3.utils.toHex(800000),\n              gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n              to: contractAddress,\n              data: contract.methods.write(this.state.dataHash).encodeABI()\n            };\n            const tx = new Tx(txObject);\n            tx.sign(privateKey);\n            const serializedTx = tx.serialize();\n            const raw = \"0x\" + serializedTx.toString(\"hex\");\n            web3.eth.sendSignedTransaction(raw, (err, txHash) => {\n              console.error(\"err: \", err);\n              console.log(\"txHash: \", txHash);\n            });\n          }).then(() => {\n            console.log(\"data hash was already write into the blockchain\");\n            this.setState({\n              isSuccess: true\n            });\n          });\n        },\n        children: \"write the data hash in the blockchain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n//\n// function App() {\n//   return (\n//     <EthProvider>\n//       <div id=\"App\" >\n//         <div className=\"container\">\n//           <Intro />\n//           <hr />\n//           <Setup />\n//           <hr />\n//           <Demo />\n//           <hr />\n//           <Footer />\n//         </div>\n//       </div>\n//     </EthProvider>\n//   );\n// }\n\nexport default App;","map":{"version":3,"names":["React","Component","SimpleStorageContract","Web3","EthProvider","Intro","Setup","Demo","Footer","Tx","require","Transaction","rpcURL","web3","abi","contractAddress","contract","eth","Contract","account","pk","privateKey","Buffer","from","ipfsAPI","ipfs","host","port","protocol","saveDataToIPFS","reader","Promise","resolve","reject","buffer","result","add","then","response","console","log","hash","catch","err","error","App","constructor","props","state","blockChainHash","address","dataHash","isSuccess","componentDidMount","swarm","peers","res","render","marginTop","file","document","getElementById","files","FileReader","readAsArrayBuffer","onloadend","e","setState","bind","getTransactionCount","txCount","txObject","nonce","utils","toHex","gasLimit","gasPrice","toWei","to","data","methods","write","encodeABI","tx","sign","serializedTx","serialize","raw","toString","sendSignedTransaction","txHash"],"sources":["/home/isaak/Workspace/ipfsDapp/client/src/App.jsx"],"sourcesContent":["import React, {Component} from 'react';\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport Web3 from \"web3\";\n\nimport { EthProvider } from \"./contexts/EthContext\";\nimport Intro from \"./components/Intro/\";\nimport Setup from \"./components/Setup\";\nimport Demo from \"./components/Demo\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\nvar Tx = require(\"ethereumjs-tx\").Transaction\n\nconst rpcURL = \"http://localhost:7545\";\nconst web3 = new Web3(rpcURL);\n\nconst abi = SimpleStorageContract[\"abi\"];\nconst contractAddress = \"0x9D5B65B1449439EdF5aA15D0361B5F08f357111F\";\nconst contract = new web3.eth.Contract(abi, contractAddress);\n\nconst account = \"0x8203d59a52D665C8ad172e714607b0b0a95c7726\";\nconst pk = \"4601f314ef99d52d00a83dc904fafd31be44df322dede65fab9ce4a7e9e0cced\";\nconst privateKey = Buffer.from(pk, \"hex\");\n\n\nconst ipfsAPI = require(\"ipfs-api\");\nconst ipfs = ipfsAPI({\n  host: \"localhost\",\n  port: \"5001\",\n  protocol: \"http\"\n});\n\nlet saveDataToIPFS = (reader) => {\n  return new Promise(function(resolve, reject) {\n    const buffer = Buffer.from(reader.result);\n    ipfs.add(buffer).then((response) => {\n      console.log(response);\n      resolve(response[0].hash);\n    }).catch((err) => {\n      console.error(err);\n      reject(err);\n    })\n  })\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blockChainHash: null,\n      web3: null,\n      address: null,\n      dataHash: null,\n      isSuccess: false\n    }\n  }\n\n  componentDidMount() {\n    ipfs.swarm.peers(function(err, res) {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(res);\n      }\n    });\n\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={{marginTop:10}}>smart contract address:</div>\n        <div>{contractAddress}</div>\n        <div style={{marginTop: 10}}>upload data to IPFS: </div>\n        <div>\n          <label id=\"label_file\">select data</label>\n          <input type=\"file\" rel=\"file\" id=\"file\" name=\"file\" mutiple=\"multiple\"/>\n        </div>\n        <button style={{marginTop: 10}} onClick={() => {\n          let file = document.getElementById(\"file\").files[0];\n          let reader = new FileReader();\n          reader.readAsArrayBuffer(file);\n          reader.onloadend = function(e) {\n            console.log(reader);\n            saveDataToIPFS(reader).then((hash) => {\n              console.log(hash);\n              this.setState({dataHash: hash});\n            });\n          }.bind(this);\n\n        }}>begin to upload</button>\n\n\n        <div style={{marginTop:10}}>dataHash: {this.state.dataHash}</div>\n        <button onClick={() => {\n          // contract.methods.balanceOf(account).call((err, result) => { console.log(result) });\n          web3.eth.getTransactionCount(account, (err, txCount) => {\n            // build a write transaction\n            const txObject = {\n              nonce: web3.utils.toHex(txCount),\n              gasLimit: web3.utils.toHex(800000),\n              gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n              to: contractAddress,\n              data: contract.methods.write(this.state.dataHash).encodeABI()\n            };\n            const tx = new Tx(txObject);\n            tx.sign(privateKey);\n\n            const serializedTx = tx.serialize();\n            const raw = \"0x\" + serializedTx.toString(\"hex\");\n\n            web3.eth.sendSignedTransaction(raw, (err, txHash) => {\n              console.error(\"err: \", err);\n              console.log(\"txHash: \", txHash);\n            })\n          }).then(() => {\n            console.log(\"data hash was already write into the blockchain\");\n            this.setState({isSuccess: true});\n          })\n\n        }}>write the data hash in the blockchain</button>\n\n      </div>\n    );\n  }\n\n}\n\n//\n// function App() {\n//   return (\n//     <EthProvider>\n//       <div id=\"App\" >\n//         <div className=\"container\">\n//           <Intro />\n//           <hr />\n//           <Setup />\n//           <hr />\n//           <Demo />\n//           <hr />\n//           <Footer />\n//         </div>\n//       </div>\n//     </EthProvider>\n//   );\n// }\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}