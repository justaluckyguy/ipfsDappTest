{"ast":null,"code":"/**\n * Javascript implementation of basic RSA algorithms.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n *\n * The only algorithm currently supported for PKI is RSA.\n *\n * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo\n * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier\n * and a subjectPublicKey of type bit string.\n *\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\n * for the algorithm, if any. In the case of RSA, there aren't any.\n *\n * SubjectPublicKeyInfo ::= SEQUENCE {\n *   algorithm AlgorithmIdentifier,\n *   subjectPublicKey BIT STRING\n * }\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *   algorithm OBJECT IDENTIFIER,\n *   parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * For an RSA public key, the subjectPublicKey is:\n *\n * RSAPublicKey ::= SEQUENCE {\n *   modulus            INTEGER,    -- n\n *   publicExponent     INTEGER     -- e\n * }\n *\n * PrivateKeyInfo ::= SEQUENCE {\n *   version                   Version,\n *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,\n *   privateKey                PrivateKey,\n *   attributes           [0]  IMPLICIT Attributes OPTIONAL\n * }\n *\n * Version ::= INTEGER\n * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier\n * PrivateKey ::= OCTET STRING\n * Attributes ::= SET OF Attribute\n *\n * An RSA private key as the following structure:\n *\n * RSAPrivateKey ::= SEQUENCE {\n *   version Version,\n *   modulus INTEGER, -- n\n *   publicExponent INTEGER, -- e\n *   privateExponent INTEGER, -- d\n *   prime1 INTEGER, -- p\n *   prime2 INTEGER, -- q\n *   exponent1 INTEGER, -- d mod (p-1)\n *   exponent2 INTEGER, -- d mod (q-1)\n *   coefficient INTEGER -- (inverse of q) mod p\n * }\n *\n * Version ::= INTEGER\n *\n * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./jsbn');\nrequire('./oids');\nrequire('./pkcs1');\nrequire('./prime');\nrequire('./random');\nrequire('./util');\nif (typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/*\n * RSA encryption and decryption, see RFC 2313.\n */\nforge.pki = forge.pki || {};\nmodule.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};\nvar pki = forge.pki;\n\n// for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29\nvar GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\n\n// validator for a PrivateKeyInfo structure\nvar privateKeyValidator = {\n  // PrivateKeyInfo\n  name: 'PrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // Version (INTEGER)\n    name: 'PrivateKeyInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyVersion'\n  }, {\n    // privateKeyAlgorithm\n    name: 'PrivateKeyInfo.privateKeyAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'privateKeyOid'\n    }]\n  }, {\n    // PrivateKey\n    name: 'PrivateKeyInfo',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'privateKey'\n  }]\n};\n\n// validator for an RSA private key\nvar rsaPrivateKeyValidator = {\n  // RSAPrivateKey\n  name: 'RSAPrivateKey',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // Version (INTEGER)\n    name: 'RSAPrivateKey.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyVersion'\n  }, {\n    // modulus (n)\n    name: 'RSAPrivateKey.modulus',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyModulus'\n  }, {\n    // publicExponent (e)\n    name: 'RSAPrivateKey.publicExponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPublicExponent'\n  }, {\n    // privateExponent (d)\n    name: 'RSAPrivateKey.privateExponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrivateExponent'\n  }, {\n    // prime1 (p)\n    name: 'RSAPrivateKey.prime1',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrime1'\n  }, {\n    // prime2 (q)\n    name: 'RSAPrivateKey.prime2',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrime2'\n  }, {\n    // exponent1 (d mod (p-1))\n    name: 'RSAPrivateKey.exponent1',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyExponent1'\n  }, {\n    // exponent2 (d mod (q-1))\n    name: 'RSAPrivateKey.exponent2',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyExponent2'\n  }, {\n    // coefficient ((inverse of q) mod p)\n    name: 'RSAPrivateKey.coefficient',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyCoefficient'\n  }]\n};\n\n// validator for an RSA public key\nvar rsaPublicKeyValidator = {\n  // RSAPublicKey\n  name: 'RSAPublicKey',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // modulus (n)\n    name: 'RSAPublicKey.modulus',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'publicKeyModulus'\n  }, {\n    // publicExponent (e)\n    name: 'RSAPublicKey.exponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'publicKeyExponent'\n  }]\n};\n\n// validator for an SubjectPublicKeyInfo structure\n// Note: Currently only works with an RSA public key\nvar publicKeyValidator = forge.pki.rsa.publicKeyValidator = {\n  name: 'SubjectPublicKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  captureAsn1: 'subjectPublicKeyInfo',\n  value: [{\n    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'publicKeyOid'\n    }]\n  }, {\n    // subjectPublicKey\n    name: 'SubjectPublicKeyInfo.subjectPublicKey',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.BITSTRING,\n    constructed: false,\n    value: [{\n      // RSAPublicKey\n      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      optional: true,\n      captureAsn1: 'rsaPublicKey'\n    }]\n  }]\n};\n\n/**\n * Wrap digest in DigestInfo object.\n *\n * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.\n *\n * DigestInfo ::= SEQUENCE {\n *   digestAlgorithm DigestAlgorithmIdentifier,\n *   digest Digest\n * }\n *\n * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n * Digest ::= OCTET STRING\n *\n * @param md the message digest object with the hash to sign.\n *\n * @return the encoded message (ready for RSA encrytion)\n */\nvar emsaPkcs1v15encode = function (md) {\n  // get the oid for the algorithm\n  var oid;\n  if (md.algorithm in pki.oids) {\n    oid = pki.oids[md.algorithm];\n  } else {\n    var error = new Error('Unknown message digest algorithm.');\n    error.algorithm = md.algorithm;\n    throw error;\n  }\n  var oidBytes = asn1.oidToDer(oid).getBytes();\n\n  // create the digest info\n  var digestInfo = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n  var digestAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n  digestAlgorithm.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));\n  digestAlgorithm.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, ''));\n  var digest = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, md.digest().getBytes());\n  digestInfo.value.push(digestAlgorithm);\n  digestInfo.value.push(digest);\n\n  // encode digest info\n  return asn1.toDer(digestInfo).getBytes();\n};\n\n/**\n * Performs x^c mod n (RSA encryption or decryption operation).\n *\n * @param x the number to raise and mod.\n * @param key the key to use.\n * @param pub true if the key is public, false if private.\n *\n * @return the result of x^c mod n.\n */\nvar _modPow = function (x, key, pub) {\n  if (pub) {\n    return x.modPow(key.e, key.n);\n  }\n  if (!key.p || !key.q) {\n    // allow calculation without CRT params (slow)\n    return x.modPow(key.d, key.n);\n  }\n\n  // pre-compute dP, dQ, and qInv if necessary\n  if (!key.dP) {\n    key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));\n  }\n  if (!key.dQ) {\n    key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));\n  }\n  if (!key.qInv) {\n    key.qInv = key.q.modInverse(key.p);\n  }\n\n  /* Chinese remainder theorem (CRT) states:\n     Suppose n1, n2, ..., nk are positive integers which are pairwise\n    coprime (n1 and n2 have no common factors other than 1). For any\n    integers x1, x2, ..., xk there exists an integer x solving the\n    system of simultaneous congruences (where ~= means modularly\n    congruent so a ~= b mod n means a mod n = b mod n):\n     x ~= x1 mod n1\n    x ~= x2 mod n2\n    ...\n    x ~= xk mod nk\n     This system of congruences has a single simultaneous solution x\n    between 0 and n - 1. Furthermore, each xk solution and x itself\n    is congruent modulo the product n = n1*n2*...*nk.\n    So x1 mod n = x2 mod n = xk mod n = x mod n.\n     The single simultaneous solution x can be solved with the following\n    equation:\n     x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.\n     Where x is less than n, xi = x mod ni.\n     For RSA we are only concerned with k = 2. The modulus n = pq, where\n    p and q are coprime. The RSA decryption algorithm is:\n     y = x^d mod n\n     Given the above:\n     x1 = x^d mod p\n    r1 = n/p = q\n    s1 = q^-1 mod p\n    x2 = x^d mod q\n    r2 = n/q = p\n    s2 = p^-1 mod q\n     So y = (x1r1s1 + x2r2s2) mod n\n         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n\n     According to Fermat's Little Theorem, if the modulus P is prime,\n    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.\n    Since A is not divisible by P it follows that if:\n    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:\n     A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort\n    to calculate). In order to calculate x^d mod p more quickly the\n    exponent d mod (p - 1) is stored in the RSA private key (the same\n    is done for x^d mod q). These values are referred to as dP and dQ\n    respectively. Therefore we now have:\n     y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n\n     Since we'll be reducing x^dP by modulo p (same for q) we can also\n    reduce x by p (and q respectively) before hand. Therefore, let\n     xp = ((x mod p)^dP mod p), and\n    xq = ((x mod q)^dQ mod q), yielding:\n     y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n\n     This can be further reduced to a simple algorithm that only\n    requires 1 inverse (the q inverse is used) to be used and stored.\n    The algorithm is called Garner's algorithm. If qInv is the\n    inverse of q, we simply calculate:\n     y = (qInv*(xp - xq) mod p) * q + xq\n     However, there are two further complications. First, we need to\n    ensure that xp > xq to prevent signed BigIntegers from being used\n    so we add p until this is true (since we will be mod'ing with\n    p anyway). Then, there is a known timing attack on algorithms\n    using the CRT. To mitigate this risk, \"cryptographic blinding\"\n    should be used. This requires simply generating a random number r\n    between 0 and n-1 and its inverse and multiplying x by r^e before\n    calculating y and then multiplying y by r^-1 afterwards. Note that\n    r must be coprime with n (gcd(r, n) === 1) in order to have an\n    inverse.\n  */\n\n  // cryptographic blinding\n  var r;\n  do {\n    r = new BigInteger(forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)), 16);\n  } while (r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));\n  x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);\n\n  // calculate xp and xq\n  var xp = x.mod(key.p).modPow(key.dP, key.p);\n  var xq = x.mod(key.q).modPow(key.dQ, key.q);\n\n  // xp must be larger than xq to avoid signed bit usage\n  while (xp.compareTo(xq) < 0) {\n    xp = xp.add(key.p);\n  }\n\n  // do last step\n  var y = xp.subtract(xq).multiply(key.qInv).mod(key.p).multiply(key.q).add(xq);\n\n  // remove effect of random for cryptographic blinding\n  y = y.multiply(r.modInverse(key.n)).mod(key.n);\n  return y;\n};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or\n * 'encrypt' on a public key object instead.\n *\n * Performs RSA encryption.\n *\n * The parameter bt controls whether to put padding bytes before the\n * message passed in. Set bt to either true or false to disable padding\n * completely (in order to handle e.g. EMSA-PSS encoding seperately before),\n * signaling whether the encryption operation is a public key operation\n * (i.e. encrypting data) or not, i.e. private key operation (data signing).\n *\n * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01\n * (for signing) or 0x02 (for encryption). The key operation mode (private\n * or public) is derived from this flag in that case).\n *\n * @param m the message to encrypt as a byte string.\n * @param key the RSA key to use.\n * @param bt for PKCS#1 v1.5 padding, the block type to use\n *   (0x01 for private key, 0x02 for public),\n *   to disable padding: true = public key, false = private key.\n *\n * @return the encrypted bytes as a string.\n */\npki.rsa.encrypt = function (m, key, bt) {\n  var pub = bt;\n  var eb;\n\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n  if (bt !== false && bt !== true) {\n    // legacy, default to PKCS#1 v1.5 padding\n    pub = bt === 0x02;\n    eb = _encodePkcs1_v1_5(m, key, bt);\n  } else {\n    eb = forge.util.createBuffer();\n    eb.putBytes(m);\n  }\n\n  // load encryption block as big integer 'x'\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var x = new BigInteger(eb.toHex(), 16);\n\n  // do RSA encryption\n  var y = _modPow(x, key, pub);\n\n  // convert y into the encrypted data byte string, if y is shorter in\n  // bytes than k, then prepend zero bytes to fill up ed\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var yhex = y.toString(16);\n  var ed = forge.util.createBuffer();\n  var zeros = k - Math.ceil(yhex.length / 2);\n  while (zeros > 0) {\n    ed.putByte(0x00);\n    --zeros;\n  }\n  ed.putBytes(forge.util.hexToBytes(yhex));\n  return ed.getBytes();\n};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or\n * 'verify' on a public key object instead.\n *\n * Performs RSA decryption.\n *\n * The parameter ml controls whether to apply PKCS#1 v1.5 padding\n * or not.  Set ml = false to disable padding removal completely\n * (in order to handle e.g. EMSA-PSS later on) and simply pass back\n * the RSA encryption block.\n *\n * @param ed the encrypted data to decrypt in as a byte string.\n * @param key the RSA key to use.\n * @param pub true for a public key operation, false for private.\n * @param ml the message length, if known, false to disable padding.\n *\n * @return the decrypted message as a byte string.\n */\npki.rsa.decrypt = function (ed, key, pub, ml) {\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  // error if the length of the encrypted data ED is not k\n  if (ed.length !== k) {\n    var error = new Error('Encrypted message length is invalid.');\n    error.length = ed.length;\n    error.expected = k;\n    throw error;\n  }\n\n  // convert encrypted data into a big integer\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);\n\n  // y must be less than the modulus or it wasn't the result of\n  // a previous mod operation (encryption) using that modulus\n  if (y.compareTo(key.n) >= 0) {\n    throw new Error('Encrypted message is invalid.');\n  }\n\n  // do RSA decryption\n  var x = _modPow(y, key, pub);\n\n  // create the encryption block, if x is shorter in bytes than k, then\n  // prepend zero bytes to fill up eb\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var xhex = x.toString(16);\n  var eb = forge.util.createBuffer();\n  var zeros = k - Math.ceil(xhex.length / 2);\n  while (zeros > 0) {\n    eb.putByte(0x00);\n    --zeros;\n  }\n  eb.putBytes(forge.util.hexToBytes(xhex));\n  if (ml !== false) {\n    // legacy, default to PKCS#1 v1.5 padding\n    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);\n  }\n\n  // return message\n  return eb.getBytes();\n};\n\n/**\n * Creates an RSA key-pair generation state object. It is used to allow\n * key-generation to be performed in steps. It also allows for a UI to\n * display progress updates.\n *\n * @param bits the size for the private key in bits, defaults to 2048.\n * @param e the public exponent to use, defaults to 65537 (0x10001).\n * @param [options] the options to use.\n *          prng a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n *          algorithm the algorithm to use (default: 'PRIMEINC').\n *\n * @return the state object to use to generate the key-pair.\n */\npki.rsa.createKeyPairGenerationState = function (bits, e, options) {\n  // TODO: migrate step-based prime generation code to forge.prime\n\n  // set default bits\n  if (typeof bits === 'string') {\n    bits = parseInt(bits, 10);\n  }\n  bits = bits || 2048;\n\n  // create prng with api that matches BigInteger secure random\n  options = options || {};\n  var prng = options.prng || forge.random;\n  var rng = {\n    // x is an array to fill with bytes\n    nextBytes: function (x) {\n      var b = prng.getBytesSync(x.length);\n      for (var i = 0; i < x.length; ++i) {\n        x[i] = b.charCodeAt(i);\n      }\n    }\n  };\n  var algorithm = options.algorithm || 'PRIMEINC';\n\n  // create PRIMEINC algorithm state\n  var rval;\n  if (algorithm === 'PRIMEINC') {\n    rval = {\n      algorithm: algorithm,\n      state: 0,\n      bits: bits,\n      rng: rng,\n      eInt: e || 65537,\n      e: new BigInteger(null),\n      p: null,\n      q: null,\n      qBits: bits >> 1,\n      pBits: bits - (bits >> 1),\n      pqState: 0,\n      num: null,\n      keys: null\n    };\n    rval.e.fromInt(rval.eInt);\n  } else {\n    throw new Error('Invalid key generation algorithm: ' + algorithm);\n  }\n  return rval;\n};\n\n/**\n * Attempts to runs the key-generation algorithm for at most n seconds\n * (approximately) using the given state. When key-generation has completed,\n * the keys will be stored in state.keys.\n *\n * To use this function to update a UI while generating a key or to prevent\n * causing browser lockups/warnings, set \"n\" to a value other than 0. A\n * simple pattern for generating a key and showing a progress indicator is:\n *\n * var state = pki.rsa.createKeyPairGenerationState(2048);\n * var step = function() {\n *   // step key-generation, run algorithm for 100 ms, repeat\n *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {\n *     setTimeout(step, 1);\n *   } else {\n *     // key-generation complete\n *     // TODO: turn off progress indicator here\n *     // TODO: use the generated key-pair in \"state.keys\"\n *   }\n * };\n * // TODO: turn on progress indicator here\n * setTimeout(step, 0);\n *\n * @param state the state to use.\n * @param n the maximum number of milliseconds to run the algorithm for, 0\n *          to run the algorithm to completion.\n *\n * @return true if the key-generation completed, false if not.\n */\npki.rsa.stepKeyPairGenerationState = function (state, n) {\n  // set default algorithm if not set\n  if (!('algorithm' in state)) {\n    state.algorithm = 'PRIMEINC';\n  }\n\n  // TODO: migrate step-based prime generation code to forge.prime\n  // TODO: abstract as PRIMEINC algorithm\n\n  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)\n  // with some minor optimizations and designed to run in steps\n\n  // local state vars\n  var THIRTY = new BigInteger(null);\n  THIRTY.fromInt(30);\n  var deltaIdx = 0;\n  var op_or = function (x, y) {\n    return x | y;\n  };\n\n  // keep stepping until time limit is reached or done\n  var t1 = +new Date();\n  var t2;\n  var total = 0;\n  while (state.keys === null && (n <= 0 || total < n)) {\n    // generate p or q\n    if (state.state === 0) {\n      /* Note: All primes are of the form:\n         30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i\n         When we generate a random number, we always align it at 30k + 1. Each\n        time the number is determined not to be prime we add to get to the\n        next 'i', eg: if the number was at 30k + 1 we add 6. */\n      var bits = state.p === null ? state.pBits : state.qBits;\n      var bits1 = bits - 1;\n\n      // get a random number\n      if (state.pqState === 0) {\n        state.num = new BigInteger(bits, state.rng);\n        // force MSB set\n        if (!state.num.testBit(bits1)) {\n          state.num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, state.num);\n        }\n        // align number on 30k+1 boundary\n        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);\n        deltaIdx = 0;\n        ++state.pqState;\n      } else if (state.pqState === 1) {\n        // try to make the number a prime\n        if (state.num.bitLength() > bits) {\n          // overflow, try again\n          state.pqState = 0;\n          // do primality test\n        } else if (state.num.isProbablePrime(_getMillerRabinTests(state.num.bitLength()))) {\n          ++state.pqState;\n        } else {\n          // get next potential prime\n          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n        }\n      } else if (state.pqState === 2) {\n        // ensure number is coprime with e\n        state.pqState = state.num.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) === 0 ? 3 : 0;\n      } else if (state.pqState === 3) {\n        // store p or q\n        state.pqState = 0;\n        if (state.p === null) {\n          state.p = state.num;\n        } else {\n          state.q = state.num;\n        }\n\n        // advance state if both p and q are ready\n        if (state.p !== null && state.q !== null) {\n          ++state.state;\n        }\n        state.num = null;\n      }\n    } else if (state.state === 1) {\n      // ensure p is larger than q (swap them if not)\n      if (state.p.compareTo(state.q) < 0) {\n        state.num = state.p;\n        state.p = state.q;\n        state.q = state.num;\n      }\n      ++state.state;\n    } else if (state.state === 2) {\n      // compute phi: (p - 1)(q - 1) (Euler's totient function)\n      state.p1 = state.p.subtract(BigInteger.ONE);\n      state.q1 = state.q.subtract(BigInteger.ONE);\n      state.phi = state.p1.multiply(state.q1);\n      ++state.state;\n    } else if (state.state === 3) {\n      // ensure e and phi are coprime\n      if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {\n        // phi and e are coprime, advance\n        ++state.state;\n      } else {\n        // phi and e aren't coprime, so generate a new p and q\n        state.p = null;\n        state.q = null;\n        state.state = 0;\n      }\n    } else if (state.state === 4) {\n      // create n, ensure n is has the right number of bits\n      state.n = state.p.multiply(state.q);\n\n      // ensure n is right number of bits\n      if (state.n.bitLength() === state.bits) {\n        // success, advance\n        ++state.state;\n      } else {\n        // failed, get new q\n        state.q = null;\n        state.state = 0;\n      }\n    } else if (state.state === 5) {\n      // set keys\n      var d = state.e.modInverse(state.phi);\n      state.keys = {\n        privateKey: pki.rsa.setPrivateKey(state.n, state.e, d, state.p, state.q, d.mod(state.p1), d.mod(state.q1), state.q.modInverse(state.p)),\n        publicKey: pki.rsa.setPublicKey(state.n, state.e)\n      };\n    }\n\n    // update timing\n    t2 = +new Date();\n    total += t2 - t1;\n    t1 = t2;\n  }\n  return state.keys !== null;\n};\n\n/**\n * Generates an RSA public-private key pair in a single call.\n *\n * To generate a key-pair in steps (to allow for progress updates and to\n * prevent blocking or warnings in slow browsers) then use the key-pair\n * generation state functions.\n *\n * To generate a key-pair asynchronously (either through web-workers, if\n * available, or by breaking up the work on the main thread), pass a\n * callback function.\n *\n * @param [bits] the size for the private key in bits, defaults to 2048.\n * @param [e] the public exponent to use, defaults to 65537.\n * @param [options] options for key-pair generation, if given then 'bits'\n *          and 'e' must *not* be given:\n *          bits the size for the private key in bits, (default: 2048).\n *          e the public exponent to use, (default: 65537 (0x10001)).\n *          workerScript the worker script URL.\n *          workers the number of web workers (if supported) to use,\n *            (default: 2).\n *          workLoad the size of the work load, ie: number of possible prime\n *            numbers for each web worker to check per work assignment,\n *            (default: 100).\n *          prng a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n *          algorithm the algorithm to use (default: 'PRIMEINC').\n * @param [callback(err, keypair)] called once the operation completes.\n *\n * @return an object with privateKey and publicKey properties.\n */\npki.rsa.generateKeyPair = function (bits, e, options, callback) {\n  // (bits), (options), (callback)\n  if (arguments.length === 1) {\n    if (typeof bits === 'object') {\n      options = bits;\n      bits = undefined;\n    } else if (typeof bits === 'function') {\n      callback = bits;\n      bits = undefined;\n    }\n  } else if (arguments.length === 2) {\n    // (bits, e), (bits, options), (bits, callback), (options, callback)\n    if (typeof bits === 'number') {\n      if (typeof e === 'function') {\n        callback = e;\n        e = undefined;\n      } else if (typeof e !== 'number') {\n        options = e;\n        e = undefined;\n      }\n    } else {\n      options = bits;\n      callback = e;\n      bits = undefined;\n      e = undefined;\n    }\n  } else if (arguments.length === 3) {\n    // (bits, e, options), (bits, e, callback), (bits, options, callback)\n    if (typeof e === 'number') {\n      if (typeof options === 'function') {\n        callback = options;\n        options = undefined;\n      }\n    } else {\n      callback = options;\n      options = e;\n      e = undefined;\n    }\n  }\n  options = options || {};\n  if (bits === undefined) {\n    bits = options.bits || 2048;\n  }\n  if (e === undefined) {\n    e = options.e || 0x10001;\n  }\n\n  // if native code is permitted and a callback is given, use native\n  // key generation code if available and if parameters are acceptable\n  if (!forge.options.usePureJavaScript && callback && bits >= 256 && bits <= 16384 && (e === 0x10001 || e === 3)) {\n    if (_detectSubtleCrypto('generateKey') && _detectSubtleCrypto('exportKey')) {\n      // use standard native generateKey\n      return window.crypto.subtle.generateKey({\n        name: 'RSASSA-PKCS1-v1_5',\n        modulusLength: bits,\n        publicExponent: _intToUint8Array(e),\n        hash: {\n          name: 'SHA-256'\n        }\n      }, true /* key can be exported*/, ['sign', 'verify']).then(function (pair) {\n        return window.crypto.subtle.exportKey('pkcs8', pair.privateKey);\n        // avoiding catch(function(err) {...}) to support IE <= 8\n      }).then(undefined, function (err) {\n        callback(err);\n      }).then(function (pkcs8) {\n        if (pkcs8) {\n          var privateKey = pki.privateKeyFromAsn1(asn1.fromDer(forge.util.createBuffer(pkcs8)));\n          callback(null, {\n            privateKey: privateKey,\n            publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)\n          });\n        }\n      });\n    }\n    if (_detectSubtleMsCrypto('generateKey') && _detectSubtleMsCrypto('exportKey')) {\n      var genOp = window.msCrypto.subtle.generateKey({\n        name: 'RSASSA-PKCS1-v1_5',\n        modulusLength: bits,\n        publicExponent: _intToUint8Array(e),\n        hash: {\n          name: 'SHA-256'\n        }\n      }, true /* key can be exported*/, ['sign', 'verify']);\n      genOp.oncomplete = function (e) {\n        var pair = e.target.result;\n        var exportOp = window.msCrypto.subtle.exportKey('pkcs8', pair.privateKey);\n        exportOp.oncomplete = function (e) {\n          var pkcs8 = e.target.result;\n          var privateKey = pki.privateKeyFromAsn1(asn1.fromDer(forge.util.createBuffer(pkcs8)));\n          callback(null, {\n            privateKey: privateKey,\n            publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)\n          });\n        };\n        exportOp.onerror = function (err) {\n          callback(err);\n        };\n      };\n      genOp.onerror = function (err) {\n        callback(err);\n      };\n      return;\n    }\n  }\n\n  // use JavaScript implementation\n  var state = pki.rsa.createKeyPairGenerationState(bits, e, options);\n  if (!callback) {\n    pki.rsa.stepKeyPairGenerationState(state, 0);\n    return state.keys;\n  }\n  _generateKeyPair(state, options, callback);\n};\n\n/**\n * Sets an RSA public key from BigIntegers modulus and exponent.\n *\n * @param n the modulus.\n * @param e the exponent.\n *\n * @return the public key.\n */\npki.setRsaPublicKey = pki.rsa.setPublicKey = function (n, e) {\n  var key = {\n    n: n,\n    e: e\n  };\n\n  /**\n   * Encrypts the given data with this public key. Newer applications\n   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for\n   * legacy applications.\n   *\n   * @param data the byte string to encrypt.\n   * @param scheme the encryption scheme to use:\n   *          'RSAES-PKCS1-V1_5' (default),\n   *          'RSA-OAEP',\n   *          'RAW', 'NONE', or null to perform raw RSA encryption,\n   *          an object with an 'encode' property set to a function\n   *          with the signature 'function(data, key)' that returns\n   *          a binary-encoded string representing the encoded data.\n   * @param schemeOptions any scheme-specific options.\n   *\n   * @return the encrypted byte string.\n   */\n  key.encrypt = function (data, scheme, schemeOptions) {\n    if (typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if (scheme === undefined) {\n      scheme = 'RSAES-PKCS1-V1_5';\n    }\n    if (scheme === 'RSAES-PKCS1-V1_5') {\n      scheme = {\n        encode: function (m, key, pub) {\n          return _encodePkcs1_v1_5(m, key, 0x02).getBytes();\n        }\n      };\n    } else if (scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {\n      scheme = {\n        encode: function (m, key) {\n          return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);\n        }\n      };\n    } else if (['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {\n      scheme = {\n        encode: function (e) {\n          return e;\n        }\n      };\n    } else if (typeof scheme === 'string') {\n      throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n    }\n\n    // do scheme-based encoding then rsa encryption\n    var e = scheme.encode(data, key, true);\n    return pki.rsa.encrypt(e, key, true);\n  };\n\n  /**\n   * Verifies the given signature against the given digest.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the\n   * signature is an OCTET STRING that holds a DigestInfo.\n   *\n   * DigestInfo ::= SEQUENCE {\n   *   digestAlgorithm DigestAlgorithmIdentifier,\n   *   digest Digest\n   * }\n   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n   * Digest ::= OCTET STRING\n   *\n   * To perform PSS signature verification, provide an instance\n   * of Forge PSS object as the scheme parameter.\n   *\n   * @param digest the message digest hash to compare against the signature,\n   *          as a binary-encoded string.\n   * @param signature the signature to verify, as a binary-encoded string.\n   * @param scheme signature verification scheme to use:\n   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n   *          a Forge PSS object for RSASSA-PSS,\n   *          'NONE' or null for none, DigestInfo will not be expected, but\n   *            PKCS#1 v1.5 padding will still be used.\n   *\n   * @return true if the signature was verified, false if not.\n   */\n  key.verify = function (digest, signature, scheme) {\n    if (typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if (scheme === undefined) {\n      scheme = 'RSASSA-PKCS1-V1_5';\n    }\n    if (scheme === 'RSASSA-PKCS1-V1_5') {\n      scheme = {\n        verify: function (digest, d) {\n          // remove padding\n          d = _decodePkcs1_v1_5(d, key, true);\n          // d is ASN.1 BER-encoded DigestInfo\n          var obj = asn1.fromDer(d);\n          // compare the given digest to the decrypted one\n          return digest === obj.value[1].value;\n        }\n      };\n    } else if (scheme === 'NONE' || scheme === 'NULL' || scheme === null) {\n      scheme = {\n        verify: function (digest, d) {\n          // remove padding\n          d = _decodePkcs1_v1_5(d, key, true);\n          return digest === d;\n        }\n      };\n    }\n\n    // do rsa decryption w/o any decoding, then verify -- which does decoding\n    var d = pki.rsa.decrypt(signature, key, true, false);\n    return scheme.verify(digest, d, key.n.bitLength());\n  };\n  return key;\n};\n\n/**\n * Sets an RSA private key from BigIntegers modulus, exponent, primes,\n * prime exponents, and modular multiplicative inverse.\n *\n * @param n the modulus.\n * @param e the public exponent.\n * @param d the private exponent ((inverse of e) mod n).\n * @param p the first prime.\n * @param q the second prime.\n * @param dP exponent1 (d mod (p-1)).\n * @param dQ exponent2 (d mod (q-1)).\n * @param qInv ((inverse of q) mod p)\n *\n * @return the private key.\n */\npki.setRsaPrivateKey = pki.rsa.setPrivateKey = function (n, e, d, p, q, dP, dQ, qInv) {\n  var key = {\n    n: n,\n    e: e,\n    d: d,\n    p: p,\n    q: q,\n    dP: dP,\n    dQ: dQ,\n    qInv: qInv\n  };\n\n  /**\n   * Decrypts the given data with this private key. The decryption scheme\n   * must match the one used to encrypt the data.\n   *\n   * @param data the byte string to decrypt.\n   * @param scheme the decryption scheme to use:\n   *          'RSAES-PKCS1-V1_5' (default),\n   *          'RSA-OAEP',\n   *          'RAW', 'NONE', or null to perform raw RSA decryption.\n   * @param schemeOptions any scheme-specific options.\n   *\n   * @return the decrypted byte string.\n   */\n  key.decrypt = function (data, scheme, schemeOptions) {\n    if (typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if (scheme === undefined) {\n      scheme = 'RSAES-PKCS1-V1_5';\n    }\n\n    // do rsa decryption w/o any decoding\n    var d = pki.rsa.decrypt(data, key, false, false);\n    if (scheme === 'RSAES-PKCS1-V1_5') {\n      scheme = {\n        decode: _decodePkcs1_v1_5\n      };\n    } else if (scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {\n      scheme = {\n        decode: function (d, key) {\n          return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);\n        }\n      };\n    } else if (['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {\n      scheme = {\n        decode: function (d) {\n          return d;\n        }\n      };\n    } else {\n      throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n    }\n\n    // decode according to scheme\n    return scheme.decode(d, key, false);\n  };\n\n  /**\n   * Signs the given digest, producing a signature.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide\n   * an instance of Forge PSS object as the scheme parameter.\n   *\n   * @param md the message digest object with the hash to sign.\n   * @param scheme the signature scheme to use:\n   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n   *          a Forge PSS object for RSASSA-PSS,\n   *          'NONE' or null for none, DigestInfo will not be used but\n   *            PKCS#1 v1.5 padding will still be used.\n   *\n   * @return the signature as a byte string.\n   */\n  key.sign = function (md, scheme) {\n    /* Note: The internal implementation of RSA operations is being\n      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy\n      code like the use of an encoding block identifier 'bt' will eventually\n      be removed. */\n\n    // private key operation\n    var bt = false;\n    if (typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    }\n    if (scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {\n      scheme = {\n        encode: emsaPkcs1v15encode\n      };\n      bt = 0x01;\n    } else if (scheme === 'NONE' || scheme === 'NULL' || scheme === null) {\n      scheme = {\n        encode: function () {\n          return md;\n        }\n      };\n      bt = 0x01;\n    }\n\n    // encode and then encrypt\n    var d = scheme.encode(md, key.n.bitLength());\n    return pki.rsa.encrypt(d, key, bt);\n  };\n  return key;\n};\n\n/**\n * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.\n *\n * @param rsaKey the ASN.1 RSAPrivateKey.\n *\n * @return the ASN.1 PrivateKeyInfo.\n */\npki.wrapRsaPrivateKey = function (rsaKey) {\n  // PrivateKeyInfo\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n  // version (0)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(0).getBytes()),\n  // privateKeyAlgorithm\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.rsaEncryption).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]),\n  // PrivateKey\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(rsaKey).getBytes())]);\n};\n\n/**\n * Converts a private key from an ASN.1 object.\n *\n * @param obj the ASN.1 representation of a PrivateKeyInfo containing an\n *          RSAPrivateKey or an RSAPrivateKey.\n *\n * @return the private key.\n */\npki.privateKeyFromAsn1 = function (obj) {\n  // get PrivateKeyInfo\n  var capture = {};\n  var errors = [];\n  if (asn1.validate(obj, privateKeyValidator, capture, errors)) {\n    obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));\n  }\n\n  // get RSAPrivateKey\n  capture = {};\n  errors = [];\n  if (!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read private key. ' + 'ASN.1 object does not contain an RSAPrivateKey.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // Note: Version is currently ignored.\n  // capture.privateKeyVersion\n  // FIXME: inefficient, get a BigInteger that uses byte strings\n  var n, e, d, p, q, dP, dQ, qInv;\n  n = forge.util.createBuffer(capture.privateKeyModulus).toHex();\n  e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();\n  d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();\n  p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();\n  q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();\n  dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();\n  dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();\n  qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();\n\n  // set private key\n  return pki.setRsaPrivateKey(new BigInteger(n, 16), new BigInteger(e, 16), new BigInteger(d, 16), new BigInteger(p, 16), new BigInteger(q, 16), new BigInteger(dP, 16), new BigInteger(dQ, 16), new BigInteger(qInv, 16));\n};\n\n/**\n * Converts a private key to an ASN.1 RSAPrivateKey.\n *\n * @param key the private key.\n *\n * @return the ASN.1 representation of an RSAPrivateKey.\n */\npki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function (key) {\n  // RSAPrivateKey\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n  // version (0 = only 2 primes, 1 multiple primes)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(0).getBytes()),\n  // modulus (n)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.n)),\n  // publicExponent (e)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.e)),\n  // privateExponent (d)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.d)),\n  // privateKeyPrime1 (p)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.p)),\n  // privateKeyPrime2 (q)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.q)),\n  // privateKeyExponent1 (dP)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.dP)),\n  // privateKeyExponent2 (dQ)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.dQ)),\n  // coefficient (qInv)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.qInv))]);\n};\n\n/**\n * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.\n *\n * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.\n *\n * @return the public key.\n */\npki.publicKeyFromAsn1 = function (obj) {\n  // get SubjectPublicKeyInfo\n  var capture = {};\n  var errors = [];\n  if (asn1.validate(obj, publicKeyValidator, capture, errors)) {\n    // get oid\n    var oid = asn1.derToOid(capture.publicKeyOid);\n    if (oid !== pki.oids.rsaEncryption) {\n      var error = new Error('Cannot read public key. Unknown OID.');\n      error.oid = oid;\n      throw error;\n    }\n    obj = capture.rsaPublicKey;\n  }\n\n  // get RSA params\n  errors = [];\n  if (!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read public key. ' + 'ASN.1 object does not contain an RSAPublicKey.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // FIXME: inefficient, get a BigInteger that uses byte strings\n  var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();\n  var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();\n\n  // set public key\n  return pki.setRsaPublicKey(new BigInteger(n, 16), new BigInteger(e, 16));\n};\n\n/**\n * Converts a public key to an ASN.1 SubjectPublicKeyInfo.\n *\n * @param key the public key.\n *\n * @return the asn1 representation of a SubjectPublicKeyInfo.\n */\npki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function (key) {\n  // SubjectPublicKeyInfo\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n  // AlgorithmIdentifier\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n  // algorithm\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),\n  // parameters (null)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]),\n  // subjectPublicKey\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [pki.publicKeyToRSAPublicKey(key)])]);\n};\n\n/**\n * Converts a public key to an ASN.1 RSAPublicKey.\n *\n * @param key the public key.\n *\n * @return the asn1 representation of a RSAPublicKey.\n */\npki.publicKeyToRSAPublicKey = function (key) {\n  // RSAPublicKey\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n  // modulus (n)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.n)),\n  // publicExponent (e)\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.e))]);\n};\n\n/**\n * Encodes a message using PKCS#1 v1.5 padding.\n *\n * @param m the message to encode.\n * @param key the RSA key to use.\n * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02\n *          (for encryption).\n *\n * @return the padded byte buffer.\n */\nfunction _encodePkcs1_v1_5(m, key, bt) {\n  var eb = forge.util.createBuffer();\n\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  /* use PKCS#1 v1.5 padding */\n  if (m.length > k - 11) {\n    var error = new Error('Message is too long for PKCS#1 v1.5 padding.');\n    error.length = m.length;\n    error.max = k - 11;\n    throw error;\n  }\n\n  /* A block type BT, a padding string PS, and the data D shall be\n    formatted into an octet string EB, the encryption block:\n     EB = 00 || BT || PS || 00 || D\n     The block type BT shall be a single octet indicating the structure of\n    the encryption block. For this version of the document it shall have\n    value 00, 01, or 02. For a private-key operation, the block type\n    shall be 00 or 01. For a public-key operation, it shall be 02.\n     The padding string PS shall consist of k-3-||D|| octets. For block\n    type 00, the octets shall have value 00; for block type 01, they\n    shall have value FF; and for block type 02, they shall be\n    pseudorandomly generated and nonzero. This makes the length of the\n    encryption block EB equal to k. */\n\n  // build the encryption block\n  eb.putByte(0x00);\n  eb.putByte(bt);\n\n  // create the padding\n  var padNum = k - 3 - m.length;\n  var padByte;\n  // private key op\n  if (bt === 0x00 || bt === 0x01) {\n    padByte = bt === 0x00 ? 0x00 : 0xFF;\n    for (var i = 0; i < padNum; ++i) {\n      eb.putByte(padByte);\n    }\n  } else {\n    // public key op\n    // pad with random non-zero values\n    while (padNum > 0) {\n      var numZeros = 0;\n      var padBytes = forge.random.getBytes(padNum);\n      for (var i = 0; i < padNum; ++i) {\n        padByte = padBytes.charCodeAt(i);\n        if (padByte === 0) {\n          ++numZeros;\n        } else {\n          eb.putByte(padByte);\n        }\n      }\n      padNum = numZeros;\n    }\n  }\n\n  // zero followed by message\n  eb.putByte(0x00);\n  eb.putBytes(m);\n  return eb;\n}\n\n/**\n * Decodes a message using PKCS#1 v1.5 padding.\n *\n * @param em the message to decode.\n * @param key the RSA key to use.\n * @param pub true if the key is a public key, false if it is private.\n * @param ml the message length, if specified.\n *\n * @return the decoded bytes.\n */\nfunction _decodePkcs1_v1_5(em, key, pub, ml) {\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  /* It is an error if any of the following conditions occurs:\n     1. The encryption block EB cannot be parsed unambiguously.\n    2. The padding string PS consists of fewer than eight octets\n      or is inconsisent with the block type BT.\n    3. The decryption process is a public-key operation and the block\n      type BT is not 00 or 01, or the decryption process is a\n      private-key operation and the block type is not 02.\n   */\n\n  // parse the encryption block\n  var eb = forge.util.createBuffer(em);\n  var first = eb.getByte();\n  var bt = eb.getByte();\n  if (first !== 0x00 || pub && bt !== 0x00 && bt !== 0x01 || !pub && bt != 0x02 || pub && bt === 0x00 && typeof ml === 'undefined') {\n    throw new Error('Encryption block is invalid.');\n  }\n  var padNum = 0;\n  if (bt === 0x00) {\n    // check all padding bytes for 0x00\n    padNum = k - 3 - ml;\n    for (var i = 0; i < padNum; ++i) {\n      if (eb.getByte() !== 0x00) {\n        throw new Error('Encryption block is invalid.');\n      }\n    }\n  } else if (bt === 0x01) {\n    // find the first byte that isn't 0xFF, should be after all padding\n    padNum = 0;\n    while (eb.length() > 1) {\n      if (eb.getByte() !== 0xFF) {\n        --eb.read;\n        break;\n      }\n      ++padNum;\n    }\n  } else if (bt === 0x02) {\n    // look for 0x00 byte\n    padNum = 0;\n    while (eb.length() > 1) {\n      if (eb.getByte() === 0x00) {\n        --eb.read;\n        break;\n      }\n      ++padNum;\n    }\n  }\n\n  // zero must be 0x00 and padNum must be (k - 3 - message length)\n  var zero = eb.getByte();\n  if (zero !== 0x00 || padNum !== k - 3 - eb.length()) {\n    throw new Error('Encryption block is invalid.');\n  }\n  return eb.getBytes();\n}\n\n/**\n * Runs the key-generation algorithm asynchronously, either in the background\n * via Web Workers, or using the main thread and setImmediate.\n *\n * @param state the key-pair generation state.\n * @param [options] options for key-pair generation:\n *          workerScript the worker script URL.\n *          workers the number of web workers (if supported) to use,\n *            (default: 2, -1 to use estimated cores minus one).\n *          workLoad the size of the work load, ie: number of possible prime\n *            numbers for each web worker to check per work assignment,\n *            (default: 100).\n * @param callback(err, keypair) called once the operation completes.\n */\nfunction _generateKeyPair(state, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  var opts = {\n    algorithm: {\n      name: options.algorithm || 'PRIMEINC',\n      options: {\n        workers: options.workers || 2,\n        workLoad: options.workLoad || 100,\n        workerScript: options.workerScript\n      }\n    }\n  };\n  if ('prng' in options) {\n    opts.prng = options.prng;\n  }\n  generate();\n  function generate() {\n    // find p and then q (done in series to simplify)\n    getPrime(state.pBits, function (err, num) {\n      if (err) {\n        return callback(err);\n      }\n      state.p = num;\n      if (state.q !== null) {\n        return finish(err, state.q);\n      }\n      getPrime(state.qBits, finish);\n    });\n  }\n  function getPrime(bits, callback) {\n    forge.prime.generateProbablePrime(bits, opts, callback);\n  }\n  function finish(err, num) {\n    if (err) {\n      return callback(err);\n    }\n\n    // set q\n    state.q = num;\n\n    // ensure p is larger than q (swap them if not)\n    if (state.p.compareTo(state.q) < 0) {\n      var tmp = state.p;\n      state.p = state.q;\n      state.q = tmp;\n    }\n\n    // ensure p is coprime with e\n    if (state.p.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n      state.p = null;\n      generate();\n      return;\n    }\n\n    // ensure q is coprime with e\n    if (state.q.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n      state.q = null;\n      getPrime(state.qBits, finish);\n      return;\n    }\n\n    // compute phi: (p - 1)(q - 1) (Euler's totient function)\n    state.p1 = state.p.subtract(BigInteger.ONE);\n    state.q1 = state.q.subtract(BigInteger.ONE);\n    state.phi = state.p1.multiply(state.q1);\n\n    // ensure e and phi are coprime\n    if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n      // phi and e aren't coprime, so generate a new p and q\n      state.p = state.q = null;\n      generate();\n      return;\n    }\n\n    // create n, ensure n is has the right number of bits\n    state.n = state.p.multiply(state.q);\n    if (state.n.bitLength() !== state.bits) {\n      // failed, get new q\n      state.q = null;\n      getPrime(state.qBits, finish);\n      return;\n    }\n\n    // set keys\n    var d = state.e.modInverse(state.phi);\n    state.keys = {\n      privateKey: pki.rsa.setPrivateKey(state.n, state.e, d, state.p, state.q, d.mod(state.p1), d.mod(state.q1), state.q.modInverse(state.p)),\n      publicKey: pki.rsa.setPublicKey(state.n, state.e)\n    };\n    callback(null, state.keys);\n  }\n}\n\n/**\n * Converts a positive BigInteger into 2's-complement big-endian bytes.\n *\n * @param b the big integer to convert.\n *\n * @return the bytes.\n */\nfunction _bnToBytes(b) {\n  // prepend 0x00 if first byte >= 0x80\n  var hex = b.toString(16);\n  if (hex[0] >= '8') {\n    hex = '00' + hex;\n  }\n  var bytes = forge.util.hexToBytes(hex);\n\n  // ensure integer is minimally-encoded\n  if (bytes.length > 1 && (\n  // leading 0x00 for positive integer\n  bytes.charCodeAt(0) === 0 && (bytes.charCodeAt(1) & 0x80) === 0 ||\n  // leading 0xFF for negative integer\n  bytes.charCodeAt(0) === 0xFF && (bytes.charCodeAt(1) & 0x80) === 0x80)) {\n    return bytes.substr(1);\n  }\n  return bytes;\n}\n\n/**\n * Returns the required number of Miller-Rabin tests to generate a\n * prime with an error probability of (1/2)^80.\n *\n * See Handbook of Applied Cryptography Chapter 4, Table 4.4.\n *\n * @param bits the bit size.\n *\n * @return the required number of iterations.\n */\nfunction _getMillerRabinTests(bits) {\n  if (bits <= 100) return 27;\n  if (bits <= 150) return 18;\n  if (bits <= 200) return 15;\n  if (bits <= 250) return 12;\n  if (bits <= 300) return 9;\n  if (bits <= 350) return 8;\n  if (bits <= 400) return 7;\n  if (bits <= 500) return 6;\n  if (bits <= 600) return 5;\n  if (bits <= 800) return 4;\n  if (bits <= 1250) return 3;\n  return 2;\n}\n\n/**\n * Performs feature detection on the SubtleCrypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */\nfunction _detectSubtleCrypto(fn) {\n  return typeof window !== 'undefined' && typeof window.crypto === 'object' && typeof window.crypto.subtle === 'object' && typeof window.crypto.subtle[fn] === 'function';\n}\n\n/**\n * Performs feature detection on the deprecated Microsoft Internet Explorer\n * outdated SubtleCrypto interface. This function should only be used after\n * checking for the modern, standard SubtleCrypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */\nfunction _detectSubtleMsCrypto(fn) {\n  return typeof window !== 'undefined' && typeof window.msCrypto === 'object' && typeof window.msCrypto.subtle === 'object' && typeof window.msCrypto.subtle[fn] === 'function';\n}\nfunction _intToUint8Array(x) {\n  var bytes = forge.util.hexToBytes(x.toString(16));\n  var buffer = new Uint8Array(bytes.length);\n  for (var i = 0; i < bytes.length; ++i) {\n    buffer[i] = bytes.charCodeAt(i);\n  }\n  return buffer;\n}\nfunction _privateKeyFromJwk(jwk) {\n  if (jwk.kty !== 'RSA') {\n    throw new Error('Unsupported key algorithm \"' + jwk.kty + '\"; algorithm must be \"RSA\".');\n  }\n  return pki.setRsaPrivateKey(_base64ToBigInt(jwk.n), _base64ToBigInt(jwk.e), _base64ToBigInt(jwk.d), _base64ToBigInt(jwk.p), _base64ToBigInt(jwk.q), _base64ToBigInt(jwk.dp), _base64ToBigInt(jwk.dq), _base64ToBigInt(jwk.qi));\n}\nfunction _publicKeyFromJwk(jwk) {\n  if (jwk.kty !== 'RSA') {\n    throw new Error('Key algorithm must be \"RSA\".');\n  }\n  return pki.setRsaPublicKey(_base64ToBigInt(jwk.n), _base64ToBigInt(jwk.e));\n}\nfunction _base64ToBigInt(b64) {\n  return new BigInteger(forge.util.bytesToHex(forge.util.decode64(b64)), 16);\n}","map":{"version":3,"names":["forge","require","BigInteger","jsbn","asn1","pki","module","exports","rsa","GCD_30_DELTA","privateKeyValidator","name","tagClass","Class","UNIVERSAL","type","Type","SEQUENCE","constructed","value","INTEGER","capture","OID","OCTETSTRING","rsaPrivateKeyValidator","rsaPublicKeyValidator","publicKeyValidator","captureAsn1","BITSTRING","optional","emsaPkcs1v15encode","md","oid","algorithm","oids","error","Error","oidBytes","oidToDer","getBytes","digestInfo","create","digestAlgorithm","push","NULL","digest","toDer","_modPow","x","key","pub","modPow","e","n","p","q","d","dP","mod","subtract","ONE","dQ","qInv","modInverse","r","util","bytesToHex","random","bitLength","compareTo","gcd","equals","multiply","xp","xq","add","y","encrypt","m","bt","eb","k","Math","ceil","_encodePkcs1_v1_5","createBuffer","putBytes","toHex","yhex","toString","ed","zeros","length","putByte","hexToBytes","decrypt","ml","expected","xhex","_decodePkcs1_v1_5","createKeyPairGenerationState","bits","options","parseInt","prng","rng","nextBytes","b","getBytesSync","i","charCodeAt","rval","state","eInt","qBits","pBits","pqState","num","keys","fromInt","stepKeyPairGenerationState","THIRTY","deltaIdx","op_or","t1","Date","t2","total","bits1","testBit","bitwiseTo","shiftLeft","dAddOffset","byteValue","isProbablePrime","_getMillerRabinTests","p1","q1","phi","privateKey","setPrivateKey","publicKey","setPublicKey","generateKeyPair","callback","arguments","undefined","usePureJavaScript","_detectSubtleCrypto","window","crypto","subtle","generateKey","modulusLength","publicExponent","_intToUint8Array","hash","then","pair","exportKey","err","pkcs8","privateKeyFromAsn1","fromDer","setRsaPublicKey","_detectSubtleMsCrypto","genOp","msCrypto","oncomplete","target","result","exportOp","onerror","_generateKeyPair","data","scheme","schemeOptions","toUpperCase","encode","pkcs1","encode_rsa_oaep","indexOf","verify","signature","obj","setRsaPrivateKey","decode","decode_rsa_oaep","sign","wrapRsaPrivateKey","rsaKey","integerToDer","rsaEncryption","errors","validate","privateKeyModulus","privateKeyPublicExponent","privateKeyPrivateExponent","privateKeyPrime1","privateKeyPrime2","privateKeyExponent1","privateKeyExponent2","privateKeyCoefficient","privateKeyToAsn1","privateKeyToRSAPrivateKey","_bnToBytes","publicKeyFromAsn1","derToOid","publicKeyOid","rsaPublicKey","publicKeyModulus","publicKeyExponent","publicKeyToAsn1","publicKeyToSubjectPublicKeyInfo","publicKeyToRSAPublicKey","max","padNum","padByte","numZeros","padBytes","em","first","getByte","read","zero","opts","workers","workLoad","workerScript","generate","getPrime","finish","prime","generateProbablePrime","tmp","hex","bytes","substr","fn","buffer","Uint8Array","_privateKeyFromJwk","jwk","kty","_base64ToBigInt","dp","dq","qi","_publicKeyFromJwk","b64","decode64"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/peer-info/node_modules/node-forge/lib/rsa.js"],"sourcesContent":["/**\n * Javascript implementation of basic RSA algorithms.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n *\n * The only algorithm currently supported for PKI is RSA.\n *\n * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo\n * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier\n * and a subjectPublicKey of type bit string.\n *\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\n * for the algorithm, if any. In the case of RSA, there aren't any.\n *\n * SubjectPublicKeyInfo ::= SEQUENCE {\n *   algorithm AlgorithmIdentifier,\n *   subjectPublicKey BIT STRING\n * }\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *   algorithm OBJECT IDENTIFIER,\n *   parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * For an RSA public key, the subjectPublicKey is:\n *\n * RSAPublicKey ::= SEQUENCE {\n *   modulus            INTEGER,    -- n\n *   publicExponent     INTEGER     -- e\n * }\n *\n * PrivateKeyInfo ::= SEQUENCE {\n *   version                   Version,\n *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,\n *   privateKey                PrivateKey,\n *   attributes           [0]  IMPLICIT Attributes OPTIONAL\n * }\n *\n * Version ::= INTEGER\n * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier\n * PrivateKey ::= OCTET STRING\n * Attributes ::= SET OF Attribute\n *\n * An RSA private key as the following structure:\n *\n * RSAPrivateKey ::= SEQUENCE {\n *   version Version,\n *   modulus INTEGER, -- n\n *   publicExponent INTEGER, -- e\n *   privateExponent INTEGER, -- d\n *   prime1 INTEGER, -- p\n *   prime2 INTEGER, -- q\n *   exponent1 INTEGER, -- d mod (p-1)\n *   exponent2 INTEGER, -- d mod (q-1)\n *   coefficient INTEGER -- (inverse of q) mod p\n * }\n *\n * Version ::= INTEGER\n *\n * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./jsbn');\nrequire('./oids');\nrequire('./pkcs1');\nrequire('./prime');\nrequire('./random');\nrequire('./util');\n\nif(typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/*\n * RSA encryption and decryption, see RFC 2313.\n */\nforge.pki = forge.pki || {};\nmodule.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};\nvar pki = forge.pki;\n\n// for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29\nvar GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\n\n// validator for a PrivateKeyInfo structure\nvar privateKeyValidator = {\n  // PrivateKeyInfo\n  name: 'PrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // Version (INTEGER)\n    name: 'PrivateKeyInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyVersion'\n  }, {\n    // privateKeyAlgorithm\n    name: 'PrivateKeyInfo.privateKeyAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'privateKeyOid'\n    }]\n  }, {\n    // PrivateKey\n    name: 'PrivateKeyInfo',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'privateKey'\n  }]\n};\n\n// validator for an RSA private key\nvar rsaPrivateKeyValidator = {\n  // RSAPrivateKey\n  name: 'RSAPrivateKey',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // Version (INTEGER)\n    name: 'RSAPrivateKey.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyVersion'\n  }, {\n    // modulus (n)\n    name: 'RSAPrivateKey.modulus',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyModulus'\n  }, {\n    // publicExponent (e)\n    name: 'RSAPrivateKey.publicExponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPublicExponent'\n  }, {\n    // privateExponent (d)\n    name: 'RSAPrivateKey.privateExponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrivateExponent'\n  }, {\n    // prime1 (p)\n    name: 'RSAPrivateKey.prime1',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrime1'\n  }, {\n    // prime2 (q)\n    name: 'RSAPrivateKey.prime2',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrime2'\n  }, {\n    // exponent1 (d mod (p-1))\n    name: 'RSAPrivateKey.exponent1',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyExponent1'\n  }, {\n    // exponent2 (d mod (q-1))\n    name: 'RSAPrivateKey.exponent2',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyExponent2'\n  }, {\n    // coefficient ((inverse of q) mod p)\n    name: 'RSAPrivateKey.coefficient',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyCoefficient'\n  }]\n};\n\n// validator for an RSA public key\nvar rsaPublicKeyValidator = {\n  // RSAPublicKey\n  name: 'RSAPublicKey',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // modulus (n)\n    name: 'RSAPublicKey.modulus',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'publicKeyModulus'\n  }, {\n    // publicExponent (e)\n    name: 'RSAPublicKey.exponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'publicKeyExponent'\n  }]\n};\n\n// validator for an SubjectPublicKeyInfo structure\n// Note: Currently only works with an RSA public key\nvar publicKeyValidator = forge.pki.rsa.publicKeyValidator = {\n  name: 'SubjectPublicKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  captureAsn1: 'subjectPublicKeyInfo',\n  value: [{\n    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'publicKeyOid'\n    }]\n  }, {\n    // subjectPublicKey\n    name: 'SubjectPublicKeyInfo.subjectPublicKey',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.BITSTRING,\n    constructed: false,\n    value: [{\n      // RSAPublicKey\n      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      optional: true,\n      captureAsn1: 'rsaPublicKey'\n    }]\n  }]\n};\n\n/**\n * Wrap digest in DigestInfo object.\n *\n * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.\n *\n * DigestInfo ::= SEQUENCE {\n *   digestAlgorithm DigestAlgorithmIdentifier,\n *   digest Digest\n * }\n *\n * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n * Digest ::= OCTET STRING\n *\n * @param md the message digest object with the hash to sign.\n *\n * @return the encoded message (ready for RSA encrytion)\n */\nvar emsaPkcs1v15encode = function(md) {\n  // get the oid for the algorithm\n  var oid;\n  if(md.algorithm in pki.oids) {\n    oid = pki.oids[md.algorithm];\n  } else {\n    var error = new Error('Unknown message digest algorithm.');\n    error.algorithm = md.algorithm;\n    throw error;\n  }\n  var oidBytes = asn1.oidToDer(oid).getBytes();\n\n  // create the digest info\n  var digestInfo = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n  var digestAlgorithm = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n  digestAlgorithm.value.push(asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));\n  digestAlgorithm.value.push(asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.NULL, false, ''));\n  var digest = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,\n    false, md.digest().getBytes());\n  digestInfo.value.push(digestAlgorithm);\n  digestInfo.value.push(digest);\n\n  // encode digest info\n  return asn1.toDer(digestInfo).getBytes();\n};\n\n/**\n * Performs x^c mod n (RSA encryption or decryption operation).\n *\n * @param x the number to raise and mod.\n * @param key the key to use.\n * @param pub true if the key is public, false if private.\n *\n * @return the result of x^c mod n.\n */\nvar _modPow = function(x, key, pub) {\n  if(pub) {\n    return x.modPow(key.e, key.n);\n  }\n\n  if(!key.p || !key.q) {\n    // allow calculation without CRT params (slow)\n    return x.modPow(key.d, key.n);\n  }\n\n  // pre-compute dP, dQ, and qInv if necessary\n  if(!key.dP) {\n    key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));\n  }\n  if(!key.dQ) {\n    key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));\n  }\n  if(!key.qInv) {\n    key.qInv = key.q.modInverse(key.p);\n  }\n\n  /* Chinese remainder theorem (CRT) states:\n\n    Suppose n1, n2, ..., nk are positive integers which are pairwise\n    coprime (n1 and n2 have no common factors other than 1). For any\n    integers x1, x2, ..., xk there exists an integer x solving the\n    system of simultaneous congruences (where ~= means modularly\n    congruent so a ~= b mod n means a mod n = b mod n):\n\n    x ~= x1 mod n1\n    x ~= x2 mod n2\n    ...\n    x ~= xk mod nk\n\n    This system of congruences has a single simultaneous solution x\n    between 0 and n - 1. Furthermore, each xk solution and x itself\n    is congruent modulo the product n = n1*n2*...*nk.\n    So x1 mod n = x2 mod n = xk mod n = x mod n.\n\n    The single simultaneous solution x can be solved with the following\n    equation:\n\n    x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.\n\n    Where x is less than n, xi = x mod ni.\n\n    For RSA we are only concerned with k = 2. The modulus n = pq, where\n    p and q are coprime. The RSA decryption algorithm is:\n\n    y = x^d mod n\n\n    Given the above:\n\n    x1 = x^d mod p\n    r1 = n/p = q\n    s1 = q^-1 mod p\n    x2 = x^d mod q\n    r2 = n/q = p\n    s2 = p^-1 mod q\n\n    So y = (x1r1s1 + x2r2s2) mod n\n         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n\n\n    According to Fermat's Little Theorem, if the modulus P is prime,\n    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.\n    Since A is not divisible by P it follows that if:\n    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:\n\n    A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort\n    to calculate). In order to calculate x^d mod p more quickly the\n    exponent d mod (p - 1) is stored in the RSA private key (the same\n    is done for x^d mod q). These values are referred to as dP and dQ\n    respectively. Therefore we now have:\n\n    y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n\n\n    Since we'll be reducing x^dP by modulo p (same for q) we can also\n    reduce x by p (and q respectively) before hand. Therefore, let\n\n    xp = ((x mod p)^dP mod p), and\n    xq = ((x mod q)^dQ mod q), yielding:\n\n    y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n\n\n    This can be further reduced to a simple algorithm that only\n    requires 1 inverse (the q inverse is used) to be used and stored.\n    The algorithm is called Garner's algorithm. If qInv is the\n    inverse of q, we simply calculate:\n\n    y = (qInv*(xp - xq) mod p) * q + xq\n\n    However, there are two further complications. First, we need to\n    ensure that xp > xq to prevent signed BigIntegers from being used\n    so we add p until this is true (since we will be mod'ing with\n    p anyway). Then, there is a known timing attack on algorithms\n    using the CRT. To mitigate this risk, \"cryptographic blinding\"\n    should be used. This requires simply generating a random number r\n    between 0 and n-1 and its inverse and multiplying x by r^e before\n    calculating y and then multiplying y by r^-1 afterwards. Note that\n    r must be coprime with n (gcd(r, n) === 1) in order to have an\n    inverse.\n  */\n\n  // cryptographic blinding\n  var r;\n  do {\n    r = new BigInteger(\n      forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)),\n      16);\n  } while(r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));\n  x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);\n\n  // calculate xp and xq\n  var xp = x.mod(key.p).modPow(key.dP, key.p);\n  var xq = x.mod(key.q).modPow(key.dQ, key.q);\n\n  // xp must be larger than xq to avoid signed bit usage\n  while(xp.compareTo(xq) < 0) {\n    xp = xp.add(key.p);\n  }\n\n  // do last step\n  var y = xp.subtract(xq)\n    .multiply(key.qInv).mod(key.p)\n    .multiply(key.q).add(xq);\n\n  // remove effect of random for cryptographic blinding\n  y = y.multiply(r.modInverse(key.n)).mod(key.n);\n\n  return y;\n};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or\n * 'encrypt' on a public key object instead.\n *\n * Performs RSA encryption.\n *\n * The parameter bt controls whether to put padding bytes before the\n * message passed in. Set bt to either true or false to disable padding\n * completely (in order to handle e.g. EMSA-PSS encoding seperately before),\n * signaling whether the encryption operation is a public key operation\n * (i.e. encrypting data) or not, i.e. private key operation (data signing).\n *\n * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01\n * (for signing) or 0x02 (for encryption). The key operation mode (private\n * or public) is derived from this flag in that case).\n *\n * @param m the message to encrypt as a byte string.\n * @param key the RSA key to use.\n * @param bt for PKCS#1 v1.5 padding, the block type to use\n *   (0x01 for private key, 0x02 for public),\n *   to disable padding: true = public key, false = private key.\n *\n * @return the encrypted bytes as a string.\n */\npki.rsa.encrypt = function(m, key, bt) {\n  var pub = bt;\n  var eb;\n\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  if(bt !== false && bt !== true) {\n    // legacy, default to PKCS#1 v1.5 padding\n    pub = (bt === 0x02);\n    eb = _encodePkcs1_v1_5(m, key, bt);\n  } else {\n    eb = forge.util.createBuffer();\n    eb.putBytes(m);\n  }\n\n  // load encryption block as big integer 'x'\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var x = new BigInteger(eb.toHex(), 16);\n\n  // do RSA encryption\n  var y = _modPow(x, key, pub);\n\n  // convert y into the encrypted data byte string, if y is shorter in\n  // bytes than k, then prepend zero bytes to fill up ed\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var yhex = y.toString(16);\n  var ed = forge.util.createBuffer();\n  var zeros = k - Math.ceil(yhex.length / 2);\n  while(zeros > 0) {\n    ed.putByte(0x00);\n    --zeros;\n  }\n  ed.putBytes(forge.util.hexToBytes(yhex));\n  return ed.getBytes();\n};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or\n * 'verify' on a public key object instead.\n *\n * Performs RSA decryption.\n *\n * The parameter ml controls whether to apply PKCS#1 v1.5 padding\n * or not.  Set ml = false to disable padding removal completely\n * (in order to handle e.g. EMSA-PSS later on) and simply pass back\n * the RSA encryption block.\n *\n * @param ed the encrypted data to decrypt in as a byte string.\n * @param key the RSA key to use.\n * @param pub true for a public key operation, false for private.\n * @param ml the message length, if known, false to disable padding.\n *\n * @return the decrypted message as a byte string.\n */\npki.rsa.decrypt = function(ed, key, pub, ml) {\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  // error if the length of the encrypted data ED is not k\n  if(ed.length !== k) {\n    var error = new Error('Encrypted message length is invalid.');\n    error.length = ed.length;\n    error.expected = k;\n    throw error;\n  }\n\n  // convert encrypted data into a big integer\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);\n\n  // y must be less than the modulus or it wasn't the result of\n  // a previous mod operation (encryption) using that modulus\n  if(y.compareTo(key.n) >= 0) {\n    throw new Error('Encrypted message is invalid.');\n  }\n\n  // do RSA decryption\n  var x = _modPow(y, key, pub);\n\n  // create the encryption block, if x is shorter in bytes than k, then\n  // prepend zero bytes to fill up eb\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var xhex = x.toString(16);\n  var eb = forge.util.createBuffer();\n  var zeros = k - Math.ceil(xhex.length / 2);\n  while(zeros > 0) {\n    eb.putByte(0x00);\n    --zeros;\n  }\n  eb.putBytes(forge.util.hexToBytes(xhex));\n\n  if(ml !== false) {\n    // legacy, default to PKCS#1 v1.5 padding\n    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);\n  }\n\n  // return message\n  return eb.getBytes();\n};\n\n/**\n * Creates an RSA key-pair generation state object. It is used to allow\n * key-generation to be performed in steps. It also allows for a UI to\n * display progress updates.\n *\n * @param bits the size for the private key in bits, defaults to 2048.\n * @param e the public exponent to use, defaults to 65537 (0x10001).\n * @param [options] the options to use.\n *          prng a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n *          algorithm the algorithm to use (default: 'PRIMEINC').\n *\n * @return the state object to use to generate the key-pair.\n */\npki.rsa.createKeyPairGenerationState = function(bits, e, options) {\n  // TODO: migrate step-based prime generation code to forge.prime\n\n  // set default bits\n  if(typeof(bits) === 'string') {\n    bits = parseInt(bits, 10);\n  }\n  bits = bits || 2048;\n\n  // create prng with api that matches BigInteger secure random\n  options = options || {};\n  var prng = options.prng || forge.random;\n  var rng = {\n    // x is an array to fill with bytes\n    nextBytes: function(x) {\n      var b = prng.getBytesSync(x.length);\n      for(var i = 0; i < x.length; ++i) {\n        x[i] = b.charCodeAt(i);\n      }\n    }\n  };\n\n  var algorithm = options.algorithm || 'PRIMEINC';\n\n  // create PRIMEINC algorithm state\n  var rval;\n  if(algorithm === 'PRIMEINC') {\n    rval = {\n      algorithm: algorithm,\n      state: 0,\n      bits: bits,\n      rng: rng,\n      eInt: e || 65537,\n      e: new BigInteger(null),\n      p: null,\n      q: null,\n      qBits: bits >> 1,\n      pBits: bits - (bits >> 1),\n      pqState: 0,\n      num: null,\n      keys: null\n    };\n    rval.e.fromInt(rval.eInt);\n  } else {\n    throw new Error('Invalid key generation algorithm: ' + algorithm);\n  }\n\n  return rval;\n};\n\n/**\n * Attempts to runs the key-generation algorithm for at most n seconds\n * (approximately) using the given state. When key-generation has completed,\n * the keys will be stored in state.keys.\n *\n * To use this function to update a UI while generating a key or to prevent\n * causing browser lockups/warnings, set \"n\" to a value other than 0. A\n * simple pattern for generating a key and showing a progress indicator is:\n *\n * var state = pki.rsa.createKeyPairGenerationState(2048);\n * var step = function() {\n *   // step key-generation, run algorithm for 100 ms, repeat\n *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {\n *     setTimeout(step, 1);\n *   } else {\n *     // key-generation complete\n *     // TODO: turn off progress indicator here\n *     // TODO: use the generated key-pair in \"state.keys\"\n *   }\n * };\n * // TODO: turn on progress indicator here\n * setTimeout(step, 0);\n *\n * @param state the state to use.\n * @param n the maximum number of milliseconds to run the algorithm for, 0\n *          to run the algorithm to completion.\n *\n * @return true if the key-generation completed, false if not.\n */\npki.rsa.stepKeyPairGenerationState = function(state, n) {\n  // set default algorithm if not set\n  if(!('algorithm' in state)) {\n    state.algorithm = 'PRIMEINC';\n  }\n\n  // TODO: migrate step-based prime generation code to forge.prime\n  // TODO: abstract as PRIMEINC algorithm\n\n  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)\n  // with some minor optimizations and designed to run in steps\n\n  // local state vars\n  var THIRTY = new BigInteger(null);\n  THIRTY.fromInt(30);\n  var deltaIdx = 0;\n  var op_or = function(x, y) { return x|y; };\n\n  // keep stepping until time limit is reached or done\n  var t1 = +new Date();\n  var t2;\n  var total = 0;\n  while(state.keys === null && (n <= 0 || total < n)) {\n    // generate p or q\n    if(state.state === 0) {\n      /* Note: All primes are of the form:\n\n        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i\n\n        When we generate a random number, we always align it at 30k + 1. Each\n        time the number is determined not to be prime we add to get to the\n        next 'i', eg: if the number was at 30k + 1 we add 6. */\n      var bits = (state.p === null) ? state.pBits : state.qBits;\n      var bits1 = bits - 1;\n\n      // get a random number\n      if(state.pqState === 0) {\n        state.num = new BigInteger(bits, state.rng);\n        // force MSB set\n        if(!state.num.testBit(bits1)) {\n          state.num.bitwiseTo(\n            BigInteger.ONE.shiftLeft(bits1), op_or, state.num);\n        }\n        // align number on 30k+1 boundary\n        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);\n        deltaIdx = 0;\n\n        ++state.pqState;\n      } else if(state.pqState === 1) {\n        // try to make the number a prime\n        if(state.num.bitLength() > bits) {\n          // overflow, try again\n          state.pqState = 0;\n          // do primality test\n        } else if(state.num.isProbablePrime(\n          _getMillerRabinTests(state.num.bitLength()))) {\n          ++state.pqState;\n        } else {\n          // get next potential prime\n          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n        }\n      } else if(state.pqState === 2) {\n        // ensure number is coprime with e\n        state.pqState =\n          (state.num.subtract(BigInteger.ONE).gcd(state.e)\n          .compareTo(BigInteger.ONE) === 0) ? 3 : 0;\n      } else if(state.pqState === 3) {\n        // store p or q\n        state.pqState = 0;\n        if(state.p === null) {\n          state.p = state.num;\n        } else {\n          state.q = state.num;\n        }\n\n        // advance state if both p and q are ready\n        if(state.p !== null && state.q !== null) {\n          ++state.state;\n        }\n        state.num = null;\n      }\n    } else if(state.state === 1) {\n      // ensure p is larger than q (swap them if not)\n      if(state.p.compareTo(state.q) < 0) {\n        state.num = state.p;\n        state.p = state.q;\n        state.q = state.num;\n      }\n      ++state.state;\n    } else if(state.state === 2) {\n      // compute phi: (p - 1)(q - 1) (Euler's totient function)\n      state.p1 = state.p.subtract(BigInteger.ONE);\n      state.q1 = state.q.subtract(BigInteger.ONE);\n      state.phi = state.p1.multiply(state.q1);\n      ++state.state;\n    } else if(state.state === 3) {\n      // ensure e and phi are coprime\n      if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {\n        // phi and e are coprime, advance\n        ++state.state;\n      } else {\n        // phi and e aren't coprime, so generate a new p and q\n        state.p = null;\n        state.q = null;\n        state.state = 0;\n      }\n    } else if(state.state === 4) {\n      // create n, ensure n is has the right number of bits\n      state.n = state.p.multiply(state.q);\n\n      // ensure n is right number of bits\n      if(state.n.bitLength() === state.bits) {\n        // success, advance\n        ++state.state;\n      } else {\n        // failed, get new q\n        state.q = null;\n        state.state = 0;\n      }\n    } else if(state.state === 5) {\n      // set keys\n      var d = state.e.modInverse(state.phi);\n      state.keys = {\n        privateKey: pki.rsa.setPrivateKey(\n          state.n, state.e, d, state.p, state.q,\n          d.mod(state.p1), d.mod(state.q1),\n          state.q.modInverse(state.p)),\n        publicKey: pki.rsa.setPublicKey(state.n, state.e)\n      };\n    }\n\n    // update timing\n    t2 = +new Date();\n    total += t2 - t1;\n    t1 = t2;\n  }\n\n  return state.keys !== null;\n};\n\n/**\n * Generates an RSA public-private key pair in a single call.\n *\n * To generate a key-pair in steps (to allow for progress updates and to\n * prevent blocking or warnings in slow browsers) then use the key-pair\n * generation state functions.\n *\n * To generate a key-pair asynchronously (either through web-workers, if\n * available, or by breaking up the work on the main thread), pass a\n * callback function.\n *\n * @param [bits] the size for the private key in bits, defaults to 2048.\n * @param [e] the public exponent to use, defaults to 65537.\n * @param [options] options for key-pair generation, if given then 'bits'\n *          and 'e' must *not* be given:\n *          bits the size for the private key in bits, (default: 2048).\n *          e the public exponent to use, (default: 65537 (0x10001)).\n *          workerScript the worker script URL.\n *          workers the number of web workers (if supported) to use,\n *            (default: 2).\n *          workLoad the size of the work load, ie: number of possible prime\n *            numbers for each web worker to check per work assignment,\n *            (default: 100).\n *          prng a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n *          algorithm the algorithm to use (default: 'PRIMEINC').\n * @param [callback(err, keypair)] called once the operation completes.\n *\n * @return an object with privateKey and publicKey properties.\n */\npki.rsa.generateKeyPair = function(bits, e, options, callback) {\n  // (bits), (options), (callback)\n  if(arguments.length === 1) {\n    if(typeof bits === 'object') {\n      options = bits;\n      bits = undefined;\n    } else if(typeof bits === 'function') {\n      callback = bits;\n      bits = undefined;\n    }\n  } else if(arguments.length === 2) {\n    // (bits, e), (bits, options), (bits, callback), (options, callback)\n    if(typeof bits === 'number') {\n      if(typeof e === 'function') {\n        callback = e;\n        e = undefined;\n      } else if(typeof e !== 'number') {\n        options = e;\n        e = undefined;\n      }\n    } else {\n      options = bits;\n      callback = e;\n      bits = undefined;\n      e = undefined;\n    }\n  } else if(arguments.length === 3) {\n    // (bits, e, options), (bits, e, callback), (bits, options, callback)\n    if(typeof e === 'number') {\n      if(typeof options === 'function') {\n        callback = options;\n        options = undefined;\n      }\n    } else {\n      callback = options;\n      options = e;\n      e = undefined;\n    }\n  }\n  options = options || {};\n  if(bits === undefined) {\n    bits = options.bits || 2048;\n  }\n  if(e === undefined) {\n    e = options.e || 0x10001;\n  }\n\n  // if native code is permitted and a callback is given, use native\n  // key generation code if available and if parameters are acceptable\n  if(!forge.options.usePureJavaScript && callback &&\n    bits >= 256 && bits <= 16384 && (e === 0x10001 || e === 3)) {\n    if(_detectSubtleCrypto('generateKey') && _detectSubtleCrypto('exportKey')) {\n      // use standard native generateKey\n      return window.crypto.subtle.generateKey({\n        name: 'RSASSA-PKCS1-v1_5',\n        modulusLength: bits,\n        publicExponent: _intToUint8Array(e),\n        hash: {name: 'SHA-256'}\n      }, true /* key can be exported*/, ['sign', 'verify'])\n      .then(function(pair) {\n        return window.crypto.subtle.exportKey('pkcs8', pair.privateKey);\n      // avoiding catch(function(err) {...}) to support IE <= 8\n      }).then(undefined, function(err) {\n        callback(err);\n      }).then(function(pkcs8) {\n        if(pkcs8) {\n          var privateKey = pki.privateKeyFromAsn1(\n            asn1.fromDer(forge.util.createBuffer(pkcs8)));\n          callback(null, {\n            privateKey: privateKey,\n            publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)\n          });\n        }\n      });\n    }\n    if(_detectSubtleMsCrypto('generateKey') &&\n      _detectSubtleMsCrypto('exportKey')) {\n      var genOp = window.msCrypto.subtle.generateKey({\n        name: 'RSASSA-PKCS1-v1_5',\n        modulusLength: bits,\n        publicExponent: _intToUint8Array(e),\n        hash: {name: 'SHA-256'}\n      }, true /* key can be exported*/, ['sign', 'verify']);\n      genOp.oncomplete = function(e) {\n        var pair = e.target.result;\n        var exportOp = window.msCrypto.subtle.exportKey(\n          'pkcs8', pair.privateKey);\n        exportOp.oncomplete = function(e) {\n          var pkcs8 = e.target.result;\n          var privateKey = pki.privateKeyFromAsn1(\n            asn1.fromDer(forge.util.createBuffer(pkcs8)));\n          callback(null, {\n            privateKey: privateKey,\n            publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)\n          });\n        };\n        exportOp.onerror = function(err) {\n          callback(err);\n        };\n      };\n      genOp.onerror = function(err) {\n        callback(err);\n      };\n      return;\n    }\n  }\n\n  // use JavaScript implementation\n  var state = pki.rsa.createKeyPairGenerationState(bits, e, options);\n  if(!callback) {\n    pki.rsa.stepKeyPairGenerationState(state, 0);\n    return state.keys;\n  }\n  _generateKeyPair(state, options, callback);\n};\n\n/**\n * Sets an RSA public key from BigIntegers modulus and exponent.\n *\n * @param n the modulus.\n * @param e the exponent.\n *\n * @return the public key.\n */\npki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e) {\n  var key = {\n    n: n,\n    e: e\n  };\n\n  /**\n   * Encrypts the given data with this public key. Newer applications\n   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for\n   * legacy applications.\n   *\n   * @param data the byte string to encrypt.\n   * @param scheme the encryption scheme to use:\n   *          'RSAES-PKCS1-V1_5' (default),\n   *          'RSA-OAEP',\n   *          'RAW', 'NONE', or null to perform raw RSA encryption,\n   *          an object with an 'encode' property set to a function\n   *          with the signature 'function(data, key)' that returns\n   *          a binary-encoded string representing the encoded data.\n   * @param schemeOptions any scheme-specific options.\n   *\n   * @return the encrypted byte string.\n   */\n  key.encrypt = function(data, scheme, schemeOptions) {\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if(scheme === undefined) {\n      scheme = 'RSAES-PKCS1-V1_5';\n    }\n\n    if(scheme === 'RSAES-PKCS1-V1_5') {\n      scheme = {\n        encode: function(m, key, pub) {\n          return _encodePkcs1_v1_5(m, key, 0x02).getBytes();\n        }\n      };\n    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {\n      scheme = {\n        encode: function(m, key) {\n          return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);\n        }\n      };\n    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {\n      scheme = { encode: function(e) { return e; } };\n    } else if(typeof scheme === 'string') {\n      throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n    }\n\n    // do scheme-based encoding then rsa encryption\n    var e = scheme.encode(data, key, true);\n    return pki.rsa.encrypt(e, key, true);\n  };\n\n  /**\n   * Verifies the given signature against the given digest.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the\n   * signature is an OCTET STRING that holds a DigestInfo.\n   *\n   * DigestInfo ::= SEQUENCE {\n   *   digestAlgorithm DigestAlgorithmIdentifier,\n   *   digest Digest\n   * }\n   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n   * Digest ::= OCTET STRING\n   *\n   * To perform PSS signature verification, provide an instance\n   * of Forge PSS object as the scheme parameter.\n   *\n   * @param digest the message digest hash to compare against the signature,\n   *          as a binary-encoded string.\n   * @param signature the signature to verify, as a binary-encoded string.\n   * @param scheme signature verification scheme to use:\n   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n   *          a Forge PSS object for RSASSA-PSS,\n   *          'NONE' or null for none, DigestInfo will not be expected, but\n   *            PKCS#1 v1.5 padding will still be used.\n   *\n   * @return true if the signature was verified, false if not.\n   */\n   key.verify = function(digest, signature, scheme) {\n     if(typeof scheme === 'string') {\n       scheme = scheme.toUpperCase();\n     } else if(scheme === undefined) {\n       scheme = 'RSASSA-PKCS1-V1_5';\n     }\n\n     if(scheme === 'RSASSA-PKCS1-V1_5') {\n       scheme = {\n         verify: function(digest, d) {\n           // remove padding\n           d = _decodePkcs1_v1_5(d, key, true);\n           // d is ASN.1 BER-encoded DigestInfo\n           var obj = asn1.fromDer(d);\n           // compare the given digest to the decrypted one\n           return digest === obj.value[1].value;\n         }\n       };\n     } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {\n       scheme = {\n         verify: function(digest, d) {\n           // remove padding\n           d = _decodePkcs1_v1_5(d, key, true);\n           return digest === d;\n         }\n       };\n     }\n\n     // do rsa decryption w/o any decoding, then verify -- which does decoding\n     var d = pki.rsa.decrypt(signature, key, true, false);\n     return scheme.verify(digest, d, key.n.bitLength());\n  };\n\n  return key;\n};\n\n/**\n * Sets an RSA private key from BigIntegers modulus, exponent, primes,\n * prime exponents, and modular multiplicative inverse.\n *\n * @param n the modulus.\n * @param e the public exponent.\n * @param d the private exponent ((inverse of e) mod n).\n * @param p the first prime.\n * @param q the second prime.\n * @param dP exponent1 (d mod (p-1)).\n * @param dQ exponent2 (d mod (q-1)).\n * @param qInv ((inverse of q) mod p)\n *\n * @return the private key.\n */\npki.setRsaPrivateKey = pki.rsa.setPrivateKey = function(\n  n, e, d, p, q, dP, dQ, qInv) {\n  var key = {\n    n: n,\n    e: e,\n    d: d,\n    p: p,\n    q: q,\n    dP: dP,\n    dQ: dQ,\n    qInv: qInv\n  };\n\n  /**\n   * Decrypts the given data with this private key. The decryption scheme\n   * must match the one used to encrypt the data.\n   *\n   * @param data the byte string to decrypt.\n   * @param scheme the decryption scheme to use:\n   *          'RSAES-PKCS1-V1_5' (default),\n   *          'RSA-OAEP',\n   *          'RAW', 'NONE', or null to perform raw RSA decryption.\n   * @param schemeOptions any scheme-specific options.\n   *\n   * @return the decrypted byte string.\n   */\n  key.decrypt = function(data, scheme, schemeOptions) {\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if(scheme === undefined) {\n      scheme = 'RSAES-PKCS1-V1_5';\n    }\n\n    // do rsa decryption w/o any decoding\n    var d = pki.rsa.decrypt(data, key, false, false);\n\n    if(scheme === 'RSAES-PKCS1-V1_5') {\n      scheme = { decode: _decodePkcs1_v1_5 };\n    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {\n      scheme = {\n        decode: function(d, key) {\n          return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);\n        }\n      };\n    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {\n      scheme = { decode: function(d) { return d; } };\n    } else {\n      throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n    }\n\n    // decode according to scheme\n    return scheme.decode(d, key, false);\n  };\n\n  /**\n   * Signs the given digest, producing a signature.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide\n   * an instance of Forge PSS object as the scheme parameter.\n   *\n   * @param md the message digest object with the hash to sign.\n   * @param scheme the signature scheme to use:\n   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n   *          a Forge PSS object for RSASSA-PSS,\n   *          'NONE' or null for none, DigestInfo will not be used but\n   *            PKCS#1 v1.5 padding will still be used.\n   *\n   * @return the signature as a byte string.\n   */\n  key.sign = function(md, scheme) {\n    /* Note: The internal implementation of RSA operations is being\n      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy\n      code like the use of an encoding block identifier 'bt' will eventually\n      be removed. */\n\n    // private key operation\n    var bt = false;\n\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    }\n\n    if(scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {\n      scheme = { encode: emsaPkcs1v15encode };\n      bt = 0x01;\n    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {\n      scheme = { encode: function() { return md; } };\n      bt = 0x01;\n    }\n\n    // encode and then encrypt\n    var d = scheme.encode(md, key.n.bitLength());\n    return pki.rsa.encrypt(d, key, bt);\n  };\n\n  return key;\n};\n\n/**\n * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.\n *\n * @param rsaKey the ASN.1 RSAPrivateKey.\n *\n * @return the ASN.1 PrivateKeyInfo.\n */\npki.wrapRsaPrivateKey = function(rsaKey) {\n  // PrivateKeyInfo\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version (0)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(0).getBytes()),\n    // privateKeyAlgorithm\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(\n        asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n    ]),\n    // PrivateKey\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n      asn1.toDer(rsaKey).getBytes())\n    ]);\n};\n\n/**\n * Converts a private key from an ASN.1 object.\n *\n * @param obj the ASN.1 representation of a PrivateKeyInfo containing an\n *          RSAPrivateKey or an RSAPrivateKey.\n *\n * @return the private key.\n */\npki.privateKeyFromAsn1 = function(obj) {\n  // get PrivateKeyInfo\n  var capture = {};\n  var errors = [];\n  if(asn1.validate(obj, privateKeyValidator, capture, errors)) {\n    obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));\n  }\n\n  // get RSAPrivateKey\n  capture = {};\n  errors = [];\n  if(!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read private key. ' +\n      'ASN.1 object does not contain an RSAPrivateKey.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // Note: Version is currently ignored.\n  // capture.privateKeyVersion\n  // FIXME: inefficient, get a BigInteger that uses byte strings\n  var n, e, d, p, q, dP, dQ, qInv;\n  n = forge.util.createBuffer(capture.privateKeyModulus).toHex();\n  e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();\n  d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();\n  p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();\n  q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();\n  dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();\n  dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();\n  qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();\n\n  // set private key\n  return pki.setRsaPrivateKey(\n    new BigInteger(n, 16),\n    new BigInteger(e, 16),\n    new BigInteger(d, 16),\n    new BigInteger(p, 16),\n    new BigInteger(q, 16),\n    new BigInteger(dP, 16),\n    new BigInteger(dQ, 16),\n    new BigInteger(qInv, 16));\n};\n\n/**\n * Converts a private key to an ASN.1 RSAPrivateKey.\n *\n * @param key the private key.\n *\n * @return the ASN.1 representation of an RSAPrivateKey.\n */\npki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {\n  // RSAPrivateKey\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version (0 = only 2 primes, 1 multiple primes)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(0).getBytes()),\n    // modulus (n)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.n)),\n    // publicExponent (e)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.e)),\n    // privateExponent (d)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.d)),\n    // privateKeyPrime1 (p)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.p)),\n    // privateKeyPrime2 (q)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.q)),\n    // privateKeyExponent1 (dP)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.dP)),\n    // privateKeyExponent2 (dQ)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.dQ)),\n    // coefficient (qInv)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.qInv))\n  ]);\n};\n\n/**\n * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.\n *\n * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.\n *\n * @return the public key.\n */\npki.publicKeyFromAsn1 = function(obj) {\n  // get SubjectPublicKeyInfo\n  var capture = {};\n  var errors = [];\n  if(asn1.validate(obj, publicKeyValidator, capture, errors)) {\n    // get oid\n    var oid = asn1.derToOid(capture.publicKeyOid);\n    if(oid !== pki.oids.rsaEncryption) {\n      var error = new Error('Cannot read public key. Unknown OID.');\n      error.oid = oid;\n      throw error;\n    }\n    obj = capture.rsaPublicKey;\n  }\n\n  // get RSA params\n  errors = [];\n  if(!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read public key. ' +\n      'ASN.1 object does not contain an RSAPublicKey.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // FIXME: inefficient, get a BigInteger that uses byte strings\n  var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();\n  var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();\n\n  // set public key\n  return pki.setRsaPublicKey(\n    new BigInteger(n, 16),\n    new BigInteger(e, 16));\n};\n\n/**\n * Converts a public key to an ASN.1 SubjectPublicKeyInfo.\n *\n * @param key the public key.\n *\n * @return the asn1 representation of a SubjectPublicKeyInfo.\n */\npki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function(key) {\n  // SubjectPublicKeyInfo\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // AlgorithmIdentifier\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // algorithm\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),\n      // parameters (null)\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n    ]),\n    // subjectPublicKey\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [\n      pki.publicKeyToRSAPublicKey(key)\n    ])\n  ]);\n};\n\n/**\n * Converts a public key to an ASN.1 RSAPublicKey.\n *\n * @param key the public key.\n *\n * @return the asn1 representation of a RSAPublicKey.\n */\npki.publicKeyToRSAPublicKey = function(key) {\n  // RSAPublicKey\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // modulus (n)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.n)),\n    // publicExponent (e)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.e))\n  ]);\n};\n\n/**\n * Encodes a message using PKCS#1 v1.5 padding.\n *\n * @param m the message to encode.\n * @param key the RSA key to use.\n * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02\n *          (for encryption).\n *\n * @return the padded byte buffer.\n */\nfunction _encodePkcs1_v1_5(m, key, bt) {\n  var eb = forge.util.createBuffer();\n\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  /* use PKCS#1 v1.5 padding */\n  if(m.length > (k - 11)) {\n    var error = new Error('Message is too long for PKCS#1 v1.5 padding.');\n    error.length = m.length;\n    error.max = k - 11;\n    throw error;\n  }\n\n  /* A block type BT, a padding string PS, and the data D shall be\n    formatted into an octet string EB, the encryption block:\n\n    EB = 00 || BT || PS || 00 || D\n\n    The block type BT shall be a single octet indicating the structure of\n    the encryption block. For this version of the document it shall have\n    value 00, 01, or 02. For a private-key operation, the block type\n    shall be 00 or 01. For a public-key operation, it shall be 02.\n\n    The padding string PS shall consist of k-3-||D|| octets. For block\n    type 00, the octets shall have value 00; for block type 01, they\n    shall have value FF; and for block type 02, they shall be\n    pseudorandomly generated and nonzero. This makes the length of the\n    encryption block EB equal to k. */\n\n  // build the encryption block\n  eb.putByte(0x00);\n  eb.putByte(bt);\n\n  // create the padding\n  var padNum = k - 3 - m.length;\n  var padByte;\n  // private key op\n  if(bt === 0x00 || bt === 0x01) {\n    padByte = (bt === 0x00) ? 0x00 : 0xFF;\n    for(var i = 0; i < padNum; ++i) {\n      eb.putByte(padByte);\n    }\n  } else {\n    // public key op\n    // pad with random non-zero values\n    while(padNum > 0) {\n      var numZeros = 0;\n      var padBytes = forge.random.getBytes(padNum);\n      for(var i = 0; i < padNum; ++i) {\n        padByte = padBytes.charCodeAt(i);\n        if(padByte === 0) {\n          ++numZeros;\n        } else {\n          eb.putByte(padByte);\n        }\n      }\n      padNum = numZeros;\n    }\n  }\n\n  // zero followed by message\n  eb.putByte(0x00);\n  eb.putBytes(m);\n\n  return eb;\n}\n\n/**\n * Decodes a message using PKCS#1 v1.5 padding.\n *\n * @param em the message to decode.\n * @param key the RSA key to use.\n * @param pub true if the key is a public key, false if it is private.\n * @param ml the message length, if specified.\n *\n * @return the decoded bytes.\n */\nfunction _decodePkcs1_v1_5(em, key, pub, ml) {\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  /* It is an error if any of the following conditions occurs:\n\n    1. The encryption block EB cannot be parsed unambiguously.\n    2. The padding string PS consists of fewer than eight octets\n      or is inconsisent with the block type BT.\n    3. The decryption process is a public-key operation and the block\n      type BT is not 00 or 01, or the decryption process is a\n      private-key operation and the block type is not 02.\n   */\n\n  // parse the encryption block\n  var eb = forge.util.createBuffer(em);\n  var first = eb.getByte();\n  var bt = eb.getByte();\n  if(first !== 0x00 ||\n    (pub && bt !== 0x00 && bt !== 0x01) ||\n    (!pub && bt != 0x02) ||\n    (pub && bt === 0x00 && typeof(ml) === 'undefined')) {\n    throw new Error('Encryption block is invalid.');\n  }\n\n  var padNum = 0;\n  if(bt === 0x00) {\n    // check all padding bytes for 0x00\n    padNum = k - 3 - ml;\n    for(var i = 0; i < padNum; ++i) {\n      if(eb.getByte() !== 0x00) {\n        throw new Error('Encryption block is invalid.');\n      }\n    }\n  } else if(bt === 0x01) {\n    // find the first byte that isn't 0xFF, should be after all padding\n    padNum = 0;\n    while(eb.length() > 1) {\n      if(eb.getByte() !== 0xFF) {\n        --eb.read;\n        break;\n      }\n      ++padNum;\n    }\n  } else if(bt === 0x02) {\n    // look for 0x00 byte\n    padNum = 0;\n    while(eb.length() > 1) {\n      if(eb.getByte() === 0x00) {\n        --eb.read;\n        break;\n      }\n      ++padNum;\n    }\n  }\n\n  // zero must be 0x00 and padNum must be (k - 3 - message length)\n  var zero = eb.getByte();\n  if(zero !== 0x00 || padNum !== (k - 3 - eb.length())) {\n    throw new Error('Encryption block is invalid.');\n  }\n\n  return eb.getBytes();\n}\n\n/**\n * Runs the key-generation algorithm asynchronously, either in the background\n * via Web Workers, or using the main thread and setImmediate.\n *\n * @param state the key-pair generation state.\n * @param [options] options for key-pair generation:\n *          workerScript the worker script URL.\n *          workers the number of web workers (if supported) to use,\n *            (default: 2, -1 to use estimated cores minus one).\n *          workLoad the size of the work load, ie: number of possible prime\n *            numbers for each web worker to check per work assignment,\n *            (default: 100).\n * @param callback(err, keypair) called once the operation completes.\n */\nfunction _generateKeyPair(state, options, callback) {\n  if(typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  var opts = {\n    algorithm: {\n      name: options.algorithm || 'PRIMEINC',\n      options: {\n        workers: options.workers || 2,\n        workLoad: options.workLoad || 100,\n        workerScript: options.workerScript\n      }\n    }\n  };\n  if('prng' in options) {\n    opts.prng = options.prng;\n  }\n\n  generate();\n\n  function generate() {\n    // find p and then q (done in series to simplify)\n    getPrime(state.pBits, function(err, num) {\n      if(err) {\n        return callback(err);\n      }\n      state.p = num;\n      if(state.q !== null) {\n        return finish(err, state.q);\n      }\n      getPrime(state.qBits, finish);\n    });\n  }\n\n  function getPrime(bits, callback) {\n    forge.prime.generateProbablePrime(bits, opts, callback);\n  }\n\n  function finish(err, num) {\n    if(err) {\n      return callback(err);\n    }\n\n    // set q\n    state.q = num;\n\n    // ensure p is larger than q (swap them if not)\n    if(state.p.compareTo(state.q) < 0) {\n      var tmp = state.p;\n      state.p = state.q;\n      state.q = tmp;\n    }\n\n    // ensure p is coprime with e\n    if(state.p.subtract(BigInteger.ONE).gcd(state.e)\n      .compareTo(BigInteger.ONE) !== 0) {\n      state.p = null;\n      generate();\n      return;\n    }\n\n    // ensure q is coprime with e\n    if(state.q.subtract(BigInteger.ONE).gcd(state.e)\n      .compareTo(BigInteger.ONE) !== 0) {\n      state.q = null;\n      getPrime(state.qBits, finish);\n      return;\n    }\n\n    // compute phi: (p - 1)(q - 1) (Euler's totient function)\n    state.p1 = state.p.subtract(BigInteger.ONE);\n    state.q1 = state.q.subtract(BigInteger.ONE);\n    state.phi = state.p1.multiply(state.q1);\n\n    // ensure e and phi are coprime\n    if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n      // phi and e aren't coprime, so generate a new p and q\n      state.p = state.q = null;\n      generate();\n      return;\n    }\n\n    // create n, ensure n is has the right number of bits\n    state.n = state.p.multiply(state.q);\n    if(state.n.bitLength() !== state.bits) {\n      // failed, get new q\n      state.q = null;\n      getPrime(state.qBits, finish);\n      return;\n    }\n\n    // set keys\n    var d = state.e.modInverse(state.phi);\n    state.keys = {\n      privateKey: pki.rsa.setPrivateKey(\n        state.n, state.e, d, state.p, state.q,\n        d.mod(state.p1), d.mod(state.q1),\n        state.q.modInverse(state.p)),\n      publicKey: pki.rsa.setPublicKey(state.n, state.e)\n    };\n\n    callback(null, state.keys);\n  }\n}\n\n/**\n * Converts a positive BigInteger into 2's-complement big-endian bytes.\n *\n * @param b the big integer to convert.\n *\n * @return the bytes.\n */\nfunction _bnToBytes(b) {\n  // prepend 0x00 if first byte >= 0x80\n  var hex = b.toString(16);\n  if(hex[0] >= '8') {\n    hex = '00' + hex;\n  }\n  var bytes = forge.util.hexToBytes(hex);\n\n  // ensure integer is minimally-encoded\n  if(bytes.length > 1 &&\n    // leading 0x00 for positive integer\n    ((bytes.charCodeAt(0) === 0 &&\n    (bytes.charCodeAt(1) & 0x80) === 0) ||\n    // leading 0xFF for negative integer\n    (bytes.charCodeAt(0) === 0xFF &&\n    (bytes.charCodeAt(1) & 0x80) === 0x80))) {\n    return bytes.substr(1);\n  }\n  return bytes;\n}\n\n/**\n * Returns the required number of Miller-Rabin tests to generate a\n * prime with an error probability of (1/2)^80.\n *\n * See Handbook of Applied Cryptography Chapter 4, Table 4.4.\n *\n * @param bits the bit size.\n *\n * @return the required number of iterations.\n */\nfunction _getMillerRabinTests(bits) {\n  if(bits <= 100) return 27;\n  if(bits <= 150) return 18;\n  if(bits <= 200) return 15;\n  if(bits <= 250) return 12;\n  if(bits <= 300) return 9;\n  if(bits <= 350) return 8;\n  if(bits <= 400) return 7;\n  if(bits <= 500) return 6;\n  if(bits <= 600) return 5;\n  if(bits <= 800) return 4;\n  if(bits <= 1250) return 3;\n  return 2;\n}\n\n/**\n * Performs feature detection on the SubtleCrypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */\nfunction _detectSubtleCrypto(fn) {\n  return (typeof window !== 'undefined' &&\n    typeof window.crypto === 'object' &&\n    typeof window.crypto.subtle === 'object' &&\n    typeof window.crypto.subtle[fn] === 'function');\n}\n\n/**\n * Performs feature detection on the deprecated Microsoft Internet Explorer\n * outdated SubtleCrypto interface. This function should only be used after\n * checking for the modern, standard SubtleCrypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */\nfunction _detectSubtleMsCrypto(fn) {\n  return (typeof window !== 'undefined' &&\n    typeof window.msCrypto === 'object' &&\n    typeof window.msCrypto.subtle === 'object' &&\n    typeof window.msCrypto.subtle[fn] === 'function');\n}\n\nfunction _intToUint8Array(x) {\n  var bytes = forge.util.hexToBytes(x.toString(16));\n  var buffer = new Uint8Array(bytes.length);\n  for(var i = 0; i < bytes.length; ++i) {\n    buffer[i] = bytes.charCodeAt(i);\n  }\n  return buffer;\n}\n\nfunction _privateKeyFromJwk(jwk) {\n  if(jwk.kty !== 'RSA') {\n    throw new Error(\n      'Unsupported key algorithm \"' + jwk.kty + '\"; algorithm must be \"RSA\".');\n  }\n  return pki.setRsaPrivateKey(\n    _base64ToBigInt(jwk.n),\n    _base64ToBigInt(jwk.e),\n    _base64ToBigInt(jwk.d),\n    _base64ToBigInt(jwk.p),\n    _base64ToBigInt(jwk.q),\n    _base64ToBigInt(jwk.dp),\n    _base64ToBigInt(jwk.dq),\n    _base64ToBigInt(jwk.qi));\n}\n\nfunction _publicKeyFromJwk(jwk) {\n  if(jwk.kty !== 'RSA') {\n    throw new Error('Key algorithm must be \"RSA\".');\n  }\n  return pki.setRsaPublicKey(\n    _base64ToBigInt(jwk.n),\n    _base64ToBigInt(jwk.e));\n}\n\nfunction _base64ToBigInt(b64) {\n  return new BigInteger(forge.util.bytesToHex(forge.util.decode64(b64)), 16);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}