{"ast":null,"code":"'use strict';\n\nconst forge = require('node-forge');\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n};\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\nfunction pbkdf2(password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash];\n  if (!hasher) {\n    throw new Error(`Hash '${hash}' is unknown or not supported`);\n  }\n  const dek = forge.pkcs5.pbkdf2(password, salt, iterations, keySize, hasher);\n  return forge.util.encode64(dek);\n}\nmodule.exports = pbkdf2;","map":{"version":3,"names":["forge","require","hashName","sha1","pbkdf2","password","salt","iterations","keySize","hash","hasher","Error","dek","pkcs5","util","encode64","module","exports"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/libp2p-crypto/src/pbkdf2.js"],"sourcesContent":["'use strict'\n\nconst forge = require('node-forge')\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n}\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\nfunction pbkdf2 (password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash]\n  if (!hasher) {\n    throw new Error(`Hash '${hash}' is unknown or not supported`)\n  }\n  const dek = forge.pkcs5.pbkdf2(\n    password,\n    salt,\n    iterations,\n    keySize,\n    hasher)\n  return forge.util.encode64(dek)\n}\n\nmodule.exports = pbkdf2\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE,MAAM;EACZ,UAAU,EAAE,QAAQ;EACpB,UAAU,EAAE;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,CAAEC,QAAQ,EAAEC,IAAI,EAAEC,UAAU,EAAEC,OAAO,EAAEC,IAAI,EAAE;EAC1D,MAAMC,MAAM,GAAGR,QAAQ,CAACO,IAAI,CAAC;EAC7B,IAAI,CAACC,MAAM,EAAE;IACX,MAAM,IAAIC,KAAK,CAAE,SAAQF,IAAK,+BAA8B,CAAC;EAC/D;EACA,MAAMG,GAAG,GAAGZ,KAAK,CAACa,KAAK,CAACT,MAAM,CAC5BC,QAAQ,EACRC,IAAI,EACJC,UAAU,EACVC,OAAO,EACPE,MAAM,CAAC;EACT,OAAOV,KAAK,CAACc,IAAI,CAACC,QAAQ,CAACH,GAAG,CAAC;AACjC;AAEAI,MAAM,CAACC,OAAO,GAAGb,MAAM"},"metadata":{},"sourceType":"script"}