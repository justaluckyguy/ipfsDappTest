{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst dagPB = require('ipld-dag-pb');\nconst DAGNode = dagPB.DAGNode;\nconst DAGLink = dagPB.DAGLink;\nconst bs58 = require('bs58');\nconst CID = require('cids');\nconst LRU = require('lru-cache');\nconst lruOptions = {\n  max: 128\n};\nconst cache = LRU(lruOptions);\nmodule.exports = send => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!options) {\n      options = {};\n    }\n    let cidB58Str;\n    try {\n      cid = new CID(cid);\n      cidB58Str = cid.toBaseEncodedString();\n    } catch (err) {\n      return callback(err);\n    }\n    const node = cache.get(cidB58Str);\n    if (node) {\n      return callback(null, node);\n    }\n    send({\n      path: 'object/get',\n      args: cidB58Str,\n      qs: {\n        'data-encoding': 'base64'\n      }\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n      result.Data = Buffer.from(result.Data, 'base64');\n      const links = result.Links.map(l => {\n        return new DAGLink(l.Name, l.Size, Buffer.from(bs58.decode(l.Hash)));\n      });\n      DAGNode.create(result.Data, links, (err, node) => {\n        if (err) {\n          return callback(err);\n        }\n        cache.set(cidB58Str, node);\n        callback(null, node);\n      });\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","dagPB","DAGNode","DAGLink","bs58","CID","LRU","lruOptions","max","cache","module","exports","send","cid","options","callback","cidB58Str","toBaseEncodedString","err","node","get","path","args","qs","result","Data","Buffer","from","links","Links","map","l","Name","Size","decode","Hash","create","set"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipfs-api/src/object/get.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\nconst DAGLink = dagPB.DAGLink\nconst bs58 = require('bs58')\nconst CID = require('cids')\nconst LRU = require('lru-cache')\nconst lruOptions = {\n  max: 128\n}\n\nconst cache = LRU(lruOptions)\n\nmodule.exports = (send) => {\n  return promisify((cid, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    if (!options) {\n      options = {}\n    }\n\n    let cidB58Str\n\n    try {\n      cid = new CID(cid)\n      cidB58Str = cid.toBaseEncodedString()\n    } catch (err) {\n      return callback(err)\n    }\n\n    const node = cache.get(cidB58Str)\n\n    if (node) {\n      return callback(null, node)\n    }\n\n    send({\n      path: 'object/get',\n      args: cidB58Str,\n      qs: {\n        'data-encoding': 'base64'\n      }\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      result.Data = Buffer.from(result.Data, 'base64')\n\n      const links = result.Links.map((l) => {\n        return new DAGLink(l.Name, l.Size, Buffer.from(bs58.decode(l.Hash)))\n      })\n\n      DAGNode.create(result.Data, links, (err, node) => {\n        if (err) {\n          return callback(err)\n        }\n        cache.set(cidB58Str, node)\n        callback(null, node)\n      })\n    })\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAa,CAAC;AACpC,MAAME,OAAO,GAAGD,KAAK,CAACC,OAAO;AAC7B,MAAMC,OAAO,GAAGF,KAAK,CAACE,OAAO;AAC7B,MAAMC,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMK,GAAG,GAAGL,OAAO,CAAC,MAAM,CAAC;AAC3B,MAAMM,GAAG,GAAGN,OAAO,CAAC,WAAW,CAAC;AAChC,MAAMO,UAAU,GAAG;EACjBC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,KAAK,GAAGH,GAAG,CAACC,UAAU,CAAC;AAE7BG,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOb,SAAS,CAAC,CAACc,GAAG,EAAEC,OAAO,EAAEC,QAAQ,KAAK;IAC3C,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;MACjCC,QAAQ,GAAGD,OAAO;MAClBA,OAAO,GAAG,CAAC,CAAC;IACd;IAEA,IAAI,CAACA,OAAO,EAAE;MACZA,OAAO,GAAG,CAAC,CAAC;IACd;IAEA,IAAIE,SAAS;IAEb,IAAI;MACFH,GAAG,GAAG,IAAIR,GAAG,CAACQ,GAAG,CAAC;MAClBG,SAAS,GAAGH,GAAG,CAACI,mBAAmB,EAAE;IACvC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAOH,QAAQ,CAACG,GAAG,CAAC;IACtB;IAEA,MAAMC,IAAI,GAAGV,KAAK,CAACW,GAAG,CAACJ,SAAS,CAAC;IAEjC,IAAIG,IAAI,EAAE;MACR,OAAOJ,QAAQ,CAAC,IAAI,EAAEI,IAAI,CAAC;IAC7B;IAEAP,IAAI,CAAC;MACHS,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAEN,SAAS;MACfO,EAAE,EAAE;QACF,eAAe,EAAE;MACnB;IACF,CAAC,EAAE,CAACL,GAAG,EAAEM,MAAM,KAAK;MAClB,IAAIN,GAAG,EAAE;QACP,OAAOH,QAAQ,CAACG,GAAG,CAAC;MACtB;MAEAM,MAAM,CAACC,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACH,MAAM,CAACC,IAAI,EAAE,QAAQ,CAAC;MAEhD,MAAMG,KAAK,GAAGJ,MAAM,CAACK,KAAK,CAACC,GAAG,CAAEC,CAAC,IAAK;QACpC,OAAO,IAAI5B,OAAO,CAAC4B,CAAC,CAACC,IAAI,EAAED,CAAC,CAACE,IAAI,EAAEP,MAAM,CAACC,IAAI,CAACvB,IAAI,CAAC8B,MAAM,CAACH,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC;MACtE,CAAC,CAAC;MAEFjC,OAAO,CAACkC,MAAM,CAACZ,MAAM,CAACC,IAAI,EAAEG,KAAK,EAAE,CAACV,GAAG,EAAEC,IAAI,KAAK;QAChD,IAAID,GAAG,EAAE;UACP,OAAOH,QAAQ,CAACG,GAAG,CAAC;QACtB;QACAT,KAAK,CAAC4B,GAAG,CAACrB,SAAS,EAAEG,IAAI,CAAC;QAC1BJ,QAAQ,CAAC,IAAI,EAAEI,IAAI,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}