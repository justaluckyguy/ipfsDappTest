{"ast":null,"code":"// base-x encoding\n// Forked from https://github.com/cryptocoinjs/bs58\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nvar Buffer = require('safe-buffer').Buffer;\nmodule.exports = function base(ALPHABET) {\n  var ALPHABET_MAP = {};\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n\n  // pre-compute lookup table\n  for (var z = 0; z < ALPHABET.length; z++) {\n    var x = ALPHABET.charAt(z);\n    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous');\n    ALPHABET_MAP[x] = z;\n  }\n  function encode(source) {\n    if (source.length === 0) return '';\n    var digits = [0];\n    for (var i = 0; i < source.length; ++i) {\n      for (var j = 0, carry = source[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % BASE;\n        carry = carry / BASE | 0;\n      }\n      while (carry > 0) {\n        digits.push(carry % BASE);\n        carry = carry / BASE | 0;\n      }\n    }\n    var string = '';\n\n    // deal with leading zeros\n    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += LEADER;\n    // convert digits to a string\n    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]];\n    return string;\n  }\n  function decodeUnsafe(string) {\n    if (typeof string !== 'string') throw new TypeError('Expected String');\n    if (string.length === 0) return Buffer.allocUnsafe(0);\n    var bytes = [0];\n    for (var i = 0; i < string.length; i++) {\n      var value = ALPHABET_MAP[string[i]];\n      if (value === undefined) return;\n      for (var j = 0, carry = value; j < bytes.length; ++j) {\n        carry += bytes[j] * BASE;\n        bytes[j] = carry & 0xff;\n        carry >>= 8;\n      }\n      while (carry > 0) {\n        bytes.push(carry & 0xff);\n        carry >>= 8;\n      }\n    }\n\n    // deal with leading zeros\n    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {\n      bytes.push(0);\n    }\n    return Buffer.from(bytes.reverse());\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) return buffer;\n    throw new Error('Non-base' + BASE + ' character');\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n};","map":{"version":3,"names":["Buffer","require","module","exports","base","ALPHABET","ALPHABET_MAP","BASE","length","LEADER","charAt","z","x","undefined","TypeError","encode","source","digits","i","j","carry","push","string","k","q","decodeUnsafe","allocUnsafe","bytes","value","from","reverse","decode","buffer","Error"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipfs-api/node_modules/multibase/node_modules/base-x/index.js"],"sourcesContent":["// base-x encoding\n// Forked from https://github.com/cryptocoinjs/bs58\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  var ALPHABET_MAP = {}\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n\n  // pre-compute lookup table\n  for (var z = 0; z < ALPHABET.length; z++) {\n    var x = ALPHABET.charAt(z)\n\n    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n    ALPHABET_MAP[x] = z\n  }\n\n  function encode (source) {\n    if (source.length === 0) return ''\n\n    var digits = [0]\n    for (var i = 0; i < source.length; ++i) {\n      for (var j = 0, carry = source[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8\n        digits[j] = carry % BASE\n        carry = (carry / BASE) | 0\n      }\n\n      while (carry > 0) {\n        digits.push(carry % BASE)\n        carry = (carry / BASE) | 0\n      }\n    }\n\n    var string = ''\n\n    // deal with leading zeros\n    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += LEADER\n    // convert digits to a string\n    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]\n\n    return string\n  }\n\n  function decodeUnsafe (string) {\n    if (typeof string !== 'string') throw new TypeError('Expected String')\n    if (string.length === 0) return Buffer.allocUnsafe(0)\n\n    var bytes = [0]\n    for (var i = 0; i < string.length; i++) {\n      var value = ALPHABET_MAP[string[i]]\n      if (value === undefined) return\n\n      for (var j = 0, carry = value; j < bytes.length; ++j) {\n        carry += bytes[j] * BASE\n        bytes[j] = carry & 0xff\n        carry >>= 8\n      }\n\n      while (carry > 0) {\n        bytes.push(carry & 0xff)\n        carry >>= 8\n      }\n    }\n\n    // deal with leading zeros\n    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {\n      bytes.push(0)\n    }\n\n    return Buffer.from(bytes.reverse())\n  }\n\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}