{"ast":null,"code":"'use strict';\n\nconst map = require('lodash.map');\nconst filter = require('lodash.filter');\nconst convert = require('./convert');\nconst protocols = require('./protocols-table');\nconst varint = require('varint');\n\n// export codec\nmodule.exports = {\n  stringToStringTuples: stringToStringTuples,\n  stringTuplesToString: stringTuplesToString,\n  tuplesToStringTuples: tuplesToStringTuples,\n  stringTuplesToTuples: stringTuplesToTuples,\n  bufferToTuples: bufferToTuples,\n  tuplesToBuffer: tuplesToBuffer,\n  bufferToString: bufferToString,\n  stringToBuffer: stringToBuffer,\n  fromString: fromString,\n  fromBuffer: fromBuffer,\n  validateBuffer: validateBuffer,\n  isValidBuffer: isValidBuffer,\n  cleanPath: cleanPath,\n  ParseError: ParseError,\n  protoFromTuple: protoFromTuple,\n  sizeForAddr: sizeForAddr\n};\n\n// string -> [[str name, str addr]... ]\nfunction stringToStringTuples(str) {\n  const tuples = [];\n  const parts = str.split('/').slice(1); // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return [];\n  }\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p];\n    const proto = protocols(part);\n    if (proto.size === 0) {\n      tuples.push([part]);\n      continue;\n    }\n    p++; // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str);\n    }\n    tuples.push([part, parts[p]]);\n  }\n  return tuples;\n}\n\n// [[str name, str addr]... ] -> string\nfunction stringTuplesToString(tuples) {\n  const parts = [];\n  map(tuples, function (tup) {\n    const proto = protoFromTuple(tup);\n    parts.push(proto.name);\n    if (tup.length > 1) {\n      parts.push(tup[1]);\n    }\n  });\n  return '/' + parts.join('/');\n}\n\n// [[str name, str addr]... ] -> [[int code, Buffer]... ]\nfunction stringTuplesToTuples(tuples) {\n  return map(tuples, function (tup) {\n    if (!Array.isArray(tup)) {\n      tup = [tup];\n    }\n    const proto = protoFromTuple(tup);\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])];\n    }\n    return [proto.code];\n  });\n}\n\n// [[int code, Buffer]... ] -> [[str name, str addr]... ]\nfunction tuplesToStringTuples(tuples) {\n  return map(tuples, function (tup) {\n    const proto = protoFromTuple(tup);\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])];\n    }\n    return [proto.code];\n  });\n}\n\n// [[int code, Buffer ]... ] -> Buffer\nfunction tuplesToBuffer(tuples) {\n  return fromBuffer(Buffer.concat(map(tuples, function (tup) {\n    const proto = protoFromTuple(tup);\n    let buf = Buffer.from(varint.encode(proto.code));\n    if (tup.length > 1) {\n      buf = Buffer.concat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  })));\n}\nfunction sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    const size = varint.decode(addr);\n    return size + varint.decode.bytes;\n  }\n}\n\n// Buffer -> [[int code, Buffer ]... ]\nfunction bufferToTuples(buf) {\n  const tuples = [];\n  let i = 0;\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes;\n    const p = protocols(code);\n    const size = sizeForAddr(p, buf.slice(i + n));\n    if (size === 0) {\n      tuples.push([code]);\n      i += n;\n      continue;\n    }\n    const addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address buffer: ' + buf.toString('hex'));\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr]);\n  }\n  return tuples;\n}\n\n// Buffer -> String\nfunction bufferToString(buf) {\n  const a = bufferToTuples(buf);\n  const b = tuplesToStringTuples(a);\n  return stringTuplesToString(b);\n}\n\n// String -> Buffer\nfunction stringToBuffer(str) {\n  str = cleanPath(str);\n  const a = stringToStringTuples(str);\n  const b = stringTuplesToTuples(a);\n  return tuplesToBuffer(b);\n}\n\n// String -> Buffer\nfunction fromString(str) {\n  return stringToBuffer(str);\n}\n\n// Buffer -> Buffer\nfunction fromBuffer(buf) {\n  const err = validateBuffer(buf);\n  if (err) throw err;\n  return Buffer.from(buf); // copy\n}\n\nfunction validateBuffer(buf) {\n  try {\n    bufferToTuples(buf); // try to parse. will throw if breaks\n  } catch (err) {\n    return err;\n  }\n}\nfunction isValidBuffer(buf) {\n  return validateBuffer(buf) === undefined;\n}\nfunction cleanPath(str) {\n  return '/' + filter(str.trim().split('/')).join('/');\n}\nfunction ParseError(str) {\n  return new Error('Error parsing address: ' + str);\n}\nfunction protoFromTuple(tup) {\n  const proto = protocols(tup[0]);\n  return proto;\n}","map":{"version":3,"names":["map","require","filter","convert","protocols","varint","module","exports","stringToStringTuples","stringTuplesToString","tuplesToStringTuples","stringTuplesToTuples","bufferToTuples","tuplesToBuffer","bufferToString","stringToBuffer","fromString","fromBuffer","validateBuffer","isValidBuffer","cleanPath","ParseError","protoFromTuple","sizeForAddr","str","tuples","parts","split","slice","length","p","part","proto","size","push","tup","name","join","Array","isArray","code","toBuffer","toString","Buffer","concat","buf","from","encode","addr","decode","bytes","i","n","a","b","err","undefined","trim","Error"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/peer-info/node_modules/multiaddr/src/codec.js"],"sourcesContent":["'use strict'\n\nconst map = require('lodash.map')\nconst filter = require('lodash.filter')\nconst convert = require('./convert')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\n\n// export codec\nmodule.exports = {\n  stringToStringTuples: stringToStringTuples,\n  stringTuplesToString: stringTuplesToString,\n\n  tuplesToStringTuples: tuplesToStringTuples,\n  stringTuplesToTuples: stringTuplesToTuples,\n\n  bufferToTuples: bufferToTuples,\n  tuplesToBuffer: tuplesToBuffer,\n\n  bufferToString: bufferToString,\n  stringToBuffer: stringToBuffer,\n\n  fromString: fromString,\n  fromBuffer: fromBuffer,\n  validateBuffer: validateBuffer,\n  isValidBuffer: isValidBuffer,\n  cleanPath: cleanPath,\n\n  ParseError: ParseError,\n  protoFromTuple: protoFromTuple,\n\n  sizeForAddr: sizeForAddr\n}\n\n// string -> [[str name, str addr]... ]\nfunction stringToStringTuples (str) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = protocols(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\nfunction stringTuplesToString (tuples) {\n  const parts = []\n  map(tuples, function (tup) {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n  })\n\n  return '/' + parts.join('/')\n}\n\n// [[str name, str addr]... ] -> [[int code, Buffer]... ]\nfunction stringTuplesToTuples (tuples) {\n  return map(tuples, function (tup) {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer]... ] -> [[str name, str addr]... ]\nfunction tuplesToStringTuples (tuples) {\n  return map(tuples, function (tup) {\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer ]... ] -> Buffer\nfunction tuplesToBuffer (tuples) {\n  return fromBuffer(Buffer.concat(map(tuples, function (tup) {\n    const proto = protoFromTuple(tup)\n    let buf = Buffer.from(varint.encode(proto.code))\n\n    if (tup.length > 1) {\n      buf = Buffer.concat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\nfunction sizeForAddr (p, addr) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n// Buffer -> [[int code, Buffer ]... ]\nfunction bufferToTuples (buf) {\n  const tuples = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address buffer: ' + buf.toString('hex'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Buffer -> String\nfunction bufferToString (buf) {\n  const a = bufferToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Buffer\nfunction stringToBuffer (str) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBuffer(b)\n}\n\n// String -> Buffer\nfunction fromString (str) {\n  return stringToBuffer(str)\n}\n\n// Buffer -> Buffer\nfunction fromBuffer (buf) {\n  const err = validateBuffer(buf)\n  if (err) throw err\n  return Buffer.from(buf) // copy\n}\n\nfunction validateBuffer (buf) {\n  try {\n    bufferToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\nfunction isValidBuffer (buf) {\n  return validateBuffer(buf) === undefined\n}\n\nfunction cleanPath (str) {\n  return '/' + filter(str.trim().split('/')).join('/')\n}\n\nfunction ParseError (str) {\n  return new Error('Error parsing address: ' + str)\n}\n\nfunction protoFromTuple (tup) {\n  const proto = protocols(tup[0])\n  return proto\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}