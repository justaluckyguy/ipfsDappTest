{"ast":null,"code":"'use strict';\n\nconst map = require('lodash.map');\nfunction Protocols(proto) {\n  if (typeof proto === 'number') {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto];\n    }\n    throw new Error('no protocol with code: ' + proto);\n  } else if (typeof proto === 'string' || proto instanceof String) {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto];\n    }\n    throw new Error('no protocol with name: ' + proto);\n  }\n  throw new Error('invalid protocol id type: ' + proto);\n}\nconst V = -1;\nProtocols.lengthPrefixedVarSize = V;\nProtocols.V = V;\nProtocols.table = [[4, 32, 'ip4'], [6, 16, 'tcp'], [17, 16, 'udp'], [33, 16, 'dccp'], [41, 128, 'ip6'], [54, V, 'dns4', 'resolvable'], [55, V, 'dns6', 'resolvable'], [56, V, 'dnsaddr', 'resolvable'], [132, 16, 'sctp'],\n// all of the below use varint for size\n[302, 0, 'utp'], [421, Protocols.lengthPrefixedVarSize, 'ipfs'], [480, 0, 'http'], [443, 0, 'https'], [460, 0, 'quic'], [477, 0, 'ws'], [478, 0, 'wss'], [479, 0, 'p2p-websocket-star'], [275, 0, 'p2p-webrtc-star'], [276, 0, 'p2p-webrtc-direct'], [290, 0, 'p2p-circuit']];\nProtocols.names = {};\nProtocols.codes = {};\n\n// populate tables\nmap(Protocols.table, function (row) {\n  const proto = p.apply(null, row);\n  Protocols.codes[proto.code] = proto;\n  Protocols.names[proto.name] = proto;\n});\nProtocols.object = p;\nfunction p(code, size, name, resolvable) {\n  return {\n    code: code,\n    size: size,\n    name: name,\n    resolvable: Boolean(resolvable)\n  };\n}\nmodule.exports = Protocols;","map":{"version":3,"names":["map","require","Protocols","proto","codes","Error","String","names","V","lengthPrefixedVarSize","table","row","p","apply","code","name","object","size","resolvable","Boolean","module","exports"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/multiaddr/src/protocols-table.js"],"sourcesContent":["'use strict'\n\nconst map = require('lodash.map')\n\nfunction Protocols (proto) {\n  if (typeof (proto) === 'number') {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto]\n    }\n\n    throw new Error('no protocol with code: ' + proto)\n  } else if (typeof (proto) === 'string' || proto instanceof String) {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto]\n    }\n\n    throw new Error('no protocol with name: ' + proto)\n  }\n\n  throw new Error('invalid protocol id type: ' + proto)\n}\n\nconst V = -1\nProtocols.lengthPrefixedVarSize = V\nProtocols.V = V\n\nProtocols.table = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [17, 16, 'udp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [54, V, 'dns4', 'resolvable'],\n  [55, V, 'dns6', 'resolvable'],\n  [56, V, 'dnsaddr', 'resolvable'],\n  [132, 16, 'sctp'],\n  // all of the below use varint for size\n  [302, 0, 'utp'],\n  [421, Protocols.lengthPrefixedVarSize, 'ipfs'],\n  [480, 0, 'http'],\n  [443, 0, 'https'],\n  [460, 0, 'quic'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [290, 0, 'p2p-circuit']\n]\n\nProtocols.names = {}\nProtocols.codes = {}\n\n// populate tables\nmap(Protocols.table, function (row) {\n  const proto = p.apply(null, row)\n  Protocols.codes[proto.code] = proto\n  Protocols.names[proto.name] = proto\n})\n\nProtocols.object = p\n\nfunction p (code, size, name, resolvable) {\n  return {\n    code: code,\n    size: size,\n    name: name,\n    resolvable: Boolean(resolvable)\n  }\n}\n\nmodule.exports = Protocols\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,YAAY,CAAC;AAEjC,SAASC,SAAS,CAAEC,KAAK,EAAE;EACzB,IAAI,OAAQA,KAAM,KAAK,QAAQ,EAAE;IAC/B,IAAID,SAAS,CAACE,KAAK,CAACD,KAAK,CAAC,EAAE;MAC1B,OAAOD,SAAS,CAACE,KAAK,CAACD,KAAK,CAAC;IAC/B;IAEA,MAAM,IAAIE,KAAK,CAAC,yBAAyB,GAAGF,KAAK,CAAC;EACpD,CAAC,MAAM,IAAI,OAAQA,KAAM,KAAK,QAAQ,IAAIA,KAAK,YAAYG,MAAM,EAAE;IACjE,IAAIJ,SAAS,CAACK,KAAK,CAACJ,KAAK,CAAC,EAAE;MAC1B,OAAOD,SAAS,CAACK,KAAK,CAACJ,KAAK,CAAC;IAC/B;IAEA,MAAM,IAAIE,KAAK,CAAC,yBAAyB,GAAGF,KAAK,CAAC;EACpD;EAEA,MAAM,IAAIE,KAAK,CAAC,4BAA4B,GAAGF,KAAK,CAAC;AACvD;AAEA,MAAMK,CAAC,GAAG,CAAC,CAAC;AACZN,SAAS,CAACO,qBAAqB,GAAGD,CAAC;AACnCN,SAAS,CAACM,CAAC,GAAGA,CAAC;AAEfN,SAAS,CAACQ,KAAK,GAAG,CAChB,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EACd,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EACd,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,EACf,CAAC,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,EAChB,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,EAChB,CAAC,EAAE,EAAEF,CAAC,EAAE,MAAM,EAAE,YAAY,CAAC,EAC7B,CAAC,EAAE,EAAEA,CAAC,EAAE,MAAM,EAAE,YAAY,CAAC,EAC7B,CAAC,EAAE,EAAEA,CAAC,EAAE,SAAS,EAAE,YAAY,CAAC,EAChC,CAAC,GAAG,EAAE,EAAE,EAAE,MAAM,CAAC;AACjB;AACA,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,EACf,CAAC,GAAG,EAAEN,SAAS,CAACO,qBAAqB,EAAE,MAAM,CAAC,EAC9C,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC,EAChB,CAAC,GAAG,EAAE,CAAC,EAAE,OAAO,CAAC,EACjB,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC,EAChB,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,EACd,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,EACf,CAAC,GAAG,EAAE,CAAC,EAAE,oBAAoB,CAAC,EAC9B,CAAC,GAAG,EAAE,CAAC,EAAE,iBAAiB,CAAC,EAC3B,CAAC,GAAG,EAAE,CAAC,EAAE,mBAAmB,CAAC,EAC7B,CAAC,GAAG,EAAE,CAAC,EAAE,aAAa,CAAC,CACxB;AAEDP,SAAS,CAACK,KAAK,GAAG,CAAC,CAAC;AACpBL,SAAS,CAACE,KAAK,GAAG,CAAC,CAAC;;AAEpB;AACAJ,GAAG,CAACE,SAAS,CAACQ,KAAK,EAAE,UAAUC,GAAG,EAAE;EAClC,MAAMR,KAAK,GAAGS,CAAC,CAACC,KAAK,CAAC,IAAI,EAAEF,GAAG,CAAC;EAChCT,SAAS,CAACE,KAAK,CAACD,KAAK,CAACW,IAAI,CAAC,GAAGX,KAAK;EACnCD,SAAS,CAACK,KAAK,CAACJ,KAAK,CAACY,IAAI,CAAC,GAAGZ,KAAK;AACrC,CAAC,CAAC;AAEFD,SAAS,CAACc,MAAM,GAAGJ,CAAC;AAEpB,SAASA,CAAC,CAAEE,IAAI,EAAEG,IAAI,EAAEF,IAAI,EAAEG,UAAU,EAAE;EACxC,OAAO;IACLJ,IAAI,EAAEA,IAAI;IACVG,IAAI,EAAEA,IAAI;IACVF,IAAI,EAAEA,IAAI;IACVG,UAAU,EAAEC,OAAO,CAACD,UAAU;EAChC,CAAC;AACH;AAEAE,MAAM,CAACC,OAAO,GAAGnB,SAAS"},"metadata":{},"sourceType":"script"}