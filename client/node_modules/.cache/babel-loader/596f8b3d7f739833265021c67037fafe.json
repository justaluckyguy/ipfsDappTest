{"ast":null,"code":"'use strict';\n\nvar constants4 = require('../v4/constants.js');\nvar helpers = require('./helpers.js');\nvar sprintf = require('sprintf-js').sprintf;\n\n/**\n * @returns {String} the address in link form with a default port of 80\n */\nexports.href = function (optionalPort) {\n  if (optionalPort === undefined) {\n    optionalPort = '';\n  } else {\n    optionalPort = sprintf(':%s', optionalPort);\n  }\n  return sprintf('http://[%s]%s/', this.correctForm(), optionalPort);\n};\n\n/**\n * @returns {String} a link suitable for conveying the address via a URL hash\n */\nexports.link = function (options) {\n  if (!options) {\n    options = {};\n  }\n  if (options.className === undefined) {\n    options.className = '';\n  }\n  if (options.prefix === undefined) {\n    options.prefix = '/#address=';\n  }\n  if (options.v4 === undefined) {\n    options.v4 = false;\n  }\n  var formFunction = this.correctForm;\n  if (options.v4) {\n    formFunction = this.to4in6;\n  }\n  if (options.className) {\n    return sprintf('<a href=\"%1$s%2$s\" class=\"%3$s\">%2$s</a>', options.prefix, formFunction.call(this), options.className);\n  }\n  return sprintf('<a href=\"%1$s%2$s\">%2$s</a>', options.prefix, formFunction.call(this));\n};\n\n/**\n * Groups an address\n * @returns {String}\n */\nexports.group = function () {\n  var address4 = this.address.match(constants4.RE_ADDRESS);\n  var i;\n  if (address4) {\n    // The IPv4 case\n    var segments = address4[0].split('.');\n    this.address = this.address.replace(constants4.RE_ADDRESS, sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>' + '.' + '<span class=\"hover-group group-v4 group-7\">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));\n  }\n  if (this.elidedGroups === 0) {\n    // The simple case\n    return helpers.simpleGroup(this.address);\n  }\n\n  // The elided case\n  var output = [];\n  var halves = this.address.split('::');\n  if (halves[0].length) {\n    output.push(helpers.simpleGroup(halves[0]));\n  } else {\n    output.push('');\n  }\n  var classes = ['hover-group'];\n  for (i = this.elisionBegin; i < this.elisionBegin + this.elidedGroups; i++) {\n    classes.push(sprintf('group-%d', i));\n  }\n  output.push(sprintf('<span class=\"%s\"></span>', classes.join(' ')));\n  if (halves[1].length) {\n    output.push(helpers.simpleGroup(halves[1], this.elisionEnd));\n  } else {\n    output.push('');\n  }\n  return output.join(':');\n};","map":{"version":3,"names":["constants4","require","helpers","sprintf","exports","href","optionalPort","undefined","correctForm","link","options","className","prefix","v4","formFunction","to4in6","call","group","address4","address","match","RE_ADDRESS","i","segments","split","replace","slice","join","elidedGroups","simpleGroup","output","halves","length","push","classes","elisionBegin","elisionEnd"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ip-address/lib/v6/html.js"],"sourcesContent":["'use strict';\n\nvar constants4 = require('../v4/constants.js');\nvar helpers = require('./helpers.js');\nvar sprintf = require('sprintf-js').sprintf;\n\n/**\n * @returns {String} the address in link form with a default port of 80\n */\nexports.href = function (optionalPort) {\n  if (optionalPort === undefined) {\n    optionalPort = '';\n  } else {\n    optionalPort = sprintf(':%s', optionalPort);\n  }\n\n  return sprintf('http://[%s]%s/', this.correctForm(), optionalPort);\n};\n\n/**\n * @returns {String} a link suitable for conveying the address via a URL hash\n */\nexports.link = function (options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (options.className === undefined) {\n    options.className = '';\n  }\n\n  if (options.prefix === undefined) {\n    options.prefix = '/#address=';\n  }\n\n  if (options.v4 === undefined) {\n    options.v4 = false;\n  }\n\n  var formFunction = this.correctForm;\n\n  if (options.v4) {\n    formFunction = this.to4in6;\n  }\n\n  if (options.className) {\n    return sprintf('<a href=\"%1$s%2$s\" class=\"%3$s\">%2$s</a>',\n      options.prefix, formFunction.call(this), options.className);\n  }\n\n  return sprintf('<a href=\"%1$s%2$s\">%2$s</a>', options.prefix,\n    formFunction.call(this));\n};\n\n/**\n * Groups an address\n * @returns {String}\n */\nexports.group = function () {\n  var address4 = this.address.match(constants4.RE_ADDRESS);\n  var i;\n\n  if (address4) {\n    // The IPv4 case\n    var segments = address4[0].split('.');\n\n    this.address = this.address.replace(constants4.RE_ADDRESS,\n      sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>' +\n        '.' +\n        '<span class=\"hover-group group-v4 group-7\">%s</span>',\n        segments.slice(0, 2).join('.'),\n        segments.slice(2, 4).join('.')));\n  }\n\n  if (this.elidedGroups === 0) {\n    // The simple case\n    return helpers.simpleGroup(this.address);\n  }\n\n  // The elided case\n  var output = [];\n\n  var halves = this.address.split('::');\n\n  if (halves[0].length) {\n    output.push(helpers.simpleGroup(halves[0]));\n  } else {\n    output.push('');\n  }\n\n  var classes = ['hover-group'];\n\n  for (i = this.elisionBegin;\n       i < this.elisionBegin + this.elidedGroups; i++) {\n    classes.push(sprintf('group-%d', i));\n  }\n\n  output.push(sprintf('<span class=\"%s\"></span>', classes.join(' ')));\n\n  if (halves[1].length) {\n    output.push(helpers.simpleGroup(halves[1], this.elisionEnd));\n  } else {\n    output.push('');\n  }\n\n  return output.join(':');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}