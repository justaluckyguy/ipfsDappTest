{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst ConcatStream = require('concat-stream');\nconst once = require('once');\nconst isStream = require('is-stream');\nconst OtherBuffer = require('buffer').Buffer;\nconst isSource = require('is-pull-stream').isSource;\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\nconst SendFilesStream = require('../utils/send-files-stream');\nmodule.exports = send => {\n  const createAddStream = SendFilesStream(send, 'add');\n  const add = promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = null;\n    }\n    const callback = once(_callback);\n    if (!options) {\n      options = {};\n    }\n    options.converter = FileResultStreamConverter;\n    const ok = Buffer.isBuffer(_files) || isStream.readable(_files) || Array.isArray(_files) || OtherBuffer.isBuffer(_files) || typeof _files === 'object' || isSource(_files);\n    if (!ok) {\n      return callback(new Error('first arg must be a buffer, readable stream, pull stream, an object or array of objects'));\n    }\n    const files = [].concat(_files);\n    const stream = createAddStream({\n      qs: options\n    });\n    const concat = ConcatStream(result => callback(null, result));\n    stream.once('error', callback);\n    stream.pipe(concat);\n    files.forEach(file => stream.write(file));\n    stream.end();\n  });\n  return function () {\n    const args = Array.from(arguments);\n\n    // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({});\n    }\n    return add.apply(null, args);\n  };\n};","map":{"version":3,"names":["promisify","require","ConcatStream","once","isStream","OtherBuffer","Buffer","isSource","FileResultStreamConverter","SendFilesStream","module","exports","send","createAddStream","add","_files","options","_callback","callback","converter","ok","isBuffer","readable","Array","isArray","Error","files","concat","stream","qs","result","pipe","forEach","file","write","end","args","from","arguments","length","push","apply"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipfs-api/src/files/add.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst ConcatStream = require('concat-stream')\nconst once = require('once')\nconst isStream = require('is-stream')\nconst OtherBuffer = require('buffer').Buffer\nconst isSource = require('is-pull-stream').isSource\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter')\nconst SendFilesStream = require('../utils/send-files-stream')\n\nmodule.exports = (send) => {\n  const createAddStream = SendFilesStream(send, 'add')\n\n  const add = promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options\n      options = null\n    }\n\n    const callback = once(_callback)\n\n    if (!options) {\n      options = {}\n    }\n    options.converter = FileResultStreamConverter\n\n    const ok = Buffer.isBuffer(_files) ||\n               isStream.readable(_files) ||\n               Array.isArray(_files) ||\n               OtherBuffer.isBuffer(_files) ||\n               typeof _files === 'object' ||\n               isSource(_files)\n\n    if (!ok) {\n      return callback(new Error('first arg must be a buffer, readable stream, pull stream, an object or array of objects'))\n    }\n\n    const files = [].concat(_files)\n\n    const stream = createAddStream({ qs: options })\n    const concat = ConcatStream((result) => callback(null, result))\n    stream.once('error', callback)\n    stream.pipe(concat)\n\n    files.forEach((file) => stream.write(file))\n    stream.end()\n  })\n\n  return function () {\n    const args = Array.from(arguments)\n\n    // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({})\n    }\n\n    return add.apply(null, args)\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC7C,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMI,WAAW,GAAGJ,OAAO,CAAC,QAAQ,CAAC,CAACK,MAAM;AAC5C,MAAMC,QAAQ,GAAGN,OAAO,CAAC,gBAAgB,CAAC,CAACM,QAAQ;AACnD,MAAMC,yBAAyB,GAAGP,OAAO,CAAC,uCAAuC,CAAC;AAClF,MAAMQ,eAAe,GAAGR,OAAO,CAAC,4BAA4B,CAAC;AAE7DS,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,MAAMC,eAAe,GAAGJ,eAAe,CAACG,IAAI,EAAE,KAAK,CAAC;EAEpD,MAAME,GAAG,GAAGd,SAAS,CAAC,CAACe,MAAM,EAAEC,OAAO,EAAEC,SAAS,KAAK;IACpD,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;MACjCC,SAAS,GAAGD,OAAO;MACnBA,OAAO,GAAG,IAAI;IAChB;IAEA,MAAME,QAAQ,GAAGf,IAAI,CAACc,SAAS,CAAC;IAEhC,IAAI,CAACD,OAAO,EAAE;MACZA,OAAO,GAAG,CAAC,CAAC;IACd;IACAA,OAAO,CAACG,SAAS,GAAGX,yBAAyB;IAE7C,MAAMY,EAAE,GAAGd,MAAM,CAACe,QAAQ,CAACN,MAAM,CAAC,IACvBX,QAAQ,CAACkB,QAAQ,CAACP,MAAM,CAAC,IACzBQ,KAAK,CAACC,OAAO,CAACT,MAAM,CAAC,IACrBV,WAAW,CAACgB,QAAQ,CAACN,MAAM,CAAC,IAC5B,OAAOA,MAAM,KAAK,QAAQ,IAC1BR,QAAQ,CAACQ,MAAM,CAAC;IAE3B,IAAI,CAACK,EAAE,EAAE;MACP,OAAOF,QAAQ,CAAC,IAAIO,KAAK,CAAC,yFAAyF,CAAC,CAAC;IACvH;IAEA,MAAMC,KAAK,GAAG,EAAE,CAACC,MAAM,CAACZ,MAAM,CAAC;IAE/B,MAAMa,MAAM,GAAGf,eAAe,CAAC;MAAEgB,EAAE,EAAEb;IAAQ,CAAC,CAAC;IAC/C,MAAMW,MAAM,GAAGzB,YAAY,CAAE4B,MAAM,IAAKZ,QAAQ,CAAC,IAAI,EAAEY,MAAM,CAAC,CAAC;IAC/DF,MAAM,CAACzB,IAAI,CAAC,OAAO,EAAEe,QAAQ,CAAC;IAC9BU,MAAM,CAACG,IAAI,CAACJ,MAAM,CAAC;IAEnBD,KAAK,CAACM,OAAO,CAAEC,IAAI,IAAKL,MAAM,CAACM,KAAK,CAACD,IAAI,CAAC,CAAC;IAC3CL,MAAM,CAACO,GAAG,EAAE;EACd,CAAC,CAAC;EAEF,OAAO,YAAY;IACjB,MAAMC,IAAI,GAAGb,KAAK,CAACc,IAAI,CAACC,SAAS,CAAC;;IAElC;IACA;IACA;IACA,IAAIF,IAAI,CAACG,MAAM,KAAK,CAAC,IAAIhC,QAAQ,CAAC6B,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1CA,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IACf;IAEA,OAAO1B,GAAG,CAAC2B,KAAK,CAAC,IAAI,EAAEL,IAAI,CAAC;EAC9B,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script"}