{"ast":null,"code":"'use strict';\n\nconst protons = require('protons');\nconst pb = protons(require('./unixfs.proto'));\n// encode/decode\nconst unixfsData = pb.Data;\n// const unixfsMetadata = pb.MetaData // encode/decode\n\nconst types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nconst dirTypes = ['directory', 'hamt-sharded-directory'];\nfunction Data(type, data) {\n  if (!(this instanceof Data)) {\n    return new Data(type, data);\n  }\n  if (types.indexOf(type) === -1) {\n    throw new Error('Type: ' + type + ' is not valid');\n  }\n  this.type = type;\n  this.data = data;\n  this.blockSizes = [];\n  this.addBlockSize = size => {\n    this.blockSizes.push(size);\n  };\n  this.removeBlockSize = index => {\n    this.blockSizes.splice(index, 1);\n  };\n\n  // data.length + blockSizes\n  this.fileSize = () => {\n    if (dirTypes.indexOf(this.type) >= 0) {\n      // dirs don't have file size\n      return undefined;\n    }\n    let sum = 0;\n    this.blockSizes.forEach(size => {\n      sum += size;\n    });\n    if (data) {\n      sum += data.length;\n    }\n    return sum;\n  };\n\n  // encode to protobuf\n  this.marshal = () => {\n    let type;\n    switch (this.type) {\n      case 'raw':\n        type = unixfsData.DataType.Raw;\n        break;\n      case 'directory':\n        type = unixfsData.DataType.Directory;\n        break;\n      case 'file':\n        type = unixfsData.DataType.File;\n        break;\n      case 'metadata':\n        type = unixfsData.DataType.Metadata;\n        break;\n      case 'symlink':\n        type = unixfsData.DataType.Symlink;\n        break;\n      case 'hamt-sharded-directory':\n        type = unixfsData.DataType.HAMTShard;\n        break;\n      default:\n        throw new Error(`Unkown type: \"${this.type}\"`);\n    }\n    let fileSize = this.fileSize();\n    let data = this.data;\n    if (!this.data || !this.data.length) {\n      data = undefined;\n    }\n    let blockSizes = this.blockSizes;\n    if (!this.blockSizes || !this.blockSizes.length) {\n      blockSizes = undefined;\n    }\n    return unixfsData.encode({\n      Type: type,\n      Data: data,\n      filesize: fileSize,\n      blocksizes: blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout\n    });\n  };\n}\n\n// decode from protobuf https://github.com/ipfs/go-ipfs/blob/master/unixfs/format.go#L24\nData.unmarshal = marsheled => {\n  const decoded = unixfsData.decode(marsheled);\n  if (!decoded.Data) {\n    decoded.Data = undefined;\n  }\n  const obj = new Data(types[decoded.Type], decoded.Data);\n  obj.blockSizes = decoded.blocksizes;\n  return obj;\n};\nexports = module.exports = Data;","map":{"version":3,"names":["protons","require","pb","unixfsData","Data","types","dirTypes","type","data","indexOf","Error","blockSizes","addBlockSize","size","push","removeBlockSize","index","splice","fileSize","undefined","sum","forEach","length","marshal","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","encode","Type","filesize","blocksizes","hashType","fanout","unmarshal","marsheled","decoded","decode","obj","exports","module"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipfs-unixfs/src/index.js"],"sourcesContent":["'use strict'\n\nconst protons = require('protons')\nconst pb = protons(require('./unixfs.proto'))\n// encode/decode\nconst unixfsData = pb.Data\n// const unixfsMetadata = pb.MetaData // encode/decode\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nfunction Data (type, data) {\n  if (!(this instanceof Data)) {\n    return new Data(type, data)\n  }\n  if (types.indexOf(type) === -1) {\n    throw new Error('Type: ' + type + ' is not valid')\n  }\n\n  this.type = type\n  this.data = data\n  this.blockSizes = []\n\n  this.addBlockSize = (size) => {\n    this.blockSizes.push(size)\n  }\n\n  this.removeBlockSize = (index) => {\n    this.blockSizes.splice(index, 1)\n  }\n\n  // data.length + blockSizes\n  this.fileSize = () => {\n    if (dirTypes.indexOf(this.type) >= 0) {\n      // dirs don't have file size\n      return undefined\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n    if (data) {\n      sum += data.length\n    }\n    return sum\n  }\n\n  // encode to protobuf\n  this.marshal = () => {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = unixfsData.DataType.Raw; break\n      case 'directory': type = unixfsData.DataType.Directory; break\n      case 'file': type = unixfsData.DataType.File; break\n      case 'metadata': type = unixfsData.DataType.Metadata; break\n      case 'symlink': type = unixfsData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = unixfsData.DataType.HAMTShard; break\n      default:\n        throw new Error(`Unkown type: \"${this.type}\"`)\n    }\n    let fileSize = this.fileSize()\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let blockSizes = this.blockSizes\n\n    if (!this.blockSizes || !this.blockSizes.length) {\n      blockSizes = undefined\n    }\n\n    return unixfsData.encode({\n      Type: type,\n      Data: data,\n      filesize: fileSize,\n      blocksizes: blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout\n    })\n  }\n}\n\n// decode from protobuf https://github.com/ipfs/go-ipfs/blob/master/unixfs/format.go#L24\nData.unmarshal = (marsheled) => {\n  const decoded = unixfsData.decode(marsheled)\n  if (!decoded.Data) {\n    decoded.Data = undefined\n  }\n  const obj = new Data(types[decoded.Type], decoded.Data)\n  obj.blockSizes = decoded.blocksizes\n  return obj\n}\n\nexports = module.exports = Data\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}