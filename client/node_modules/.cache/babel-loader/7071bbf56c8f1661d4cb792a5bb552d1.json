{"ast":null,"code":"'use strict';\n\nconst setImmediate = require('async/setImmediate');\nexports.toCallback = doWork => {\n  return function (input, callback) {\n    const done = (err, res) => setImmediate(() => {\n      callback(err, res);\n    });\n    let res;\n    try {\n      res = doWork(input);\n    } catch (err) {\n      done(err);\n      return;\n    }\n    done(null, res);\n  };\n};\nexports.toBuf = (doWork, other) => input => {\n  let result = doWork(input, other);\n  return Buffer.from(result, 'hex');\n};\nexports.fromString = (doWork, other) => _input => {\n  const input = Buffer.isBuffer(_input) ? _input.toString() : _input;\n  return doWork(input, other);\n};\nexports.fromNumberTo32BitBuf = (doWork, other) => input => {\n  let number = doWork(input, other);\n  const bytes = new Array(4);\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff;\n    number = number >> 8;\n  }\n  return Buffer.from(bytes);\n};","map":{"version":3,"names":["setImmediate","require","exports","toCallback","doWork","input","callback","done","err","res","toBuf","other","result","Buffer","from","fromString","_input","isBuffer","toString","fromNumberTo32BitBuf","number","bytes","Array","i"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/peer-info/node_modules/multihashing-async/src/utils.js"],"sourcesContent":["'use strict'\n\nconst setImmediate = require('async/setImmediate')\n\nexports.toCallback = (doWork) => {\n  return function (input, callback) {\n    const done = (err, res) => setImmediate(() => {\n      callback(err, res)\n    })\n\n    let res\n    try {\n      res = doWork(input)\n    } catch (err) {\n      done(err)\n      return\n    }\n\n    done(null, res)\n  }\n}\n\nexports.toBuf = (doWork, other) => (input) => {\n  let result = doWork(input, other)\n  return Buffer.from(result, 'hex')\n}\n\nexports.fromString = (doWork, other) => (_input) => {\n  const input = Buffer.isBuffer(_input) ? _input.toString() : _input\n  return doWork(input, other)\n}\n\nexports.fromNumberTo32BitBuf = (doWork, other) => (input) => {\n  let number = doWork(input, other)\n  const bytes = new Array(4)\n\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff\n    number = number >> 8\n  }\n\n  return Buffer.from(bytes)\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAElDC,OAAO,CAACC,UAAU,GAAIC,MAAM,IAAK;EAC/B,OAAO,UAAUC,KAAK,EAAEC,QAAQ,EAAE;IAChC,MAAMC,IAAI,GAAG,CAACC,GAAG,EAAEC,GAAG,KAAKT,YAAY,CAAC,MAAM;MAC5CM,QAAQ,CAACE,GAAG,EAAEC,GAAG,CAAC;IACpB,CAAC,CAAC;IAEF,IAAIA,GAAG;IACP,IAAI;MACFA,GAAG,GAAGL,MAAM,CAACC,KAAK,CAAC;IACrB,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZD,IAAI,CAACC,GAAG,CAAC;MACT;IACF;IAEAD,IAAI,CAAC,IAAI,EAAEE,GAAG,CAAC;EACjB,CAAC;AACH,CAAC;AAEDP,OAAO,CAACQ,KAAK,GAAG,CAACN,MAAM,EAAEO,KAAK,KAAMN,KAAK,IAAK;EAC5C,IAAIO,MAAM,GAAGR,MAAM,CAACC,KAAK,EAAEM,KAAK,CAAC;EACjC,OAAOE,MAAM,CAACC,IAAI,CAACF,MAAM,EAAE,KAAK,CAAC;AACnC,CAAC;AAEDV,OAAO,CAACa,UAAU,GAAG,CAACX,MAAM,EAAEO,KAAK,KAAMK,MAAM,IAAK;EAClD,MAAMX,KAAK,GAAGQ,MAAM,CAACI,QAAQ,CAACD,MAAM,CAAC,GAAGA,MAAM,CAACE,QAAQ,EAAE,GAAGF,MAAM;EAClE,OAAOZ,MAAM,CAACC,KAAK,EAAEM,KAAK,CAAC;AAC7B,CAAC;AAEDT,OAAO,CAACiB,oBAAoB,GAAG,CAACf,MAAM,EAAEO,KAAK,KAAMN,KAAK,IAAK;EAC3D,IAAIe,MAAM,GAAGhB,MAAM,CAACC,KAAK,EAAEM,KAAK,CAAC;EACjC,MAAMU,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC,CAAC;EAE1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BF,KAAK,CAACE,CAAC,CAAC,GAAGH,MAAM,GAAG,IAAI;IACxBA,MAAM,GAAGA,MAAM,IAAI,CAAC;EACtB;EAEA,OAAOP,MAAM,CAACC,IAAI,CAACO,KAAK,CAAC;AAC3B,CAAC"},"metadata":{},"sourceType":"script"}