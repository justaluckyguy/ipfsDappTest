{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\nconst dagPB = require('ipld-dag-pb');\nconst DAGNode = dagPB.DAGNode;\nconst Unixfs = require('ipfs-unixfs');\nmodule.exports = send => {\n  return promisify((template, callback) => {\n    if (typeof template === 'function') {\n      callback = template;\n      template = undefined;\n    }\n    send({\n      path: 'object/new',\n      args: template\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n      let data;\n      if (template) {\n        if (template !== 'unixfs-dir') {\n          return callback(new Error('unkown template: ' + template));\n        }\n        data = new Unixfs('directory').marshal();\n      } else {\n        data = Buffer.alloc(0);\n      }\n      DAGNode.create(data, (err, node) => {\n        if (err) {\n          return callback(err);\n        }\n        if (node.toJSON().multihash !== result.Hash) {\n          return callback(new Error('multihashes do not match'));\n        }\n        callback(null, node);\n      });\n    });\n  });\n};","map":{"version":3,"names":["promisify","require","dagPB","DAGNode","Unixfs","module","exports","send","template","callback","undefined","path","args","err","result","data","Error","marshal","Buffer","alloc","create","node","toJSON","multihash","Hash"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipfs-api/src/object/new.js"],"sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\nconst Unixfs = require('ipfs-unixfs')\n\nmodule.exports = (send) => {\n  return promisify((template, callback) => {\n    if (typeof template === 'function') {\n      callback = template\n      template = undefined\n    }\n    send({\n      path: 'object/new',\n      args: template\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      let data\n\n      if (template) {\n        if (template !== 'unixfs-dir') {\n          return callback(new Error('unkown template: ' + template))\n        }\n        data = (new Unixfs('directory')).marshal()\n      } else {\n        data = Buffer.alloc(0)\n      }\n\n      DAGNode.create(data, (err, node) => {\n        if (err) {\n          return callback(err)\n        }\n\n        if (node.toJSON().multihash !== result.Hash) {\n          return callback(new Error('multihashes do not match'))\n        }\n\n        callback(null, node)\n      })\n    })\n  })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAa,CAAC;AACpC,MAAME,OAAO,GAAGD,KAAK,CAACC,OAAO;AAC7B,MAAMC,MAAM,GAAGH,OAAO,CAAC,aAAa,CAAC;AAErCI,MAAM,CAACC,OAAO,GAAIC,IAAI,IAAK;EACzB,OAAOP,SAAS,CAAC,CAACQ,QAAQ,EAAEC,QAAQ,KAAK;IACvC,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;MAClCC,QAAQ,GAAGD,QAAQ;MACnBA,QAAQ,GAAGE,SAAS;IACtB;IACAH,IAAI,CAAC;MACHI,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAEJ;IACR,CAAC,EAAE,CAACK,GAAG,EAAEC,MAAM,KAAK;MAClB,IAAID,GAAG,EAAE;QACP,OAAOJ,QAAQ,CAACI,GAAG,CAAC;MACtB;MAEA,IAAIE,IAAI;MAER,IAAIP,QAAQ,EAAE;QACZ,IAAIA,QAAQ,KAAK,YAAY,EAAE;UAC7B,OAAOC,QAAQ,CAAC,IAAIO,KAAK,CAAC,mBAAmB,GAAGR,QAAQ,CAAC,CAAC;QAC5D;QACAO,IAAI,GAAI,IAAIX,MAAM,CAAC,WAAW,CAAC,CAAEa,OAAO,EAAE;MAC5C,CAAC,MAAM;QACLF,IAAI,GAAGG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MACxB;MAEAhB,OAAO,CAACiB,MAAM,CAACL,IAAI,EAAE,CAACF,GAAG,EAAEQ,IAAI,KAAK;QAClC,IAAIR,GAAG,EAAE;UACP,OAAOJ,QAAQ,CAACI,GAAG,CAAC;QACtB;QAEA,IAAIQ,IAAI,CAACC,MAAM,EAAE,CAACC,SAAS,KAAKT,MAAM,CAACU,IAAI,EAAE;UAC3C,OAAOf,QAAQ,CAAC,IAAIO,KAAK,CAAC,0BAA0B,CAAC,CAAC;QACxD;QAEAP,QAAQ,CAAC,IAAI,EAAEY,IAAI,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}