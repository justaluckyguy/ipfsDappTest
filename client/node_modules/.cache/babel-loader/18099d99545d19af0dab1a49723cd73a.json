{"ast":null,"code":"'use strict';\n\nconst map = require('lodash.map');\nconst extend = require('xtend');\nconst codec = require('./codec');\nconst protocols = require('./protocols-table');\nconst varint = require('varint');\nconst bs58 = require('bs58');\nconst withIs = require('class-is');\nconst NotImplemented = new Error('Sorry, Not Implemented Yet.');\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Buffer, String or another Multiaddr instance\n * public key.\n * @class Multiaddr\n * @param {(String|Buffer|Multiaddr)} addr - If String or Buffer, needs to adhere\n * to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n */\nconst Multiaddr = withIs.proto(function (addr) {\n  if (!(this instanceof Multiaddr)) {\n    return new Multiaddr(addr);\n  }\n\n  // default\n  if (addr == null) {\n    addr = '';\n  }\n  if (addr instanceof Buffer) {\n    /**\n     * @type {Buffer} - The raw bytes representing this multiaddress\n     */\n    this.buffer = codec.fromBuffer(addr);\n  } else if (typeof addr === 'string' || addr instanceof String) {\n    this.buffer = codec.fromString(addr);\n  } else if (addr.buffer && addr.protos && addr.protoCodes) {\n    // Multiaddr\n    this.buffer = codec.fromBuffer(addr.buffer); // validate + copy buffer\n  } else {\n    throw new Error('addr must be a string, Buffer, or another Multiaddr');\n  }\n}, {\n  className: 'Multiaddr',\n  symbolName: '@multiformats/js-multiaddr/multiaddr'\n});\n\n/**\n * Returns Multiaddr as a String\n *\n * @returns {String}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n * // '/ip4/127.0.0.1/tcp/4001'\n */\nMultiaddr.prototype.toString = function toString() {\n  return codec.bufferToString(this.buffer);\n};\n\n/**\n * Returns Multiaddr as a convinient options object to be used with net.createConnection\n *\n * @returns {{family: String, host: String, transport: String, port: String}}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n * // { family: 'ipv4', host: '127.0.0.1', transport: 'tcp', port: '4001' }\n */\nMultiaddr.prototype.toOptions = function toOptions() {\n  const opts = {};\n  const parsed = this.toString().split('/');\n  opts.family = parsed[1] === 'ip4' ? 'ipv4' : 'ipv6';\n  opts.host = parsed[2];\n  opts.transport = parsed[3];\n  opts.port = parsed[4];\n  return opts;\n};\n\n/**\n * Returns Multiaddr as a human-readable string\n *\n * @returns {String}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n */\nMultiaddr.prototype.inspect = function inspect() {\n  return '<Multiaddr ' + this.buffer.toString('hex') + ' - ' + codec.bufferToString(this.buffer) + '>';\n};\n\n/**\n * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n * left-to-right order. Each object contains the protocol code, protocol name,\n * and the size of its address space in bits.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @returns {Array.<Object>} protocols - All the protocols the address is composed of\n * @returns {Number} protocols[].code\n * @returns {Number} protocols[].size\n * @returns {String} protocols[].name\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n * // [ { code: 4, size: 32, name: 'ip4' },\n * //   { code: 6, size: 16, name: 'tcp' } ]\n */\nMultiaddr.prototype.protos = function protos() {\n  return map(this.protoCodes(), function (code) {\n    return extend(protocols(code));\n    // copy to prevent users from modifying the internal objs.\n  });\n};\n\n/**\n * Returns the codes of the protocols in left-to-right order.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @returns {Array.<Number>} protocol codes\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n * // [ 4, 6 ]\n */\nMultiaddr.prototype.protoCodes = function protoCodes() {\n  const codes = [];\n  const buf = this.buffer;\n  let i = 0;\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes;\n    const p = protocols(code);\n    const size = codec.sizeForAddr(p, buf.slice(i + n));\n    i += size + n;\n    codes.push(code);\n  }\n  return codes;\n};\n\n/**\n * Returns the names of the protocols in left-to-right order.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @return {Array.<String>} protocol names\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n * // [ 'ip4', 'tcp' ]\n */\nMultiaddr.prototype.protoNames = function protoNames() {\n  return map(this.protos(), function (proto) {\n    return proto.name;\n  });\n};\n\n/**\n * Returns a tuple of parts\n *\n * @return {Array.<Array>} tuples\n * @return {Number} tuples[].0 code of protocol\n * @return {Buffer} tuples[].1 contents of address\n * @example\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n */\nMultiaddr.prototype.tuples = function tuples() {\n  return codec.bufferToTuples(this.buffer);\n};\n\n/**\n * Returns a tuple of string/number parts\n *\n * @return {Array.<Array>} tuples\n * @return {Number} tuples[].0 code of protocol\n * @return {(String|Number)} tuples[].1 contents of address\n * @example\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n * // [ [ 4, '127.0.0.1' ], [ 6, 4001 ] ]\n */\nMultiaddr.prototype.stringTuples = function stringTuples() {\n  const t = codec.bufferToTuples(this.buffer);\n  return codec.tuplesToStringTuples(t);\n};\n\n/**\n * Encapsulates a Multiaddr in another Multiaddr\n *\n * @param {Multiaddr} addr - Multiaddr to add into this Multiaddr\n * @return {Multiaddr}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n *\n * mh3.toString()\n * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n */\nMultiaddr.prototype.encapsulate = function encapsulate(addr) {\n  addr = Multiaddr(addr);\n  return Multiaddr(this.toString() + addr.toString());\n};\n\n/**\n * Decapsulates a Multiaddr from another Multiaddr\n *\n * @param {Multiaddr} addr - Multiaddr to remove from this Multiaddr\n * @return {Multiaddr}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n *\n * mh3.decapsulate(mh2).toString()\n * // '/ip4/8.8.8.8/tcp/1080'\n */\nMultiaddr.prototype.decapsulate = function decapsulate(addr) {\n  addr = addr.toString();\n  const s = this.toString();\n  const i = s.lastIndexOf(addr);\n  if (i < 0) {\n    throw new Error('Address ' + this + ' does not contain subaddress: ' + addr);\n  }\n  return Multiaddr(s.slice(0, i));\n};\n\n/**\n * Extract the peerId if the multiaddr contains one\n *\n * @return {String|null} peerId - The id of the peer or null if invalid or missing from the ma\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n *\n * // should return QmValidBase58string or null if the id is missing or invalid\n * const peerId = mh1.getPeerId()\n */\nMultiaddr.prototype.getPeerId = function getPeerId() {\n  let b58str = null;\n  try {\n    b58str = this.stringTuples().filter(tuple => {\n      if (tuple[0] === protocols.names['ipfs'].code) {\n        return true;\n      }\n    })[0][1];\n    bs58.decode(b58str);\n  } catch (e) {\n    b58str = null;\n  }\n  return b58str;\n};\n\n/**\n * Checks if two Multiaddrs are the same\n *\n * @param {Multiaddr} addr\n * @return {Bool}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * mh1.equals(mh1)\n * // true\n *\n * mh1.equals(mh2)\n * // false\n */\nMultiaddr.prototype.equals = function equals(addr) {\n  return this.buffer.equals(addr.buffer);\n};\n\n/**\n * Gets a Multiaddrs node-friendly address object. Note that protocol information\n * is left out: in Node (and most network systems) the protocol is unknowable\n * given only the address.\n *\n * Has to be a ThinWaist Address, otherwise throws error\n *\n * @returns {{family: String, address: String, port: String}}\n * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n * // {family: 'IPv4', address: '127.0.0.1', port: '4001'}\n */\nMultiaddr.prototype.nodeAddress = function nodeAddress() {\n  if (!this.isThinWaistAddress()) {\n    throw new Error('Multiaddr must be \"thin waist\" address for nodeAddress.');\n  }\n  const codes = this.protoCodes();\n  const parts = this.toString().split('/').slice(1);\n  return {\n    family: codes[0] === 41 ? 'IPv6' : 'IPv4',\n    address: parts[1],\n    // ip addr\n    port: parts[3] // tcp or udp port\n  };\n};\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @param {String} addr\n * @param {String} transport\n * @returns {Multiaddr} multiaddr\n * @throws {Error} Throws error if addr is not truthy\n * @throws {Error} Throws error if transport is not truthy\n * @example\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n */\nMultiaddr.fromNodeAddress = function fromNodeAddress(addr, transport) {\n  if (!addr) throw new Error('requires node address object');\n  if (!transport) throw new Error('requires transport protocol');\n  const ip = addr.family === 'IPv6' ? 'ip6' : 'ip4';\n  return Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n};\n\n// TODO find a better example, not sure about it's good enough\n/**\n * Returns if a Multiaddr is a Thin Waist address or not.\n *\n * Thin Waist is if a Multiaddr adheres to the standard combination of:\n *\n * `{IPv4, IPv6}/{TCP, UDP}`\n *\n * @param {Multiaddr} [addr] - Defaults to using `this` instance\n * @returns {Boolean} isThinWaistAddress\n * @example\n * const mh1 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * const mh2 = Multiaddr('/ip4/192.168.2.1/tcp/5001')\n * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n * mh1.isThinWaistAddress()\n * // true\n * mh2.isThinWaistAddress()\n * // true\n * mh3.isThinWaistAddress()\n * // false\n */\nMultiaddr.prototype.isThinWaistAddress = function isThinWaistAddress(addr) {\n  const protos = (addr || this).protos();\n  if (protos.length !== 2) {\n    return false;\n  }\n  if (protos[0].code !== 4 && protos[0].code !== 41) {\n    return false;\n  }\n  if (protos[1].code !== 6 && protos[1].code !== 17) {\n    return false;\n  }\n  return true;\n};\n\n// TODO rename this to something else than \"stupid string\"\n/**\n * Converts a \"stupid string\" into a Multiaddr.\n *\n * Stupid string format:\n * ```\n * <proto><IPv>://<IP Addr>[:<proto port>]\n * udp4://1.2.3.4:5678\n * ```\n *\n * @param {String} [str] - String in the \"stupid\" format\n * @throws {NotImplemented}\n * @returns {undefined}\n * @todo Not Implemented yet\n */\nMultiaddr.prototype.fromStupidString = function fromStupidString(str) {\n  throw NotImplemented;\n};\n\n/**\n * Object containing table, names and codes of all supported protocols.\n * To get the protocol values from a Multiaddr, you can use\n * [`.protos()`](#multiaddrprotos),\n * [`.protoCodes()`](#multiaddrprotocodes) or\n * [`.protoNames()`](#multiaddrprotonames)\n *\n * @instance\n * @returns {{table: Array, names: Object, codes: Object}}\n *\n */\nMultiaddr.protocols = protocols;\n\n/**\n * Returns if something is a Multiaddr that is a name\n *\n * @param {Multiaddr} addr\n * @return {Bool} isName\n */\nMultiaddr.isName = function isName(addr) {\n  if (!Multiaddr.isMultiaddr(addr)) {\n    return false;\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some(proto => proto.resolvable);\n};\n\n/**\n * Returns an array of multiaddrs, by resolving the multiaddr that is a name\n *\n * @param {Multiaddr} addr\n *\n * @param {Function} callback\n * @return {Bool} isName\n */\nMultiaddr.resolve = function resolve(addr, callback) {\n  if (!Multiaddr.isMultiaddr(addr) || !Multiaddr.isName(addr)) {\n    return callback(new Error('not a valid name'));\n  }\n\n  /*\n   * Needs more consideration from spec design:\n   *   - what to return\n   *   - how to achieve it in the browser?\n   */\n  return callback(new Error('not implemented yet'));\n};\nexports = module.exports = Multiaddr;","map":{"version":3,"names":["map","require","extend","codec","protocols","varint","bs58","withIs","NotImplemented","Error","Multiaddr","proto","addr","Buffer","buffer","fromBuffer","String","fromString","protos","protoCodes","className","symbolName","prototype","toString","bufferToString","toOptions","opts","parsed","split","family","host","transport","port","inspect","code","codes","buf","i","length","decode","n","bytes","p","size","sizeForAddr","slice","push","protoNames","name","tuples","bufferToTuples","stringTuples","t","tuplesToStringTuples","encapsulate","decapsulate","s","lastIndexOf","getPeerId","b58str","filter","tuple","names","e","equals","nodeAddress","isThinWaistAddress","parts","address","fromNodeAddress","ip","join","fromStupidString","str","isName","isMultiaddr","some","resolvable","resolve","callback","exports","module"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/peer-info/node_modules/multiaddr/src/index.js"],"sourcesContent":["'use strict'\n\nconst map = require('lodash.map')\nconst extend = require('xtend')\nconst codec = require('./codec')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\nconst bs58 = require('bs58')\nconst withIs = require('class-is')\n\nconst NotImplemented = new Error('Sorry, Not Implemented Yet.')\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Buffer, String or another Multiaddr instance\n * public key.\n * @class Multiaddr\n * @param {(String|Buffer|Multiaddr)} addr - If String or Buffer, needs to adhere\n * to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n */\nconst Multiaddr = withIs.proto(function (addr) {\n  if (!(this instanceof Multiaddr)) {\n    return new Multiaddr(addr)\n  }\n\n  // default\n  if (addr == null) {\n    addr = ''\n  }\n\n  if (addr instanceof Buffer) {\n    /**\n     * @type {Buffer} - The raw bytes representing this multiaddress\n     */\n    this.buffer = codec.fromBuffer(addr)\n  } else if (typeof addr === 'string' || addr instanceof String) {\n    this.buffer = codec.fromString(addr)\n  } else if (addr.buffer && addr.protos && addr.protoCodes) { // Multiaddr\n    this.buffer = codec.fromBuffer(addr.buffer) // validate + copy buffer\n  } else {\n    throw new Error('addr must be a string, Buffer, or another Multiaddr')\n  }\n}, { className: 'Multiaddr', symbolName: '@multiformats/js-multiaddr/multiaddr' })\n\n/**\n * Returns Multiaddr as a String\n *\n * @returns {String}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n * // '/ip4/127.0.0.1/tcp/4001'\n */\nMultiaddr.prototype.toString = function toString () {\n  return codec.bufferToString(this.buffer)\n}\n\n/**\n * Returns Multiaddr as a convinient options object to be used with net.createConnection\n *\n * @returns {{family: String, host: String, transport: String, port: String}}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n * // { family: 'ipv4', host: '127.0.0.1', transport: 'tcp', port: '4001' }\n */\nMultiaddr.prototype.toOptions = function toOptions () {\n  const opts = {}\n  const parsed = this.toString().split('/')\n  opts.family = parsed[1] === 'ip4' ? 'ipv4' : 'ipv6'\n  opts.host = parsed[2]\n  opts.transport = parsed[3]\n  opts.port = parsed[4]\n  return opts\n}\n\n/**\n * Returns Multiaddr as a human-readable string\n *\n * @returns {String}\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n */\nMultiaddr.prototype.inspect = function inspect () {\n  return '<Multiaddr ' +\n    this.buffer.toString('hex') + ' - ' +\n    codec.bufferToString(this.buffer) + '>'\n}\n\n/**\n * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n * left-to-right order. Each object contains the protocol code, protocol name,\n * and the size of its address space in bits.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @returns {Array.<Object>} protocols - All the protocols the address is composed of\n * @returns {Number} protocols[].code\n * @returns {Number} protocols[].size\n * @returns {String} protocols[].name\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n * // [ { code: 4, size: 32, name: 'ip4' },\n * //   { code: 6, size: 16, name: 'tcp' } ]\n */\nMultiaddr.prototype.protos = function protos () {\n  return map(this.protoCodes(), function (code) {\n    return extend(protocols(code))\n    // copy to prevent users from modifying the internal objs.\n  })\n}\n\n/**\n * Returns the codes of the protocols in left-to-right order.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @returns {Array.<Number>} protocol codes\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n * // [ 4, 6 ]\n */\nMultiaddr.prototype.protoCodes = function protoCodes () {\n  const codes = []\n  const buf = this.buffer\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n    const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n    i += (size + n)\n    codes.push(code)\n  }\n\n  return codes\n}\n\n/**\n * Returns the names of the protocols in left-to-right order.\n * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n *\n * @return {Array.<String>} protocol names\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n * // [ 'ip4', 'tcp' ]\n */\nMultiaddr.prototype.protoNames = function protoNames () {\n  return map(this.protos(), function (proto) {\n    return proto.name\n  })\n}\n\n/**\n * Returns a tuple of parts\n *\n * @return {Array.<Array>} tuples\n * @return {Number} tuples[].0 code of protocol\n * @return {Buffer} tuples[].1 contents of address\n * @example\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n */\nMultiaddr.prototype.tuples = function tuples () {\n  return codec.bufferToTuples(this.buffer)\n}\n\n/**\n * Returns a tuple of string/number parts\n *\n * @return {Array.<Array>} tuples\n * @return {Number} tuples[].0 code of protocol\n * @return {(String|Number)} tuples[].1 contents of address\n * @example\n * Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n * // [ [ 4, '127.0.0.1' ], [ 6, 4001 ] ]\n */\nMultiaddr.prototype.stringTuples = function stringTuples () {\n  const t = codec.bufferToTuples(this.buffer)\n  return codec.tuplesToStringTuples(t)\n}\n\n/**\n * Encapsulates a Multiaddr in another Multiaddr\n *\n * @param {Multiaddr} addr - Multiaddr to add into this Multiaddr\n * @return {Multiaddr}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n *\n * mh3.toString()\n * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n */\nMultiaddr.prototype.encapsulate = function encapsulate (addr) {\n  addr = Multiaddr(addr)\n  return Multiaddr(this.toString() + addr.toString())\n}\n\n/**\n * Decapsulates a Multiaddr from another Multiaddr\n *\n * @param {Multiaddr} addr - Multiaddr to remove from this Multiaddr\n * @return {Multiaddr}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n *\n * mh3.decapsulate(mh2).toString()\n * // '/ip4/8.8.8.8/tcp/1080'\n */\nMultiaddr.prototype.decapsulate = function decapsulate (addr) {\n  addr = addr.toString()\n  const s = this.toString()\n  const i = s.lastIndexOf(addr)\n  if (i < 0) {\n    throw new Error('Address ' + this + ' does not contain subaddress: ' + addr)\n  }\n  return Multiaddr(s.slice(0, i))\n}\n\n/**\n * Extract the peerId if the multiaddr contains one\n *\n * @return {String|null} peerId - The id of the peer or null if invalid or missing from the ma\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n *\n * // should return QmValidBase58string or null if the id is missing or invalid\n * const peerId = mh1.getPeerId()\n */\nMultiaddr.prototype.getPeerId = function getPeerId () {\n  let b58str = null\n  try {\n    b58str = this.stringTuples().filter((tuple) => {\n      if (tuple[0] === protocols.names['ipfs'].code) {\n        return true\n      }\n    })[0][1]\n\n    bs58.decode(b58str)\n  } catch (e) {\n    b58str = null\n  }\n\n  return b58str\n}\n\n/**\n * Checks if two Multiaddrs are the same\n *\n * @param {Multiaddr} addr\n * @return {Bool}\n * @example\n * const mh1 = Multiaddr('/ip4/8.8.8.8/tcp/1080')\n * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n *\n * const mh2 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n *\n * mh1.equals(mh1)\n * // true\n *\n * mh1.equals(mh2)\n * // false\n */\nMultiaddr.prototype.equals = function equals (addr) {\n  return this.buffer.equals(addr.buffer)\n}\n\n/**\n * Gets a Multiaddrs node-friendly address object. Note that protocol information\n * is left out: in Node (and most network systems) the protocol is unknowable\n * given only the address.\n *\n * Has to be a ThinWaist Address, otherwise throws error\n *\n * @returns {{family: String, address: String, port: String}}\n * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\n * @example\n * Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n * // {family: 'IPv4', address: '127.0.0.1', port: '4001'}\n */\nMultiaddr.prototype.nodeAddress = function nodeAddress () {\n  if (!this.isThinWaistAddress()) {\n    throw new Error('Multiaddr must be \"thin waist\" address for nodeAddress.')\n  }\n\n  const codes = this.protoCodes()\n  const parts = this.toString().split('/').slice(1)\n  return {\n    family: (codes[0] === 41) ? 'IPv6' : 'IPv4',\n    address: parts[1], // ip addr\n    port: parts[3] // tcp or udp port\n  }\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @param {String} addr\n * @param {String} transport\n * @returns {Multiaddr} multiaddr\n * @throws {Error} Throws error if addr is not truthy\n * @throws {Error} Throws error if transport is not truthy\n * @example\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n */\nMultiaddr.fromNodeAddress = function fromNodeAddress (addr, transport) {\n  if (!addr) throw new Error('requires node address object')\n  if (!transport) throw new Error('requires transport protocol')\n  const ip = (addr.family === 'IPv6') ? 'ip6' : 'ip4'\n  return Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n}\n\n// TODO find a better example, not sure about it's good enough\n/**\n * Returns if a Multiaddr is a Thin Waist address or not.\n *\n * Thin Waist is if a Multiaddr adheres to the standard combination of:\n *\n * `{IPv4, IPv6}/{TCP, UDP}`\n *\n * @param {Multiaddr} [addr] - Defaults to using `this` instance\n * @returns {Boolean} isThinWaistAddress\n * @example\n * const mh1 = Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * const mh2 = Multiaddr('/ip4/192.168.2.1/tcp/5001')\n * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n * const mh3 = mh1.encapsulate(mh2)\n * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n * mh1.isThinWaistAddress()\n * // true\n * mh2.isThinWaistAddress()\n * // true\n * mh3.isThinWaistAddress()\n * // false\n */\nMultiaddr.prototype.isThinWaistAddress = function isThinWaistAddress (addr) {\n  const protos = (addr || this).protos()\n\n  if (protos.length !== 2) {\n    return false\n  }\n\n  if (protos[0].code !== 4 && protos[0].code !== 41) {\n    return false\n  }\n  if (protos[1].code !== 6 && protos[1].code !== 17) {\n    return false\n  }\n  return true\n}\n\n// TODO rename this to something else than \"stupid string\"\n/**\n * Converts a \"stupid string\" into a Multiaddr.\n *\n * Stupid string format:\n * ```\n * <proto><IPv>://<IP Addr>[:<proto port>]\n * udp4://1.2.3.4:5678\n * ```\n *\n * @param {String} [str] - String in the \"stupid\" format\n * @throws {NotImplemented}\n * @returns {undefined}\n * @todo Not Implemented yet\n */\nMultiaddr.prototype.fromStupidString = function fromStupidString (str) {\n  throw NotImplemented\n}\n\n/**\n * Object containing table, names and codes of all supported protocols.\n * To get the protocol values from a Multiaddr, you can use\n * [`.protos()`](#multiaddrprotos),\n * [`.protoCodes()`](#multiaddrprotocodes) or\n * [`.protoNames()`](#multiaddrprotonames)\n *\n * @instance\n * @returns {{table: Array, names: Object, codes: Object}}\n *\n */\nMultiaddr.protocols = protocols\n\n/**\n * Returns if something is a Multiaddr that is a name\n *\n * @param {Multiaddr} addr\n * @return {Bool} isName\n */\nMultiaddr.isName = function isName (addr) {\n  if (!Multiaddr.isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Returns an array of multiaddrs, by resolving the multiaddr that is a name\n *\n * @param {Multiaddr} addr\n *\n * @param {Function} callback\n * @return {Bool} isName\n */\nMultiaddr.resolve = function resolve (addr, callback) {\n  if (!Multiaddr.isMultiaddr(addr) || !Multiaddr.isName(addr)) {\n    return callback(new Error('not a valid name'))\n  }\n\n  /*\n   * Needs more consideration from spec design:\n   *   - what to return\n   *   - how to achieve it in the browser?\n   */\n  return callback(new Error('not implemented yet'))\n}\n\nexports = module.exports = Multiaddr\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}