{"ast":null,"code":"'use strict';\n\nconst nodeify = require('../nodeify');\nconst webcrypto = require('../webcrypto.js')();\nexports.utils = require('./rsa-utils');\nexports.generateKey = function (bits, callback) {\n  nodeify(webcrypto.subtle.generateKey({\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: bits,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['sign', 'verify']).then(exportKey).then(keys => ({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })), callback);\n};\n\n// Takes a jwk key\nexports.unmarshalPrivateKey = function (key, callback) {\n  const privateKey = webcrypto.subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['sign']);\n  nodeify(Promise.all([privateKey, derivePublicFromPrivate(key)]).then(keys => exportKey({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })).then(keys => ({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })), callback);\n};\nexports.getRandomValues = function (arr) {\n  return Buffer.from(webcrypto.getRandomValues(arr));\n};\nexports.hashAndSign = function (key, msg, callback) {\n  nodeify(webcrypto.subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, false, ['sign']).then(privateKey => {\n    return webcrypto.subtle.sign({\n      name: 'RSASSA-PKCS1-v1_5'\n    }, privateKey, Uint8Array.from(msg));\n  }).then(sig => Buffer.from(sig)), callback);\n};\nexports.hashAndVerify = function (key, sig, msg, callback) {\n  nodeify(webcrypto.subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, false, ['verify']).then(publicKey => {\n    return webcrypto.subtle.verify({\n      name: 'RSASSA-PKCS1-v1_5'\n    }, publicKey, sig, msg);\n  }), callback);\n};\nfunction exportKey(pair) {\n  return Promise.all([webcrypto.subtle.exportKey('jwk', pair.privateKey), webcrypto.subtle.exportKey('jwk', pair.publicKey)]);\n}\nfunction derivePublicFromPrivate(jwKey) {\n  return webcrypto.subtle.importKey('jwk', {\n    kty: jwKey.kty,\n    n: jwKey.n,\n    e: jwKey.e\n  }, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['verify']);\n}","map":{"version":3,"names":["nodeify","require","webcrypto","exports","utils","generateKey","bits","callback","subtle","name","modulusLength","publicExponent","Uint8Array","hash","then","exportKey","keys","privateKey","publicKey","unmarshalPrivateKey","key","importKey","Promise","all","derivePublicFromPrivate","getRandomValues","arr","Buffer","from","hashAndSign","msg","sign","sig","hashAndVerify","verify","pair","jwKey","kty","n","e"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/libp2p-crypto/src/keys/rsa-browser.js"],"sourcesContent":["'use strict'\n\nconst nodeify = require('../nodeify')\n\nconst webcrypto = require('../webcrypto.js')()\n\nexports.utils = require('./rsa-utils')\n\nexports.generateKey = function (bits, callback) {\n  nodeify(webcrypto.subtle.generateKey(\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: bits,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n      hash: {name: 'SHA-256'}\n    },\n    true,\n    ['sign', 'verify']\n  )\n    .then(exportKey)\n    .then((keys) => ({\n      privateKey: keys[0],\n      publicKey: keys[1]\n    })), callback)\n}\n\n// Takes a jwk key\nexports.unmarshalPrivateKey = function (key, callback) {\n  const privateKey = webcrypto.subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: {name: 'SHA-256'}\n    },\n    true,\n    ['sign']\n  )\n\n  nodeify(Promise.all([\n    privateKey,\n    derivePublicFromPrivate(key)\n  ]).then((keys) => exportKey({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })).then((keys) => ({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })), callback)\n}\n\nexports.getRandomValues = function (arr) {\n  return Buffer.from(webcrypto.getRandomValues(arr))\n}\n\nexports.hashAndSign = function (key, msg, callback) {\n  nodeify(webcrypto.subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: {name: 'SHA-256'}\n    },\n    false,\n    ['sign']\n  ).then((privateKey) => {\n    return webcrypto.subtle.sign(\n      {name: 'RSASSA-PKCS1-v1_5'},\n      privateKey,\n      Uint8Array.from(msg)\n    )\n  }).then((sig) => Buffer.from(sig)), callback)\n}\n\nexports.hashAndVerify = function (key, sig, msg, callback) {\n  nodeify(webcrypto.subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: {name: 'SHA-256'}\n    },\n    false,\n    ['verify']\n  ).then((publicKey) => {\n    return webcrypto.subtle.verify(\n      {name: 'RSASSA-PKCS1-v1_5'},\n      publicKey,\n      sig,\n      msg\n    )\n  }), callback)\n}\n\nfunction exportKey (pair) {\n  return Promise.all([\n    webcrypto.subtle.exportKey('jwk', pair.privateKey),\n    webcrypto.subtle.exportKey('jwk', pair.publicKey)\n  ])\n}\n\nfunction derivePublicFromPrivate (jwKey) {\n  return webcrypto.subtle.importKey(\n    'jwk',\n    {\n      kty: jwKey.kty,\n      n: jwKey.n,\n      e: jwKey.e\n    },\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: {name: 'SHA-256'}\n    },\n    true,\n    ['verify']\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}