{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar buffer_1 = require(\"buffer\");\nvar transaction_1 = require(\"./transaction\");\n/**\n * Creates a new transaction object that doesn't need to be signed.\n *\n * @param data - A transaction can be initialized with its rlp representation, an array containing\n * the value of its fields in order, or an object containing them by name.\n *\n * @param opts - The transaction's options, used to indicate the chain and hardfork the\n * transactions belongs to.\n *\n * @see Transaction\n */\nvar FakeTransaction = /** @class */function (_super) {\n  __extends(FakeTransaction, _super);\n  function FakeTransaction(data, opts) {\n    if (data === void 0) {\n      data = {};\n    }\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _this = _super.call(this, data, opts) || this;\n    Object.defineProperty(_this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: function () {\n        return _this.getSenderAddress();\n      },\n      set: function (val) {\n        if (val) {\n          _this._from = ethereumjs_util_1.toBuffer(val);\n        }\n      }\n    });\n    var txData = data;\n    if (txData.from) {\n      _this.from = ethereumjs_util_1.toBuffer(txData.from);\n    }\n    return _this;\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx, using the sender address to generate a fake\n   * signature.\n   *\n   * @param includeSignature - Whether or not to include the signature\n   */\n  FakeTransaction.prototype.hash = function (includeSignature) {\n    if (includeSignature === void 0) {\n      includeSignature = true;\n    }\n    if (includeSignature && this._from && this._from.toString('hex') !== '') {\n      // include a fake signature using the from address as a private key\n      var fakeKey = buffer_1.Buffer.concat([this._from, this._from.slice(0, 12)]);\n      this.sign(fakeKey);\n    }\n    return _super.prototype.hash.call(this, includeSignature);\n  };\n  return FakeTransaction;\n}(transaction_1.default);\nexports.default = FakeTransaction;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;;;;;;;;;;;AAWA;EAA6CA;EAO3C,yBACEC,IAAiE,EACjEC,IAA6B;IAD7B;MAAAD,SAAiE;IAAA;IACjE;MAAAC,SAA6B;IAAA;IAF/B,YAIEC,kBAAMF,IAAI,EAAEC,IAAI,CAAC;IAEjBE,MAAM,CAACC,cAAc,CAACC,KAAI,EAAE,MAAM,EAAE;MAClCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,GAAG,EAAE;QAAM,YAAI,CAACC,gBAAgB,EAAE;MAAvB,CAAuB;MAClCC,GAAG,EAAE,aAAG;QACN,IAAIC,GAAG,EAAE;UACPN,KAAI,CAACO,KAAK,GAAGC,0BAAQ,CAACF,GAAG,CAAC;;MAE9B;KACD,CAAC;IAEF,IAAMG,MAAM,GAAGd,IAAkB;IACjC,IAAIc,MAAM,CAACC,IAAI,EAAE;MACfV,KAAI,CAACU,IAAI,GAAGF,0BAAQ,CAACC,MAAM,CAACC,IAAI,CAAC;;;EAErC;EAEA;;;;;;EAMAC,8BAAI,GAAJ,UAAKC,gBAAuB;IAAvB;MAAAA,uBAAuB;IAAA;IAC1B,IAAIA,gBAAgB,IAAI,IAAI,CAACL,KAAK,IAAI,IAAI,CAACA,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE;MACvE;MACA,IAAMC,OAAO,GAAGC,eAAM,CAACC,MAAM,CAAC,CAAC,IAAI,CAACT,KAAK,EAAE,IAAI,CAACA,KAAK,CAACU,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;MACpE,IAAI,CAACC,IAAI,CAACJ,OAAO,CAAC;;IAGpB,OAAOjB,iBAAMsB,IAAI,YAACP,gBAAgB,CAAC;EACrC,CAAC;EACH,sBAAC;AAAD,CAAC,CA7C4CQ,qBAAW","names":["__extends","data","opts","_super","Object","defineProperty","_this","enumerable","configurable","get","getSenderAddress","set","val","_from","ethereumjs_util_1","txData","from","FakeTransaction","includeSignature","toString","fakeKey","buffer_1","concat","slice","sign","hash","transaction_1"],"sourceRoot":"","sources":["../src/fake.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}