{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\nconst dagCBOR = require('ipld-dag-cbor');\nconst promisify = require('promisify-es6');\nconst CID = require('cids');\nconst multihash = require('multihashes');\nconst SendOneFile = require('../utils/send-one-file');\nmodule.exports = send => {\n  const sendOneFile = SendOneFile(send, 'dag/put');\n  return promisify((dagNode, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n    }\n    options = options || {};\n    if (options.hash) {\n      options.hashAlg = options.hash;\n      delete options.hash;\n    }\n    if (options.cid && (options.format || options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hash` options.'));\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      return callback(new Error('Can\\'t put dag node. Please provide `format` AND `hash` options.'));\n    }\n    if (options.cid) {\n      let cid;\n      try {\n        cid = new CID(options.cid);\n      } catch (err) {\n        return callback(err);\n      }\n      options.format = cid.codec;\n      options.hashAlg = multihash.decode(cid.multihash).name;\n      delete options.cid;\n    }\n    const optionDefaults = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw'\n    };\n    options = Object.assign(optionDefaults, options);\n    if (options.format === 'dag-cbor') {\n      dagCBOR.util.serialize(dagNode, finalize);\n    } else if (options.format === 'dag-pb') {\n      dagPB.util.serialize(dagNode, finalize);\n    } else {\n      // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n      finalize(null, dagNode);\n    }\n    function finalize(err, serialized) {\n      if (err) {\n        return callback(err);\n      }\n      const sendOptions = {\n        qs: {\n          hash: options.hashAlg,\n          format: options.format,\n          'input-enc': options.inputEnc\n        }\n      };\n      sendOneFile(serialized, sendOptions, (err, result) => {\n        if (err) {\n          return callback(err);\n        }\n        if (result['Cid']) {\n          return callback(null, new CID(result['Cid']['/']));\n        } else {\n          return callback(result);\n        }\n      });\n    }\n  });\n};","map":{"version":3,"names":["dagPB","require","dagCBOR","promisify","CID","multihash","SendOneFile","module","exports","send","sendOneFile","dagNode","options","callback","hash","hashAlg","cid","format","Error","err","codec","decode","name","optionDefaults","inputEnc","Object","assign","util","serialize","finalize","serialized","sendOptions","qs","result"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipfs-api/src/dag/put.js"],"sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst promisify = require('promisify-es6')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst SendOneFile = require('../utils/send-one-file')\n\nmodule.exports = (send) => {\n  const sendOneFile = SendOneFile(send, 'dag/put')\n\n  return promisify((dagNode, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n    }\n\n    options = options || {}\n\n    if (options.hash) {\n      options.hashAlg = options.hash\n      delete options.hash\n    }\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hash` options.'))\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      return callback(new Error('Can\\'t put dag node. Please provide `format` AND `hash` options.'))\n    }\n\n    if (options.cid) {\n      let cid\n\n      try {\n        cid = new CID(options.cid)\n      } catch (err) {\n        return callback(err)\n      }\n\n      options.format = cid.codec\n      options.hashAlg = multihash.decode(cid.multihash).name\n      delete options.cid\n    }\n\n    const optionDefaults = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw'\n    }\n\n    options = Object.assign(optionDefaults, options)\n\n    if (options.format === 'dag-cbor') {\n      dagCBOR.util.serialize(dagNode, finalize)\n    } else if (options.format === 'dag-pb') {\n      dagPB.util.serialize(dagNode, finalize)\n    } else {\n      // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n      finalize(null, dagNode)\n    }\n\n    function finalize (err, serialized) {\n      if (err) { return callback(err) }\n      const sendOptions = {\n        qs: {\n          hash: options.hashAlg,\n          format: options.format,\n          'input-enc': options.inputEnc\n        }\n      }\n      sendOneFile(serialized, sendOptions, (err, result) => {\n        if (err) {\n          return callback(err)\n        }\n        if (result['Cid']) {\n          return callback(null, new CID(result['Cid']['/']))\n        } else {\n          return callback(result)\n        }\n      })\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}