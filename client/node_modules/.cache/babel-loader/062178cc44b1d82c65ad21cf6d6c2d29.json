{"ast":null,"code":"'use strict';\n\nconst util = require('./util');\nconst traverse = require('traverse');\nconst CID = require('cids');\nexports = module.exports;\nexports.multicodec = 'dag-cbor';\nexports.defaultHashAlg = 'sha2-256';\n\n/*\n * resolve: receives a path and a binary blob and returns the value on path,\n * throw if not possible. `binaryBlob` is CBOR encoded data.\n */\nexports.resolve = (binaryBlob, path, callback) => {\n  if (typeof path === 'function') {\n    callback = path;\n    path = undefined;\n  }\n  util.deserialize(binaryBlob, (err, node) => {\n    if (err) {\n      return callback(err);\n    }\n\n    // root\n\n    if (!path || path === '/') {\n      return callback(null, {\n        value: node,\n        remainderPath: ''\n      });\n    }\n\n    // within scope\n\n    const parts = path.split('/');\n    const val = traverse(node).get(parts);\n    if (val !== undefined) {\n      return callback(null, {\n        value: val,\n        remainderPath: ''\n      });\n    }\n\n    // out of scope\n    let value;\n    const len = parts.length;\n    for (let i = 0; i < len; i++) {\n      const partialPath = parts.shift();\n      if (Array.isArray(node) && !Buffer.isBuffer(node)) {\n        value = node[Number(partialPath)];\n      }\n      if (node[partialPath]) {\n        value = node[partialPath];\n      } else {\n        // can't traverse more\n        if (!value) {\n          return callback(new Error('path not available at root'));\n        } else {\n          parts.unshift(partialPath);\n          return callback(null, {\n            value: value,\n            remainderPath: parts.join('/')\n          });\n        }\n      }\n      node = value;\n    }\n  });\n};\nfunction flattenObject(obj, delimiter) {\n  delimiter = delimiter || '/';\n  if (Object.keys(obj).length === 0) {\n    return [];\n  }\n  return traverse(obj).reduce(function (acc, x) {\n    if (CID.isCID(x)) {\n      this.update(undefined);\n    }\n    const path = this.path.join(delimiter);\n    if (path !== '') {\n      acc.push({\n        path: path,\n        value: x\n      });\n    }\n    return acc;\n  }, []);\n}\n\n/*\n * tree: returns a flattened array with paths: values of the project. options\n * are option (i.e. nestness)\n */\nexports.tree = (binaryBlob, options, callback) => {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n  options = options || {};\n  util.deserialize(binaryBlob, (err, node) => {\n    if (err) {\n      return callback(err);\n    }\n    const flat = flattenObject(node);\n    const paths = flat.map(el => el.path);\n    callback(null, paths);\n  });\n};\nexports.isLink = (binaryBlob, path, callback) => {\n  exports.resolve(binaryBlob, path, (err, result) => {\n    if (err) {\n      return callback(err);\n    }\n    if (result.remainderPath.length > 0) {\n      return callback(new Error('path out of scope'));\n    }\n    if (CID.isCID(result.value)) {\n      callback(null, result.value);\n    } else {\n      callback(null, false);\n    }\n  });\n};","map":{"version":3,"names":["util","require","traverse","CID","exports","module","multicodec","defaultHashAlg","resolve","binaryBlob","path","callback","undefined","deserialize","err","node","value","remainderPath","parts","split","val","get","len","length","i","partialPath","shift","Array","isArray","Buffer","isBuffer","Number","Error","unshift","join","flattenObject","obj","delimiter","Object","keys","reduce","acc","x","isCID","update","push","tree","options","flat","paths","map","el","isLink","result"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ipld-dag-cbor/src/resolver.js"],"sourcesContent":["'use strict'\n\nconst util = require('./util')\nconst traverse = require('traverse')\nconst CID = require('cids')\n\nexports = module.exports\n\nexports.multicodec = 'dag-cbor'\nexports.defaultHashAlg = 'sha2-256'\n\n/*\n * resolve: receives a path and a binary blob and returns the value on path,\n * throw if not possible. `binaryBlob` is CBOR encoded data.\n */\nexports.resolve = (binaryBlob, path, callback) => {\n  if (typeof path === 'function') {\n    callback = path\n    path = undefined\n  }\n\n  util.deserialize(binaryBlob, (err, node) => {\n    if (err) {\n      return callback(err)\n    }\n\n    // root\n\n    if (!path || path === '/') {\n      return callback(null, {\n        value: node,\n        remainderPath: ''\n      })\n    }\n\n    // within scope\n\n    const parts = path.split('/')\n    const val = traverse(node).get(parts)\n\n    if (val !== undefined) {\n      return callback(null, {\n        value: val,\n        remainderPath: ''\n      })\n    }\n\n    // out of scope\n    let value\n    const len = parts.length\n\n    for (let i = 0; i < len; i++) {\n      const partialPath = parts.shift()\n\n      if (Array.isArray(node) && !Buffer.isBuffer(node)) {\n        value = node[Number(partialPath)]\n      } if (node[partialPath]) {\n        value = node[partialPath]\n      } else {\n        // can't traverse more\n        if (!value) {\n          return callback(new Error('path not available at root'))\n        } else {\n          parts.unshift(partialPath)\n          return callback(null, {\n            value: value,\n            remainderPath: parts.join('/')\n          })\n        }\n      }\n      node = value\n    }\n  })\n}\n\nfunction flattenObject (obj, delimiter) {\n  delimiter = delimiter || '/'\n\n  if (Object.keys(obj).length === 0) {\n    return []\n  }\n\n  return traverse(obj).reduce(function (acc, x) {\n    if (CID.isCID(x)) {\n      this.update(undefined)\n    }\n    const path = this.path.join(delimiter)\n\n    if (path !== '') {\n      acc.push({ path: path, value: x })\n    }\n    return acc\n  }, [])\n}\n\n/*\n * tree: returns a flattened array with paths: values of the project. options\n * are option (i.e. nestness)\n */\nexports.tree = (binaryBlob, options, callback) => {\n  if (typeof options === 'function') {\n    callback = options\n    options = undefined\n  }\n\n  options = options || {}\n\n  util.deserialize(binaryBlob, (err, node) => {\n    if (err) {\n      return callback(err)\n    }\n    const flat = flattenObject(node)\n    const paths = flat.map((el) => el.path)\n\n    callback(null, paths)\n  })\n}\n\nexports.isLink = (binaryBlob, path, callback) => {\n  exports.resolve(binaryBlob, path, (err, result) => {\n    if (err) {\n      return callback(err)\n    }\n\n    if (result.remainderPath.length > 0) {\n      return callback(new Error('path out of scope'))\n    }\n\n    if (CID.isCID(result.value)) {\n      callback(null, result.value)\n    } else {\n      callback(null, false)\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}