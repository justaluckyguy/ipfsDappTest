{"ast":null,"code":"'use strict';\n\n// A wrapper function that returns false if the address is not valid; used to\n// avoid boilerplate checks for `if (!this.valid) { return false; }`\nvar falseIfInvalid = exports.falseIfInvalid = function (fn) {\n  return function () {\n    if (!this.valid) {\n      return false;\n    }\n    return fn.apply(this, arguments);\n  };\n};\nexports.isInSubnet = falseIfInvalid(function (address) {\n  if (this.subnetMask < address.subnetMask) {\n    return false;\n  }\n  if (this.mask(address.subnetMask) === address.mask()) {\n    return true;\n  }\n  return false;\n});\nexports.isCorrect = function (defaultBits) {\n  return falseIfInvalid(function () {\n    if (this.addressMinusSuffix !== this.correctForm()) {\n      return false;\n    }\n    if (this.subnetMask === defaultBits && !this.parsedSubnet) {\n      return true;\n    }\n    return this.parsedSubnet === String(this.subnetMask);\n  });\n};","map":{"version":3,"names":["falseIfInvalid","exports","fn","valid","apply","arguments","isInSubnet","address","subnetMask","mask","isCorrect","defaultBits","addressMinusSuffix","correctForm","parsedSubnet","String"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ip-address/lib/common.js"],"sourcesContent":["'use strict';\n\n// A wrapper function that returns false if the address is not valid; used to\n// avoid boilerplate checks for `if (!this.valid) { return false; }`\nvar falseIfInvalid = exports.falseIfInvalid = function (fn) {\n  return function () {\n    if (!this.valid) {\n      return false;\n    }\n\n    return fn.apply(this, arguments);\n  };\n};\n\nexports.isInSubnet = falseIfInvalid(function (address) {\n  if (this.subnetMask < address.subnetMask) {\n    return false;\n  }\n\n  if (this.mask(address.subnetMask) === address.mask()) {\n    return true;\n  }\n\n  return false;\n});\n\nexports.isCorrect = function (defaultBits) {\n  return falseIfInvalid(function () {\n    if (this.addressMinusSuffix !== this.correctForm()) {\n      return false;\n    }\n\n    if (this.subnetMask === defaultBits && !this.parsedSubnet) {\n      return true;\n    }\n\n    return this.parsedSubnet === String(this.subnetMask);\n  });\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA,IAAIA,cAAc,GAAGC,OAAO,CAACD,cAAc,GAAG,UAAUE,EAAE,EAAE;EAC1D,OAAO,YAAY;IACjB,IAAI,CAAC,IAAI,CAACC,KAAK,EAAE;MACf,OAAO,KAAK;IACd;IAEA,OAAOD,EAAE,CAACE,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAClC,CAAC;AACH,CAAC;AAEDJ,OAAO,CAACK,UAAU,GAAGN,cAAc,CAAC,UAAUO,OAAO,EAAE;EACrD,IAAI,IAAI,CAACC,UAAU,GAAGD,OAAO,CAACC,UAAU,EAAE;IACxC,OAAO,KAAK;EACd;EAEA,IAAI,IAAI,CAACC,IAAI,CAACF,OAAO,CAACC,UAAU,CAAC,KAAKD,OAAO,CAACE,IAAI,EAAE,EAAE;IACpD,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd,CAAC,CAAC;AAEFR,OAAO,CAACS,SAAS,GAAG,UAAUC,WAAW,EAAE;EACzC,OAAOX,cAAc,CAAC,YAAY;IAChC,IAAI,IAAI,CAACY,kBAAkB,KAAK,IAAI,CAACC,WAAW,EAAE,EAAE;MAClD,OAAO,KAAK;IACd;IAEA,IAAI,IAAI,CAACL,UAAU,KAAKG,WAAW,IAAI,CAAC,IAAI,CAACG,YAAY,EAAE;MACzD,OAAO,IAAI;IACb;IAEA,OAAO,IAAI,CAACA,YAAY,KAAKC,MAAM,CAAC,IAAI,CAACP,UAAU,CAAC;EACtD,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}