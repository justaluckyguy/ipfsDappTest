{"ast":null,"code":"'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\nvar spanAllZeroes = exports.spanAllZeroes = function (s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n};\n\n/**\n * @returns {String} the string with each character contained in a <span>\n */\nexports.spanAll = function (s, optionalOffset) {\n  if (optionalOffset === undefined) {\n    optionalOffset = 0;\n  }\n  var letters = s.split('');\n  return letters.map(function (n, i) {\n    return sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n, i + optionalOffset, spanAllZeroes(n)); // XXX Use #base-2 .value-0 instead?\n  }).join('');\n};\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\nexports.spanLeadingZeroes = function (address) {\n  var groups = address.split(':');\n  return groups.map(function (g) {\n    return spanLeadingZeroesSimple(g);\n  }).join(':');\n};\n\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\nexports.simpleGroup = function (addressString, offset) {\n  var groups = addressString.split(':');\n  if (!offset) {\n    offset = 0;\n  }\n  return groups.map(function (g, i) {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n    return sprintf('<span class=\"hover-group group-%d\">%s</span>', i + offset, spanLeadingZeroesSimple(g));\n  }).join(':');\n};","map":{"version":3,"names":["sprintf","require","spanAllZeroes","exports","s","replace","spanAll","optionalOffset","undefined","letters","split","map","n","i","join","spanLeadingZeroesSimple","group","spanLeadingZeroes","address","groups","g","simpleGroup","addressString","offset","test"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/ip-address/lib/v6/helpers.js"],"sourcesContent":["'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\nvar spanAllZeroes = exports.spanAllZeroes = function (s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n};\n\n/**\n * @returns {String} the string with each character contained in a <span>\n */\nexports.spanAll = function (s, optionalOffset) {\n  if (optionalOffset === undefined) {\n    optionalOffset = 0;\n  }\n\n  var letters = s.split('');\n\n  return letters.map(function (n, i) {\n    return sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n,\n      i + optionalOffset,\n      spanAllZeroes(n)); // XXX Use #base-2 .value-0 instead?\n  }).join('');\n};\n\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\nexports.spanLeadingZeroes = function (address) {\n  var groups = address.split(':');\n\n  return groups.map(function (g) {\n    return spanLeadingZeroesSimple(g);\n  }).join(':');\n};\n\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\nexports.simpleGroup = function (addressString, offset) {\n  var groups = addressString.split(':');\n\n  if (!offset) {\n    offset = 0;\n  }\n\n  return groups.map(function (g, i) {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n\n    return sprintf('<span class=\"hover-group group-%d\">%s</span>',\n      i + offset,\n      spanLeadingZeroesSimple(g));\n  }).join(':');\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAY,CAAC,CAACD,OAAO;;AAE3C;AACA;AACA;AACA,IAAIE,aAAa,GAAGC,OAAO,CAACD,aAAa,GAAG,UAAUE,CAAC,EAAE;EACvD,OAAOA,CAAC,CAACC,OAAO,CAAC,OAAO,EAAE,8BAA8B,CAAC;AAC3D,CAAC;;AAED;AACA;AACA;AACAF,OAAO,CAACG,OAAO,GAAG,UAAUF,CAAC,EAAEG,cAAc,EAAE;EAC7C,IAAIA,cAAc,KAAKC,SAAS,EAAE;IAChCD,cAAc,GAAG,CAAC;EACpB;EAEA,IAAIE,OAAO,GAAGL,CAAC,CAACM,KAAK,CAAC,EAAE,CAAC;EAEzB,OAAOD,OAAO,CAACE,GAAG,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;IACjC,OAAOb,OAAO,CAAC,oDAAoD,EAAEY,CAAC,EACpEC,CAAC,GAAGN,cAAc,EAClBL,aAAa,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;AACb,CAAC;AAED,SAASC,uBAAuB,CAACC,KAAK,EAAE;EACtC,OAAOA,KAAK,CAACX,OAAO,CAAC,OAAO,EAAE,8BAA8B,CAAC;AAC/D;;AAEA;AACA;AACA;AACAF,OAAO,CAACc,iBAAiB,GAAG,UAAUC,OAAO,EAAE;EAC7C,IAAIC,MAAM,GAAGD,OAAO,CAACR,KAAK,CAAC,GAAG,CAAC;EAE/B,OAAOS,MAAM,CAACR,GAAG,CAAC,UAAUS,CAAC,EAAE;IAC7B,OAAOL,uBAAuB,CAACK,CAAC,CAAC;EACnC,CAAC,CAAC,CAACN,IAAI,CAAC,GAAG,CAAC;AACd,CAAC;;AAED;AACA;AACA;AACA;AACAX,OAAO,CAACkB,WAAW,GAAG,UAAUC,aAAa,EAAEC,MAAM,EAAE;EACrD,IAAIJ,MAAM,GAAGG,aAAa,CAACZ,KAAK,CAAC,GAAG,CAAC;EAErC,IAAI,CAACa,MAAM,EAAE;IACXA,MAAM,GAAG,CAAC;EACZ;EAEA,OAAOJ,MAAM,CAACR,GAAG,CAAC,UAAUS,CAAC,EAAEP,CAAC,EAAE;IAChC,IAAI,UAAU,CAACW,IAAI,CAACJ,CAAC,CAAC,EAAE;MACtB,OAAOA,CAAC;IACV;IAEA,OAAOpB,OAAO,CAAC,8CAA8C,EAC3Da,CAAC,GAAGU,MAAM,EACVR,uBAAuB,CAACK,CAAC,CAAC,CAAC;EAC/B,CAAC,CAAC,CAACN,IAAI,CAAC,GAAG,CAAC;AACd,CAAC"},"metadata":{},"sourceType":"script"}