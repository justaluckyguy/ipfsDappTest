{"ast":null,"code":"'use strict';\n\nconst ip = require('ip');\nconst ipAddress = require('ip-address');\nconst protocols = require('./protocols-table');\nconst bs58 = require('bs58');\nconst varint = require('varint');\nmodule.exports = Convert;\n\n// converts (serializes) addresses\nfunction Convert(proto, a) {\n  if (a instanceof Buffer) {\n    return Convert.toString(proto, a);\n  } else {\n    return Convert.toBuffer(proto, a);\n  }\n}\nConvert.toString = function convertToString(proto, buf) {\n  proto = protocols(proto);\n  switch (proto.code) {\n    case 4: // ipv4\n    case 41:\n      // ipv6\n      return ip.toString(buf);\n    case 6: // tcp\n    case 17: // udp\n    case 33: // dccp\n    case 132:\n      // sctp\n      return buf2port(buf);\n    case 54: // dns4\n    case 55: // dns6\n    case 56:\n      // dnsaddr\n      return buf2str(buf);\n    case 421:\n      // ipfs\n      return buf2mh(buf);\n    default:\n      return buf.toString('hex');\n    // no clue. convert to hex\n  }\n};\n\nConvert.toBuffer = function convertToBuffer(proto, str) {\n  proto = protocols(proto);\n  switch (proto.code) {\n    case 4:\n      // ipv4\n      return ip2buf(new ipAddress.Address4(str));\n    case 41:\n      // ipv6\n      return ip2buf(new ipAddress.Address6(str));\n    case 6: // tcp\n    case 17: // udp\n    case 33: // dccp\n    case 132:\n      // sctp\n      return port2buf(parseInt(str, 10));\n    case 54: // dns4\n    case 55: // dns6\n    case 56:\n      // dnsaddr\n      return str2buf(str);\n    case 421:\n      // ipfs\n      return mh2buf(str);\n    default:\n      return Buffer.from(str, 'hex');\n    // no clue. convert from hex\n  }\n};\n\nfunction ip2buf(ipaddr) {\n  if (!ipaddr.isValid()) throw new Error('invalid ip address');\n  return ip.toBuffer(ipaddr.address);\n}\nfunction port2buf(port) {\n  const buf = Buffer.alloc(2);\n  buf.writeUInt16BE(port, 0);\n  return buf;\n}\nfunction buf2port(buf) {\n  return buf.readUInt16BE(0);\n}\nfunction str2buf(str) {\n  const buf = Buffer.from(str);\n  const size = Buffer.from(varint.encode(buf.length));\n  return Buffer.concat([size, buf]);\n}\nfunction buf2str(buf) {\n  const size = varint.decode(buf);\n  buf = buf.slice(varint.decode.bytes);\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n  return buf.toString();\n}\nfunction mh2buf(hash) {\n  // the address is a varint prefixed multihash string representation\n  const mh = Buffer.from(bs58.decode(hash));\n  const size = Buffer.from(varint.encode(mh.length));\n  return Buffer.concat([size, mh]);\n}\nfunction buf2mh(buf) {\n  const size = varint.decode(buf);\n  const address = buf.slice(varint.decode.bytes);\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n  return bs58.encode(address);\n}","map":{"version":3,"names":["ip","require","ipAddress","protocols","bs58","varint","module","exports","Convert","proto","a","Buffer","toString","toBuffer","convertToString","buf","code","buf2port","buf2str","buf2mh","convertToBuffer","str","ip2buf","Address4","Address6","port2buf","parseInt","str2buf","mh2buf","from","ipaddr","isValid","Error","address","port","alloc","writeUInt16BE","readUInt16BE","size","encode","length","concat","decode","slice","bytes","hash","mh"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/multiaddr/src/convert.js"],"sourcesContent":["'use strict'\n\nconst ip = require('ip')\nconst ipAddress = require('ip-address')\nconst protocols = require('./protocols-table')\nconst bs58 = require('bs58')\nconst varint = require('varint')\n\nmodule.exports = Convert\n\n// converts (serializes) addresses\nfunction Convert (proto, a) {\n  if (a instanceof Buffer) {\n    return Convert.toString(proto, a)\n  } else {\n    return Convert.toBuffer(proto, a)\n  }\n}\n\nConvert.toString = function convertToString (proto, buf) {\n  proto = protocols(proto)\n  switch (proto.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return ip.toString(buf)\n\n    case 6: // tcp\n    case 17: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return buf2port(buf)\n\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n      return buf2str(buf)\n\n    case 421: // ipfs\n      return buf2mh(buf)\n    default:\n      return buf.toString('hex') // no clue. convert to hex\n  }\n}\n\nConvert.toBuffer = function convertToBuffer (proto, str) {\n  proto = protocols(proto)\n  switch (proto.code) {\n    case 4: // ipv4\n      return ip2buf(new ipAddress.Address4(str))\n    case 41: // ipv6\n      return ip2buf(new ipAddress.Address6(str))\n\n    case 6: // tcp\n    case 17: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2buf(parseInt(str, 10))\n\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n      return str2buf(str)\n\n    case 421: // ipfs\n      return mh2buf(str)\n    default:\n      return Buffer.from(str, 'hex') // no clue. convert from hex\n  }\n}\n\nfunction ip2buf (ipaddr) {\n  if (!ipaddr.isValid()) throw new Error('invalid ip address')\n  return ip.toBuffer(ipaddr.address)\n}\n\nfunction port2buf (port) {\n  const buf = Buffer.alloc(2)\n  buf.writeUInt16BE(port, 0)\n  return buf\n}\n\nfunction buf2port (buf) {\n  return buf.readUInt16BE(0)\n}\n\nfunction str2buf (str) {\n  const buf = Buffer.from(str)\n  const size = Buffer.from(varint.encode(buf.length))\n  return Buffer.concat([size, buf])\n}\n\nfunction buf2str (buf) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return buf.toString()\n}\n\nfunction mh2buf (hash) {\n  // the address is a varint prefixed multihash string representation\n  const mh = Buffer.from(bs58.decode(hash))\n  const size = Buffer.from(varint.encode(mh.length))\n  return Buffer.concat([size, mh])\n}\n\nfunction buf2mh (buf) {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return bs58.encode(address)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}