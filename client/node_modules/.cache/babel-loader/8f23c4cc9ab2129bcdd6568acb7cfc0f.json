{"ast":null,"code":"'use strict';\n\nconst base58 = require('bs58');\nconst multihash = require('multihashes');\nconst multibase = require('multibase');\nconst CID = require('cids');\nconst urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/;\nconst pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/;\nconst defaultProtocolMatch = 1;\nconst defaultHashMath = 4;\nconst fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/;\nconst fqdnHashMatch = 1;\nconst fqdnProtocolMatch = 2;\nfunction isMultihash(hash) {\n  const formatted = convertToString(hash);\n  try {\n    const buffer = Buffer.from(base58.decode(formatted));\n    multihash.decode(buffer);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction isMultibase(hash) {\n  try {\n    return multibase.isEncoded(hash);\n  } catch (e) {\n    return false;\n  }\n}\nfunction isCID(hash) {\n  try {\n    return CID.isCID(new CID(hash));\n  } catch (e) {\n    return false;\n  }\n}\nfunction isIpfs(input, pattern) {\n  let protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  let hashMatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultHashMath;\n  const formatted = convertToString(input);\n  if (!formatted) {\n    return false;\n  }\n  const match = formatted.match(pattern);\n  if (!match) {\n    return false;\n  }\n  if (match[protocolMatch] !== 'ipfs') {\n    return false;\n  }\n  let hash = match[hashMatch];\n  if (hash && pattern === fqdnPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase();\n  }\n  return isCID(hash);\n}\nfunction isIpns(input, pattern) {\n  let protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  let hashMatch = arguments.length > 3 ? arguments[3] : undefined;\n  const formatted = convertToString(input);\n  if (!formatted) {\n    return false;\n  }\n  const match = formatted.match(pattern);\n  if (!match) {\n    return false;\n  }\n  if (match[protocolMatch] !== 'ipns') {\n    return false;\n  }\n  if (hashMatch && pattern === fqdnPattern) {\n    let hash = match[hashMatch];\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase();\n    return isCID(hash);\n  }\n  return true;\n}\nfunction convertToString(input) {\n  if (Buffer.isBuffer(input)) {\n    return base58.encode(input);\n  }\n  if (typeof input === 'string') {\n    return input;\n  }\n  return false;\n}\nconst ipfsSubdomain = url => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);\nconst ipnsSubdomain = url => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);\nmodule.exports = {\n  multihash: isMultihash,\n  cid: isCID,\n  base32cid: cid => isMultibase(cid) === 'base32' && isCID(cid),\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: url => ipfsSubdomain(url) || ipnsSubdomain(url),\n  subdomainPattern: fqdnPattern,\n  ipfsUrl: url => isIpfs(url, urlPattern),\n  ipnsUrl: url => isIpns(url, urlPattern),\n  url: url => isIpfs(url, urlPattern) || isIpns(url, urlPattern),\n  urlPattern: urlPattern,\n  ipfsPath: path => isIpfs(path, pathPattern),\n  ipnsPath: path => isIpns(path, pathPattern),\n  path: path => isIpfs(path, pathPattern) || isIpns(path, pathPattern),\n  pathPattern: pathPattern,\n  urlOrPath: x => isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern)\n};","map":{"version":3,"names":["base58","require","multihash","multibase","CID","urlPattern","pathPattern","defaultProtocolMatch","defaultHashMath","fqdnPattern","fqdnHashMatch","fqdnProtocolMatch","isMultihash","hash","formatted","convertToString","buffer","Buffer","from","decode","e","isMultibase","isEncoded","isCID","isIpfs","input","pattern","protocolMatch","hashMatch","match","toLowerCase","isIpns","isBuffer","encode","ipfsSubdomain","url","ipnsSubdomain","module","exports","cid","base32cid","subdomain","subdomainPattern","ipfsUrl","ipnsUrl","ipfsPath","path","ipnsPath","urlOrPath","x"],"sources":["/home/isaak/Workspace/ipfsDapp/client/node_modules/is-ipfs/src/index.js"],"sourcesContent":["'use strict'\n\nconst base58 = require('bs58')\nconst multihash = require('multihashes')\nconst multibase = require('multibase')\nconst CID = require('cids')\n\nconst urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/\nconst pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 4\n\nconst fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/\nconst fqdnHashMatch = 1\nconst fqdnProtocolMatch = 2\n\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    const buffer = Buffer.from(base58.decode(formatted))\n    multihash.decode(buffer)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isMultibase (hash) {\n  try {\n    return multibase.isEncoded(hash)\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isCID (hash) {\n  try {\n    return CID.isCID(new CID(hash))\n  } catch (e) {\n    return false\n  }\n}\n\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === fqdnPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  if (hashMatch && pattern === fqdnPattern) {\n    let hash = match[hashMatch]\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase()\n    return isCID(hash)\n  }\n\n  return true\n}\n\nfunction convertToString (input) {\n  if (Buffer.isBuffer(input)) {\n    return base58.encode(input)\n  }\n\n  if (typeof input === 'string') {\n    return input\n  }\n\n  return false\n}\n\nconst ipfsSubdomain = (url) => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\nconst ipnsSubdomain = (url) => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\n\nmodule.exports = {\n  multihash: isMultihash,\n  cid: isCID,\n  base32cid: (cid) => (isMultibase(cid) === 'base32' && isCID(cid)),\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: (url) => (ipfsSubdomain(url) || ipnsSubdomain(url)),\n  subdomainPattern: fqdnPattern,\n  ipfsUrl: (url) => isIpfs(url, urlPattern),\n  ipnsUrl: (url) => isIpns(url, urlPattern),\n  url: (url) => (isIpfs(url, urlPattern) || isIpns(url, urlPattern)),\n  urlPattern: urlPattern,\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path: (path) => (isIpfs(path, pathPattern) || isIpns(path, pathPattern)),\n  pathPattern: pathPattern,\n  urlOrPath: (x) => (isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern))\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AACxC,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMG,GAAG,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE3B,MAAMI,UAAU,GAAG,0CAA0C;AAC7D,MAAMC,WAAW,GAAG,0BAA0B;AAC9C,MAAMC,oBAAoB,GAAG,CAAC;AAC9B,MAAMC,eAAe,GAAG,CAAC;AAEzB,MAAMC,WAAW,GAAG,0CAA0C;AAC9D,MAAMC,aAAa,GAAG,CAAC;AACvB,MAAMC,iBAAiB,GAAG,CAAC;AAE3B,SAASC,WAAW,CAAEC,IAAI,EAAE;EAC1B,MAAMC,SAAS,GAAGC,eAAe,CAACF,IAAI,CAAC;EACvC,IAAI;IACF,MAAMG,MAAM,GAAGC,MAAM,CAACC,IAAI,CAAClB,MAAM,CAACmB,MAAM,CAACL,SAAS,CAAC,CAAC;IACpDZ,SAAS,CAACiB,MAAM,CAACH,MAAM,CAAC;IACxB,OAAO,IAAI;EACb,CAAC,CAAC,OAAOI,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF;AAEA,SAASC,WAAW,CAAER,IAAI,EAAE;EAC1B,IAAI;IACF,OAAOV,SAAS,CAACmB,SAAS,CAACT,IAAI,CAAC;EAClC,CAAC,CAAC,OAAOO,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF;AAEA,SAASG,KAAK,CAAEV,IAAI,EAAE;EACpB,IAAI;IACF,OAAOT,GAAG,CAACmB,KAAK,CAAC,IAAInB,GAAG,CAACS,IAAI,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOO,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF;AAEA,SAASI,MAAM,CAAEC,KAAK,EAAEC,OAAO,EAAqE;EAAA,IAAnEC,aAAa,uEAAGpB,oBAAoB;EAAA,IAAEqB,SAAS,uEAAGpB,eAAe;EAChG,MAAMM,SAAS,GAAGC,eAAe,CAACU,KAAK,CAAC;EACxC,IAAI,CAACX,SAAS,EAAE;IACd,OAAO,KAAK;EACd;EAEA,MAAMe,KAAK,GAAGf,SAAS,CAACe,KAAK,CAACH,OAAO,CAAC;EACtC,IAAI,CAACG,KAAK,EAAE;IACV,OAAO,KAAK;EACd;EAEA,IAAIA,KAAK,CAACF,aAAa,CAAC,KAAK,MAAM,EAAE;IACnC,OAAO,KAAK;EACd;EAEA,IAAId,IAAI,GAAGgB,KAAK,CAACD,SAAS,CAAC;EAE3B,IAAIf,IAAI,IAAIa,OAAO,KAAKjB,WAAW,EAAE;IACnC;IACA;IACA;IACAI,IAAI,GAAGA,IAAI,CAACiB,WAAW,EAAE;EAC3B;EAEA,OAAOP,KAAK,CAACV,IAAI,CAAC;AACpB;AAEA,SAASkB,MAAM,CAAEN,KAAK,EAAEC,OAAO,EAAmD;EAAA,IAAjDC,aAAa,uEAAGpB,oBAAoB;EAAA,IAAEqB,SAAS;EAC9E,MAAMd,SAAS,GAAGC,eAAe,CAACU,KAAK,CAAC;EACxC,IAAI,CAACX,SAAS,EAAE;IACd,OAAO,KAAK;EACd;EACA,MAAMe,KAAK,GAAGf,SAAS,CAACe,KAAK,CAACH,OAAO,CAAC;EACtC,IAAI,CAACG,KAAK,EAAE;IACV,OAAO,KAAK;EACd;EAEA,IAAIA,KAAK,CAACF,aAAa,CAAC,KAAK,MAAM,EAAE;IACnC,OAAO,KAAK;EACd;EAEA,IAAIC,SAAS,IAAIF,OAAO,KAAKjB,WAAW,EAAE;IACxC,IAAII,IAAI,GAAGgB,KAAK,CAACD,SAAS,CAAC;IAC3B;IACA;IACA;IACAf,IAAI,GAAGA,IAAI,CAACiB,WAAW,EAAE;IACzB,OAAOP,KAAK,CAACV,IAAI,CAAC;EACpB;EAEA,OAAO,IAAI;AACb;AAEA,SAASE,eAAe,CAAEU,KAAK,EAAE;EAC/B,IAAIR,MAAM,CAACe,QAAQ,CAACP,KAAK,CAAC,EAAE;IAC1B,OAAOzB,MAAM,CAACiC,MAAM,CAACR,KAAK,CAAC;EAC7B;EAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EAEA,OAAO,KAAK;AACd;AAEA,MAAMS,aAAa,GAAIC,GAAG,IAAKX,MAAM,CAACW,GAAG,EAAE1B,WAAW,EAAEE,iBAAiB,EAAED,aAAa,CAAC;AACzF,MAAM0B,aAAa,GAAID,GAAG,IAAKJ,MAAM,CAACI,GAAG,EAAE1B,WAAW,EAAEE,iBAAiB,EAAED,aAAa,CAAC;AAEzF2B,MAAM,CAACC,OAAO,GAAG;EACfpC,SAAS,EAAEU,WAAW;EACtB2B,GAAG,EAAEhB,KAAK;EACViB,SAAS,EAAGD,GAAG,IAAMlB,WAAW,CAACkB,GAAG,CAAC,KAAK,QAAQ,IAAIhB,KAAK,CAACgB,GAAG,CAAE;EACjEL,aAAa,EAAEA,aAAa;EAC5BE,aAAa,EAAEA,aAAa;EAC5BK,SAAS,EAAGN,GAAG,IAAMD,aAAa,CAACC,GAAG,CAAC,IAAIC,aAAa,CAACD,GAAG,CAAE;EAC9DO,gBAAgB,EAAEjC,WAAW;EAC7BkC,OAAO,EAAGR,GAAG,IAAKX,MAAM,CAACW,GAAG,EAAE9B,UAAU,CAAC;EACzCuC,OAAO,EAAGT,GAAG,IAAKJ,MAAM,CAACI,GAAG,EAAE9B,UAAU,CAAC;EACzC8B,GAAG,EAAGA,GAAG,IAAMX,MAAM,CAACW,GAAG,EAAE9B,UAAU,CAAC,IAAI0B,MAAM,CAACI,GAAG,EAAE9B,UAAU,CAAE;EAClEA,UAAU,EAAEA,UAAU;EACtBwC,QAAQ,EAAGC,IAAI,IAAKtB,MAAM,CAACsB,IAAI,EAAExC,WAAW,CAAC;EAC7CyC,QAAQ,EAAGD,IAAI,IAAKf,MAAM,CAACe,IAAI,EAAExC,WAAW,CAAC;EAC7CwC,IAAI,EAAGA,IAAI,IAAMtB,MAAM,CAACsB,IAAI,EAAExC,WAAW,CAAC,IAAIyB,MAAM,CAACe,IAAI,EAAExC,WAAW,CAAE;EACxEA,WAAW,EAAEA,WAAW;EACxB0C,SAAS,EAAGC,CAAC,IAAMzB,MAAM,CAACyB,CAAC,EAAE5C,UAAU,CAAC,IAAI0B,MAAM,CAACkB,CAAC,EAAE5C,UAAU,CAAC,IAAImB,MAAM,CAACyB,CAAC,EAAE3C,WAAW,CAAC,IAAIyB,MAAM,CAACkB,CAAC,EAAE3C,WAAW;AACtH,CAAC"},"metadata":{},"sourceType":"script"}